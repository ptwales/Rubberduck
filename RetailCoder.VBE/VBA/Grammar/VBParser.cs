//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Mathieu\Source\Repos\Rubberduck\RetailCoder.VBE\VBA\VisualBasic6.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.VBA.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class VBParser : Parser {
	public const int
		T__8=1, T__7=2, T__6=3, T__5=4, T__4=5, T__3=6, T__2=7, T__1=8, T__0=9, 
		ACCESS=10, ADDRESSOF=11, ALIAS=12, AND=13, ATTRIBUTE=14, APPACTIVATE=15, 
		APPEND=16, AS=17, BEGIN=18, BEEP=19, BINARY=20, BOOLEAN=21, BYVAL=22, 
		BYREF=23, BYTE=24, CALL=25, CASE=26, CHDIR=27, CHDRIVE=28, CLASS=29, CLOSE=30, 
		COLLECTION=31, CONST=32, DATABASE=33, DATE=34, DECLARE=35, DEFBOOL=36, 
		DEFBYTE=37, DEFDATE=38, DEFDBL=39, DEFDEC=40, DEFCUR=41, DEFINT=42, DEFLNG=43, 
		DEFOBJ=44, DEFSNG=45, DEFSTR=46, DEFVAR=47, DELETESETTING=48, DIM=49, 
		DO=50, DOUBLE=51, EACH=52, ELSE=53, ELSEIF=54, END_ENUM=55, END_FUNCTION=56, 
		END_IF=57, END_PROPERTY=58, END_SELECT=59, END_SUB=60, END_TYPE=61, END_WITH=62, 
		END=63, ENUM=64, EQV=65, ERASE=66, ERROR=67, EVENT=68, EXIT_DO=69, EXIT_FOR=70, 
		EXIT_FUNCTION=71, EXIT_PROPERTY=72, EXIT_SUB=73, FALSE=74, FILECOPY=75, 
		FRIEND=76, FOR=77, FUNCTION=78, GET=79, GLOBAL=80, GOSUB=81, GOTO=82, 
		IF=83, IMP=84, IMPLEMENTS=85, IN=86, INPUT=87, IS=88, INTEGER=89, KILL=90, 
		LOAD=91, LOCK=92, LONG=93, LOOP=94, LEN=95, LET=96, LIB=97, LIKE=98, LINE_INPUT=99, 
		LOCK_READ=100, LOCK_WRITE=101, LOCK_READ_WRITE=102, LSET=103, MACRO_IF=104, 
		MACRO_ELSEIF=105, MACRO_ELSE=106, MACRO_END_IF=107, ME=108, MID=109, MKDIR=110, 
		MOD=111, NAME=112, NEXT=113, NEW=114, NOT=115, NOTHING=116, NULL=117, 
		ON=118, ON_ERROR=119, OPEN=120, OPTIONAL=121, OPTION_BASE=122, OPTION_EXPLICIT=123, 
		OPTION_COMPARE=124, OPTION_PRIVATE_MODULE=125, OR=126, OUTPUT=127, PARAMARRAY=128, 
		PRESERVE=129, PRINT=130, PRIVATE=131, PROPERTY_GET=132, PROPERTY_LET=133, 
		PROPERTY_SET=134, PUBLIC=135, PUT=136, RANDOM=137, RANDOMIZE=138, RAISEEVENT=139, 
		READ=140, READ_WRITE=141, REDIM=142, REM=143, RESET=144, RESUME=145, RETURN=146, 
		RMDIR=147, RSET=148, SAVEPICTURE=149, SAVESETTING=150, SEEK=151, SELECT=152, 
		SENDKEYS=153, SET=154, SETATTR=155, SHARED=156, SINGLE=157, SPC=158, STATIC=159, 
		STEP=160, STOP=161, STRING=162, SUB=163, TAB=164, TEXT=165, THEN=166, 
		TIME=167, TO=168, TRUE=169, TYPE=170, TYPEOF=171, UNLOAD=172, UNLOCK=173, 
		UNTIL=174, VARIANT=175, VERSION=176, WEND=177, WHILE=178, WIDTH=179, WITH=180, 
		WITHEVENTS=181, WRITE=182, XOR=183, AMPERSAND=184, ASSIGN=185, DIV=186, 
		EQ=187, GEQ=188, GT=189, LEQ=190, LPAREN=191, LT=192, MINUS=193, MINUS_EQ=194, 
		MULT=195, NEQ=196, PLUS=197, PLUS_EQ=198, POW=199, RPAREN=200, L_SQUARE_BRACKET=201, 
		R_SQUARE_BRACKET=202, STRINGLITERAL=203, DATELITERAL=204, COLORLITERAL=205, 
		INTEGERLITERAL=206, DOUBLELITERAL=207, FILENUMBER=208, IDENTIFIER=209, 
		LINE_CONTINUATION=210, NEWLINE=211, COMMENT=212, WS=213;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'%'", "'.'", "','", "':'", "'@'", "'#'", "';'", "'!'", "'$'", 
		"ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND", 
		"AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
		"CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST", 
		"DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", 
		"DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
		"MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
		"NOTHING", "NULL", "ON", "ON_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "'&'", "':='", "DIV", "'='", "'>='", 
		"'>'", "'<='", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", 
		"'^'", "')'", "'['", "']'", "STRINGLITERAL", "DATELITERAL", "COLORLITERAL", 
		"INTEGERLITERAL", "DOUBLELITERAL", "FILENUMBER", "IDENTIFIER", "LINE_CONTINUATION", 
		"NEWLINE", "COMMENT", "WS"
	};
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleAttributes = 4, RULE_moduleOptions = 5, RULE_moduleOption = 6, 
		RULE_moduleBody = 7, RULE_moduleBodyElement = 8, RULE_moduleBlock = 9, 
		RULE_attributeStmt = 10, RULE_block = 11, RULE_blockStmt = 12, RULE_appactivateStmt = 13, 
		RULE_beepStmt = 14, RULE_chdirStmt = 15, RULE_chdriveStmt = 16, RULE_closeStmt = 17, 
		RULE_constStmt = 18, RULE_constSubStmt = 19, RULE_dateStmt = 20, RULE_declareStmt = 21, 
		RULE_deftypeStmt = 22, RULE_deleteSettingStmt = 23, RULE_doLoopStmt = 24, 
		RULE_endStmt = 25, RULE_enumerationStmt = 26, RULE_enumerationStmt_Constant = 27, 
		RULE_eraseStmt = 28, RULE_errorStmt = 29, RULE_eventStmt = 30, RULE_exitStmt = 31, 
		RULE_filecopyStmt = 32, RULE_forEachStmt = 33, RULE_forNextStmt = 34, 
		RULE_functionStmt = 35, RULE_getStmt = 36, RULE_goSubStmt = 37, RULE_goToStmt = 38, 
		RULE_ifThenElseStmt = 39, RULE_ifBlockStmt = 40, RULE_ifConditionStmt = 41, 
		RULE_ifElseIfBlockStmt = 42, RULE_ifElseBlockStmt = 43, RULE_implementsStmt = 44, 
		RULE_inputStmt = 45, RULE_killStmt = 46, RULE_letStmt = 47, RULE_lineInputStmt = 48, 
		RULE_loadStmt = 49, RULE_lockStmt = 50, RULE_lsetStmt = 51, RULE_macroIfThenElseStmt = 52, 
		RULE_macroIfBlockStmt = 53, RULE_macroElseIfBlockStmt = 54, RULE_macroElseBlockStmt = 55, 
		RULE_midStmt = 56, RULE_mkdirStmt = 57, RULE_nameStmt = 58, RULE_onErrorStmt = 59, 
		RULE_onGoToStmt = 60, RULE_onGoSubStmt = 61, RULE_openStmt = 62, RULE_outputList = 63, 
		RULE_outputList_Expression = 64, RULE_printStmt = 65, RULE_propertyGetStmt = 66, 
		RULE_propertySetStmt = 67, RULE_propertyLetStmt = 68, RULE_putStmt = 69, 
		RULE_raiseEventStmt = 70, RULE_randomizeStmt = 71, RULE_redimStmt = 72, 
		RULE_redimSubStmt = 73, RULE_resetStmt = 74, RULE_resumeStmt = 75, RULE_returnStmt = 76, 
		RULE_rmdirStmt = 77, RULE_rsetStmt = 78, RULE_savepictureStmt = 79, RULE_saveSettingStmt = 80, 
		RULE_seekStmt = 81, RULE_selectCaseStmt = 82, RULE_sC_Case = 83, RULE_sC_Cond = 84, 
		RULE_sC_CaseElse = 85, RULE_sendkeysStmt = 86, RULE_setattrStmt = 87, 
		RULE_setStmt = 88, RULE_stopStmt = 89, RULE_subStmt = 90, RULE_timeStmt = 91, 
		RULE_typeStmt = 92, RULE_typeStmt_Element = 93, RULE_typeOfStmt = 94, 
		RULE_unloadStmt = 95, RULE_unlockStmt = 96, RULE_valueStmt = 97, RULE_variableStmt = 98, 
		RULE_variableListStmt = 99, RULE_variableSubStmt = 100, RULE_whileWendStmt = 101, 
		RULE_widthStmt = 102, RULE_withStmt = 103, RULE_writeStmt = 104, RULE_explicitCallStmt = 105, 
		RULE_eCS_ProcedureCall = 106, RULE_eCS_MemberProcedureCall = 107, RULE_implicitCallStmt_InBlock = 108, 
		RULE_iCS_B_SubCall = 109, RULE_iCS_B_FunctionCall = 110, RULE_iCS_B_MemberSubCall = 111, 
		RULE_iCS_B_MemberFunctionCall = 112, RULE_implicitCallStmt_InStmt = 113, 
		RULE_iCS_S_VariableCall = 114, RULE_iCS_S_FunctionOrArrayCall = 115, RULE_iCS_S_DictionaryCall = 116, 
		RULE_iCS_S_MembersCall = 117, RULE_memberPropertyCallStmt = 118, RULE_memberFunctionOrArrayCallStmt = 119, 
		RULE_memberSubCallStmt = 120, RULE_memberCall_Value = 121, RULE_variableCallStmt = 122, 
		RULE_dictionaryCallStmt = 123, RULE_functionOrArrayCallStmt = 124, RULE_argsCall = 125, 
		RULE_argCall = 126, RULE_argList = 127, RULE_arg = 128, RULE_argDefaultValue = 129, 
		RULE_subscripts = 130, RULE_subscript = 131, RULE_ambiguousIdentifier = 132, 
		RULE_asTypeClause = 133, RULE_baseType = 134, RULE_certainIdentifier = 135, 
		RULE_comparisonOperator = 136, RULE_complexType = 137, RULE_fieldLength = 138, 
		RULE_letterrange = 139, RULE_lineLabel = 140, RULE_literal = 141, RULE_type = 142, 
		RULE_typeHint = 143, RULE_visibility = 144, RULE_ambiguousKeyword = 145;
	public static readonly string[] ruleNames = {
		"StartRule", "Module", "ModuleHeader", "ModuleConfig", "ModuleAttributes", 
		"ModuleOptions", "ModuleOption", "ModuleBody", "ModuleBodyElement", "ModuleBlock", 
		"AttributeStmt", "Block", "BlockStmt", "AppActivateStmt", "BeepStmt", 
		"ChdirStmt", "ChdriveStmt", "CloseStmt", "ConstStmt", "ConstSubStmt", 
		"DateStmt", "DeclareStmt", "DefTypeStmt", "DeleteSettingStmt", "DoLoopStmt", 
		"EndStmt", "EnumerationStmt", "EnumerationStmt_Constant", "EraseStmt", 
		"ErrorStmt", "EventStmt", "ExitStmt", "FilecopyStmt", "ForEachStmt", "ForNextStmt", 
		"FunctionStmt", "GetStmt", "GoSubStmt", "GoToStmt", "IfThenElseStmt", 
		"IfBlockStmt", "IfConditionStmt", "IfElseIfBlockStmt", "IfElseBlockStmt", 
		"ImplementsStmt", "InputStmt", "KillStmt", "LetStmt", "LineInputStmt", 
		"LoadStmt", "LockStmt", "LSetStmt", "MacroIfThenElseStmt", "MacroIfBlockStmt", 
		"MacroElseIfBlockStmt", "MacroElseBlockStmt", "MidStmt", "MkdirStmt", 
		"NameStmt", "OnErrorStmt", "OnGoToStmt", "OnGoSubStmt", "OpenStmt", "OutputList", 
		"OutputList_Expression", "PrintStmt", "PropertyGetStmt", "PropertySetStmt", 
		"PropertyLetStmt", "PutStmt", "RaiseEventStmt", "RandomizeStmt", "RedimStmt", 
		"RedimSubStmt", "ResetStmt", "ResumeStmt", "ReturnStmt", "RmdirStmt", 
		"RSetStmt", "SavePictureStmt", "SaveSettingStmt", "SeekStmt", "SelectCaseStmt", 
		"SC_Case", "SC_Cond", "SC_CaseElse", "SendkeysStmt", "SetAttrStmt", "SetStmt", 
		"StopStmt", "SubStmt", "TimeStmt", "TypeStmt", "TypeStmt_Element", "TypeOfStmt", 
		"UnloadStmt", "UnlockStmt", "ValueStmt", "VariableStmt", "VariableListStmt", 
		"VariableSubStmt", "WhileWendStmt", "WidthStmt", "WithStmt", "WriteStmt", 
		"ExplicitCallStmt", "ECS_ProcedureCall", "ECS_MemberProcedureCall", "ImplicitCallStmt_InBlock", 
		"ICS_B_SubCall", "ICS_B_FunctionCall", "ICS_B_MemberSubCall", "ICS_B_MemberFunctionCall", 
		"ImplicitCallStmt_InStmt", "ICS_S_VariableCall", "ICS_S_FunctionOrArrayCall", 
		"ICS_S_DictionaryCall", "ICS_S_MembersCall", "MemberPropertyCallStmt", 
		"MemberFunctionOrArrayCallStmt", "MemberSubCallStmt", "MemberCall_Value", 
		"VariableCallStmt", "DictionaryCallStmt", "FunctionOrArrayCallStmt", "ArgsCall", 
		"ArgCall", "ArgList", "Arg", "ArgDefaultValue", "Subscripts", "Subscript", 
		"AmbiguousIdentifier", "AsTypeClause", "BaseType", "CertainIdentifier", 
		"ComparisonOperator", "ComplexType", "FieldLength", "LetterRange", "LineLabel", 
		"Literal", "Type", "TypeHint", "Visibility", "AmbiguousKeyword"
	};

	public override string GrammarFileName { get { return "VisualBasic6.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VBParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VBParser.Eof, 0); }
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext StartRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Module();
			State = 293; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ModuleBodyContext ModuleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleAttributesContext ModuleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ModuleHeaderContext ModuleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ModuleOptionsContext ModuleOptions() {
			return GetRuleContext<ModuleOptionsContext>(0);
		}
		public ModuleConfigContext ModuleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext Module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 295; Match(WS);
				}
				break;
			}
			State = 301;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 298; Match(NEWLINE);
					}
					} 
				}
				State = 303;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 310;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 304; ModuleHeader();
				State = 306;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 305; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 308;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 313;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 312; ModuleConfig();
				}
				break;
			}
			State = 318;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 315; Match(NEWLINE);
					}
					} 
				}
				State = 320;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 322;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 321; ModuleAttributes();
				}
				break;
			}
			State = 327;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 324; Match(NEWLINE);
					}
					} 
				}
				State = 329;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 331;
			_la = _input.La(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPTION_BASE - 122)) | (1L << (OPTION_EXPLICIT - 122)) | (1L << (OPTION_COMPARE - 122)) | (1L << (OPTION_PRIVATE_MODULE - 122)))) != 0)) {
				{
				State = 330; ModuleOptions();
				}
			}

			State = 336;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 333; Match(NEWLINE);
					}
					} 
				}
				State = 338;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 340;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 339; ModuleBody();
				}
			}

			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 342; Match(NEWLINE);
				}
				}
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 349;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 348; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBParser.DOUBLELITERAL, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode VERSION() { return GetToken(VBParser.VERSION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode CLASS() { return GetToken(VBParser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext ModuleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(VERSION);
			State = 352; Match(WS);
			State = 353; Match(DOUBLELITERAL);
			State = 354; Match(WS);
			State = 355; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<AmbiguousIdentifierContext> AmbiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode EQ(int i) {
			return GetToken(VBParser.EQ, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public IReadOnlyList<LiteralContext> Literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public ITerminalNode BEGIN() { return GetToken(VBParser.BEGIN, 0); }
		public LiteralContext Literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public IReadOnlyList<ITerminalNode> EQ() { return GetTokens(VBParser.EQ); }
		public ITerminalNode END() { return GetToken(VBParser.END, 0); }
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext ModuleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(BEGIN);
			State = 359;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 358; Match(NEWLINE);
				}
				}
				State = 361;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 374;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 363; AmbiguousIdentifier();
					State = 365;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 364; Match(WS);
						}
					}

					State = 367; Match(EQ);
					State = 369;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 368; Match(WS);
						}
					}

					State = 371; Literal();
					State = 372; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 376;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 378; Match(END);
			State = 380;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 379; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 382;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public IReadOnlyList<AttributeStmtContext> attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext ModuleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 384; AttributeStmt();
					State = 386;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 385; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 388;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionsContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ModuleOptionContext ModuleOption(int i) {
			return GetRuleContext<ModuleOptionContext>(i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ModuleOptionContext> ModuleOption() {
			return GetRuleContexts<ModuleOptionContext>();
		}
		public ModuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionsContext ModuleOptions() {
		ModuleOptionsContext _localctx = new ModuleOptionsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moduleOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 394; ModuleOption();
				State = 396;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 395; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 398;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				}
				State = 402;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & ((1L << (OPTION_BASE - 122)) | (1L << (OPTION_EXPLICIT - 122)) | (1L << (OPTION_COMPARE - 122)) | (1L << (OPTION_PRIVATE_MODULE - 122)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBParser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBParser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBParser.INTEGERLITERAL, 0); }
		public ITerminalNode OPTION_BASE() { return GetToken(VBParser.OPTION_BASE, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode DATABASE() { return GetToken(VBParser.DATABASE, 0); }
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode TEXT() { return GetToken(VBParser.TEXT, 0); }
		public ITerminalNode BINARY() { return GetToken(VBParser.BINARY, 0); }
		public ITerminalNode OPTION_COMPARE() { return GetToken(VBParser.OPTION_COMPARE, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext ModuleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_moduleOption);
		int _la;
		try {
			State = 412;
			switch (_input.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; Match(OPTION_BASE);
				State = 405; Match(WS);
				State = 406; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 407; Match(OPTION_COMPARE);
				State = 408; Match(WS);
				State = 409;
				_la = _input.La(1);
				if ( !(_la==BINARY || _la==DATABASE || _la==TEXT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 410; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 411; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext ModuleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; ModuleBodyElement();
			State = 423;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 416;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 415; Match(NEWLINE);
						}
						}
						State = 418;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 420; ModuleBodyElement();
					}
					} 
				}
				State = 425;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public PropertyLetStmtContext PropertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public PropertySetStmtContext PropertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public FunctionStmtContext FunctionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public SubStmtContext SubStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public DeclareStmtContext DeclareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public MacroIfThenElseStmtContext MacroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public TypeStmtContext TypeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBlockContext ModuleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public PropertyGetStmtContext PropertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public EventStmtContext EventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public EnumerationStmtContext EnumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext ModuleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleBodyElement);
		try {
			State = 437;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; ModuleBlock();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; DeclareStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 428; EnumerationStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 429; EventStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 430; FunctionStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 431; MacroIfThenElseStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 432; PropertyGetStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 433; PropertySetStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 434; PropertyLetStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 435; SubStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 436; TypeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext ModuleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBParser.ATTRIBUTE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public IReadOnlyList<LiteralContext> Literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext Literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext AttributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(ATTRIBUTE);
			State = 442; Match(WS);
			State = 443; ImplicitCallStmt_InStmt();
			State = 445;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 444; Match(WS);
				}
			}

			State = 447; Match(EQ);
			State = 449;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 448; Match(WS);
				}
			}

			State = 451; Literal();
			State = 462;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 453;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 452; Match(WS);
						}
					}

					State = 455; Match(T__6);
					State = 457;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 456; Match(WS);
						}
					}

					State = 459; Literal();
					}
					} 
				}
				State = 464;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> BlockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext BlockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext Block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; BlockStmt();
			State = 477;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 467;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 466; Match(NEWLINE);
						}
						}
						State = 469;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					State = 472;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 471; Match(WS);
						}
					}

					State = 474; BlockStmt();
					}
					} 
				}
				State = 479;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public WidthStmtContext WidthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public ConstStmtContext ConstStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public KillStmtContext KillStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public GoToStmtContext GoToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public OpenStmtContext OpenStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public ExitStmtContext ExitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public MacroIfThenElseStmtContext MacroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public UnlockStmtContext UnlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public LineInputStmtContext LineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public SetAttrStmtContext SetAttrStmt() {
			return GetRuleContext<SetAttrStmtContext>(0);
		}
		public CloseStmtContext CloseStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public LockStmtContext LockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public SetStmtContext SetStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public ChdriveStmtContext ChdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public OnErrorStmtContext OnErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext ImplicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public SendkeysStmtContext SendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public DateStmtContext DateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public SeekStmtContext SeekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public LsetStmtContext LSetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public RandomizeStmtContext RandomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public ForNextStmtContext ForNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public EraseStmtContext EraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public DeftypeStmtContext DefTypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public ImplementsStmtContext ImplementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public NameStmtContext NameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public RsetStmtContext RSetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public ResetStmtContext ResetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public UnloadStmtContext UnloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public MkdirStmtContext MkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public PrintStmtContext PrintStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public DoLoopStmtContext DoLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public LineLabelContext LineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public SelectCaseStmtContext SelectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public StopStmtContext StopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public ErrorStmtContext ErrorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public OnGoToStmtContext OnGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public BeepStmtContext BeepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public EndStmtContext EndStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public ExplicitCallStmtContext ExplicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public WithStmtContext WithStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public AttributeStmtContext AttributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public MidStmtContext MidStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VariableStmtContext VariableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public ForEachStmtContext ForEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public AppactivateStmtContext AppActivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public ChdirStmtContext ChdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public WriteStmtContext WriteStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public SavepictureStmtContext SavePictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public GetStmtContext GetStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public DeleteSettingStmtContext DeleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public RaiseEventStmtContext RaiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public TimeStmtContext TimeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public RedimStmtContext RedimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public InputStmtContext InputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public OnGoSubStmtContext OnGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public ResumeStmtContext ResumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public PutStmtContext PutStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public IfThenElseStmtContext IfThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public FilecopyStmtContext FileCopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public LoadStmtContext LoadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public SaveSettingStmtContext SaveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public RmdirStmtContext RmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public ReturnStmtContext ReturnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public WhileWendStmtContext WhileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public LetStmtContext LetStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public GoSubStmtContext GoSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext BlockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_blockStmt);
		try {
			State = 547;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480; AppActivateStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; AttributeStmt();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 482; BeepStmt();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 483; ChdirStmt();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 484; ChdriveStmt();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 485; CloseStmt();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 486; ConstStmt();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 487; DateStmt();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 488; DeleteSettingStmt();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 489; DefTypeStmt();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 490; DoLoopStmt();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 491; EndStmt();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 492; EraseStmt();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 493; ErrorStmt();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 494; ExitStmt();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 495; ExplicitCallStmt();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 496; filecopyStmt();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 497; forEachStmt();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 498; forNextStmt();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 499; getStmt();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 500; goSubStmt();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 501; goToStmt();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 502; ifThenElseStmt();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 503; implementsStmt();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 504; implicitCallStmt_InBlock();
				}
				break;

			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 505; inputStmt();
				}
				break;

			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 506; killStmt();
				}
				break;

			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 507; letStmt();
				}
				break;

			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 508; lineInputStmt();
				}
				break;

			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 509; lineLabel();
				}
				break;

			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 510; loadStmt();
				}
				break;

			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 511; lockStmt();
				}
				break;

			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 512; lsetStmt();
				}
				break;

			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 513; MacroIfThenElseStmt();
				}
				break;

			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 514; midStmt();
				}
				break;

			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 515; mkdirStmt();
				}
				break;

			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 516; nameStmt();
				}
				break;

			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 517; onErrorStmt();
				}
				break;

			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 518; onGoToStmt();
				}
				break;

			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 519; onGoSubStmt();
				}
				break;

			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 520; openStmt();
				}
				break;

			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 521; printStmt();
				}
				break;

			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 522; putStmt();
				}
				break;

			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 523; raiseEventStmt();
				}
				break;

			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 524; randomizeStmt();
				}
				break;

			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 525; redimStmt();
				}
				break;

			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 526; resetStmt();
				}
				break;

			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 527; resumeStmt();
				}
				break;

			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 528; returnStmt();
				}
				break;

			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 529; rmdirStmt();
				}
				break;

			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 530; rsetStmt();
				}
				break;

			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 531; savepictureStmt();
				}
				break;

			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 532; saveSettingStmt();
				}
				break;

			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 533; seekStmt();
				}
				break;

			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 534; selectCaseStmt();
				}
				break;

			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 535; sendkeysStmt();
				}
				break;

			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 536; setattrStmt();
				}
				break;

			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 537; setStmt();
				}
				break;

			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 538; stopStmt();
				}
				break;

			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 539; timeStmt();
				}
				break;

			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 540; unloadStmt();
				}
				break;

			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 541; unlockStmt();
				}
				break;

			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 542; variableStmt();
				}
				break;

			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 543; whileWendStmt();
				}
				break;

			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 544; widthStmt();
				}
				break;

			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 545; withStmt();
				}
				break;

			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 546; writeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VBParser.APPACTIVATE, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext AppActivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(APPACTIVATE);
			State = 550; Match(WS);
			State = 551; ValueStmt(0);
			State = 560;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 553;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 552; Match(WS);
					}
				}

				State = 555; Match(T__6);
				State = 557;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 556; Match(WS);
					}
				}

				State = 559; ValueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VBParser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext BeepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBParser.CHDIR, 0); }
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext ChdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(CHDIR);
			State = 565; Match(WS);
			State = 566; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBParser.CHDRIVE, 0); }
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext ChdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(CHDRIVE);
			State = 569; Match(WS);
			State = 570; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode CLOSE() { return GetToken(VBParser.CLOSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext CloseStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; Match(CLOSE);
			State = 588;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 573; Match(WS);
				State = 574; ValueStmt(0);
				State = 585;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 576;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 575; Match(WS);
							}
						}

						State = 578; Match(T__6);
						State = 580;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 579; Match(WS);
							}
						}

						State = 582; ValueStmt(0);
						}
						} 
					}
					State = 587;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ConstSubStmtContext ConstSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ConstSubStmtContext> ConstSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode CONST() { return GetToken(VBParser.CONST, 0); }
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext ConstStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 590; visibility();
				State = 591; Match(WS);
				}
			}

			State = 595; Match(CONST);
			State = 596; Match(WS);
			State = 597; constSubStmt();
			State = 608;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 599;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 598; Match(WS);
						}
					}

					State = 601; Match(T__6);
					State = 603;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 602; Match(WS);
						}
					}

					State = 605; constSubStmt();
					}
					} 
				}
				State = 610;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext AsTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext ValueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public TypeHintContext TypeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611; AmbiguousIdentifier();
			State = 613;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 612; typeHint();
				}
			}

			State = 617;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 615; Match(WS);
				State = 616; asTypeClause();
				}
				break;
			}
			State = 620;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 619; Match(WS);
				}
			}

			State = 622; Match(EQ);
			State = 624;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 623; Match(WS);
				}
			}

			State = 626; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VBParser.DATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext DateStmt() {
		DateStmtContext _localctx = new DateStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(DATE);
			State = 630;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 629; Match(WS);
				}
			}

			State = 632; Match(EQ);
			State = 634;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 633; Match(WS);
				}
			}

			State = 636; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public AsTypeClauseContext AsTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode DECLARE() { return GetToken(VBParser.DECLARE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBParser.FUNCTION, 0); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VBParser.LIB, 0); }
		public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBParser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VBParser.STRINGLITERAL, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode ALIAS() { return GetToken(VBParser.ALIAS, 0); }
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBParser.SUB, 0); }
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext DeclareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 638; visibility();
				State = 639; Match(WS);
				}
			}

			State = 643; Match(DECLARE);
			State = 644; Match(WS);
			State = 645;
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==SUB) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 646; Match(WS);
			State = 647; AmbiguousIdentifier();
			State = 648; Match(WS);
			State = 649; Match(LIB);
			State = 650; Match(WS);
			State = 651; Match(STRINGLITERAL);
			State = 656;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 652; Match(WS);
				State = 653; Match(ALIAS);
				State = 654; Match(WS);
				State = 655; Match(STRINGLITERAL);
				}
				break;
			}
			State = 662;
			switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				State = 659;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 658; Match(WS);
					}
				}

				State = 661; ArgList();
				}
				break;
			}
			State = 666;
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 664; Match(WS);
				State = 665; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode DEFCUR() { return GetToken(VBParser.DEFCUR, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBParser.DEFSTR, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBParser.DEFDATE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode DEFOBJ() { return GetToken(VBParser.DEFOBJ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode DEFDBL() { return GetToken(VBParser.DEFDBL, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBParser.DEFINT, 0); }
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFVAR() { return GetToken(VBParser.DEFVAR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBParser.DEFSNG, 0); }
		public IReadOnlyList<LetterrangeContext> letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public ITerminalNode DEFBOOL() { return GetToken(VBParser.DEFBOOL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBParser.DEFDEC, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBParser.DEFBYTE, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBParser.DEFLNG, 0); }
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext DefTypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 669; Match(WS);
			State = 670; letterrange();
			State = 681;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 672;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 671; Match(WS);
						}
					}

					State = 674; Match(T__6);
					State = 676;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 675; Match(WS);
						}
					}

					State = 678; letterrange();
					}
					} 
				}
				State = 683;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,59,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DELETESETTING() { return GetToken(VBParser.DELETESETTING, 0); }
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext DeleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684; Match(DELETESETTING);
			State = 685; Match(WS);
			State = 686; ValueStmt(0);
			State = 688;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 687; Match(WS);
				}
			}

			State = 690; Match(T__6);
			State = 692;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 691; Match(WS);
				}
			}

			State = 694; ValueStmt(0);
			State = 703;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 696;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 695; Match(WS);
					}
				}

				State = 698; Match(T__6);
				State = 700;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 699; Match(WS);
					}
				}

				State = 702; ValueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VBParser.WHILE, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode DO() { return GetToken(VBParser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VBParser.LOOP, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBParser.UNTIL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext DoLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_doLoopStmt);
		int _la;
		try {
			State = 758;
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705; Match(DO);
				State = 707;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 706; Match(NEWLINE);
					}
					}
					State = 709;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 717;
				switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					State = 711; Block();
					State = 713;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 712; Match(NEWLINE);
						}
						}
						State = 715;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 719; Match(LOOP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720; Match(DO);
				State = 721; Match(WS);
				State = 722;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 723; Match(WS);
				State = 724; ValueStmt(0);
				State = 726;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 725; Match(NEWLINE);
					}
					}
					State = 728;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				State = 736;
				switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					State = 730; Block();
					State = 732;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 731; Match(NEWLINE);
						}
						}
						State = 734;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 738; Match(LOOP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 740; Match(DO);
				State = 742;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 741; Match(NEWLINE);
					}
					}
					State = 744;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				{
				State = 746; Block();
				State = 748;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 747; Match(NEWLINE);
					}
					}
					State = 750;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				State = 752; Match(LOOP);
				State = 753; Match(WS);
				State = 754;
				_la = _input.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 755; Match(WS);
				State = 756; ValueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VBParser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext EndStmt() {
		EndStmtContext _localctx = new EndStmtContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public ITerminalNode ENUM() { return GetToken(VBParser.ENUM, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public ITerminalNode END_ENUM() { return GetToken(VBParser.END_ENUM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext EnumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 762; visibility();
				State = 763; Match(WS);
				}
			}

			State = 767; Match(ENUM);
			State = 768; Match(WS);
			State = 769; AmbiguousIdentifier();
			State = 771;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 770; Match(NEWLINE);
				}
				}
				State = 773;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 778;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 775; enumerationStmt_Constant();
				}
				}
				State = 780;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 781; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ValueStmtContext ValueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; AmbiguousIdentifier();
			State = 792;
			_la = _input.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 785;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 784; Match(WS);
					}
				}

				State = 787; Match(EQ);
				State = 789;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 788; Match(WS);
					}
				}

				State = 791; ValueStmt(0);
				}
			}

			State = 795;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 794; Match(NEWLINE);
				}
				}
				State = 797;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VBParser.ERASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext EraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_eraseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; Match(ERASE);
			State = 800; Match(WS);
			State = 801; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode ERROR() { return GetToken(VBParser.ERROR, 0); }
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext ErrorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803; Match(ERROR);
			State = 804; Match(WS);
			State = 805; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode EVENT() { return GetToken(VBParser.EVENT, 0); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext EventStmt() {
		EventStmtContext _localctx = new EventStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 807; visibility();
				State = 808; Match(WS);
				}
			}

			State = 812; Match(EVENT);
			State = 813; Match(WS);
			State = 814; AmbiguousIdentifier();
			State = 816;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 815; Match(WS);
				}
			}

			State = 818; ArgList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VBParser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VBParser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_DO() { return GetToken(VBParser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VBParser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VBParser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext ExitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			_la = _input.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (EXIT_DO - 69)) | (1L << (EXIT_FOR - 69)) | (1L << (EXIT_FUNCTION - 69)) | (1L << (EXIT_PROPERTY - 69)) | (1L << (EXIT_SUB - 69)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode FILECOPY() { return GetToken(VBParser.FILECOPY, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(FILECOPY);
			State = 823; Match(WS);
			State = 824; ValueStmt(0);
			State = 826;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 825; Match(WS);
				}
			}

			State = 828; Match(T__6);
			State = 830;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 829; Match(WS);
				}
			}

			State = 832; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBParser.NEXT, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VBParser.EACH, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VBParser.IN, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public IReadOnlyList<AmbiguousIdentifierContext> AmbiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; Match(FOR);
			State = 835; Match(WS);
			State = 836; Match(EACH);
			State = 837; Match(WS);
			State = 838; AmbiguousIdentifier();
			State = 840;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 839; typeHint();
				}
			}

			State = 842; Match(WS);
			State = 843; Match(IN);
			State = 844; Match(WS);
			State = 845; ValueStmt(0);
			State = 847;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 846; Match(NEWLINE);
				}
				}
				State = 849;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 857;
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 851; Block();
				State = 853;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 852; Match(NEWLINE);
					}
					}
					State = 855;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 859; Match(NEXT);
			State = 862;
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 860; Match(WS);
				State = 861; AmbiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBParser.NEXT, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode STEP() { return GetToken(VBParser.STEP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<AmbiguousIdentifierContext> AmbiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public ITerminalNode FOR() { return GetToken(VBParser.FOR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VBParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; Match(FOR);
			State = 865; Match(WS);
			State = 866; AmbiguousIdentifier();
			State = 868;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 867; typeHint();
				}
			}

			State = 872;
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 870; Match(WS);
				State = 871; asTypeClause();
				}
				break;
			}
			State = 875;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 874; Match(WS);
				}
			}

			State = 877; Match(EQ);
			State = 879;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 878; Match(WS);
				}
			}

			State = 881; ValueStmt(0);
			State = 882; Match(WS);
			State = 883; Match(TO);
			State = 884; Match(WS);
			State = 885; ValueStmt(0);
			State = 890;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 886; Match(WS);
				State = 887; Match(STEP);
				State = 888; Match(WS);
				State = 889; ValueStmt(0);
				}
			}

			State = 893;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 892; Match(NEWLINE);
				}
				}
				State = 895;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 903;
			switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				State = 897; Block();
				State = 899;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 898; Match(NEWLINE);
					}
					}
					State = 901;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 905; Match(NEXT);
			State = 908;
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 906; Match(WS);
				State = 907; AmbiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public AsTypeClauseContext AsTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode FUNCTION() { return GetToken(VBParser.FUNCTION, 0); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public ITerminalNode END_FUNCTION() { return GetToken(VBParser.END_FUNCTION, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext Block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext FunctionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 910; visibility();
				State = 911; Match(WS);
				}
			}

			State = 917;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 915; Match(STATIC);
				State = 916; Match(WS);
				}
			}

			State = 919; Match(FUNCTION);
			State = 920; Match(WS);
			State = 921; AmbiguousIdentifier();
			State = 926;
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 923;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 922; Match(WS);
					}
				}

				State = 925; ArgList();
				}
				break;
			}
			State = 930;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 928; Match(WS);
				State = 929; asTypeClause();
				}
			}

			State = 933;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 932; Match(NEWLINE);
				}
				}
				State = 935;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 943;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 937; Block();
				State = 939;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 938; Match(NEWLINE);
					}
					}
					State = 941;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 945; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VBParser.GET, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947; Match(GET);
			State = 948; Match(WS);
			State = 949; ValueStmt(0);
			State = 951;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 950; Match(WS);
				}
			}

			State = 953; Match(T__6);
			State = 955;
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 954; Match(WS);
				}
				break;
			}
			State = 958;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				State = 957; ValueStmt(0);
				}
			}

			State = 961;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 960; Match(WS);
				}
			}

			State = 963; Match(T__6);
			State = 965;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 964; Match(WS);
				}
			}

			State = 967; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBParser.GOSUB, 0); }
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969; Match(GOSUB);
			State = 970; Match(WS);
			State = 971; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBParser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; Match(GOTO);
			State = 974; Match(WS);
			State = 975; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VBParser.END_IF, 0); }
		public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode THEN() { return GetToken(VBParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBParser.IF, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(VBParser.ELSE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public IReadOnlyList<BlockStmtContext> blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1002;
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 977; Match(IF);
				State = 978; Match(WS);
				State = 979; ifConditionStmt();
				State = 980; Match(WS);
				State = 981; Match(THEN);
				State = 982; Match(WS);
				State = 983; BlockStmt();
				State = 988;
				switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					State = 984; Match(WS);
					State = 985; Match(ELSE);
					State = 986; Match(WS);
					State = 987; BlockStmt();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 990; ifBlockStmt();
				State = 994;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 991; ifElseIfBlockStmt();
					}
					}
					State = 996;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 998;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 997; ifElseBlockStmt();
					}
				}

				State = 1000; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBParser.THEN, 0); }
		public ITerminalNode IF() { return GetToken(VBParser.IF, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004; Match(IF);
			State = 1005; Match(WS);
			State = 1006; ifConditionStmt();
			State = 1007; Match(WS);
			State = 1008; Match(THEN);
			State = 1010;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1009; Match(NEWLINE);
				}
				}
				State = 1012;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1020;
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1014; Block();
				State = 1016;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1015; Match(NEWLINE);
					}
					}
					State = 1018;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode ELSEIF() { return GetToken(VBParser.ELSEIF, 0); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024; Match(ELSEIF);
			State = 1025; Match(WS);
			State = 1026; ifConditionStmt();
			State = 1027; Match(WS);
			State = 1028; Match(THEN);
			State = 1030;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1029; Match(NEWLINE);
				}
				}
				State = 1032;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1040;
			switch ( Interpreter.AdaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				State = 1034; Block();
				State = 1036;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1035; Match(NEWLINE);
					}
					}
					State = 1038;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(VBParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; Match(ELSE);
			State = 1044;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1043; Match(NEWLINE);
				}
				}
				State = 1046;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1054;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1048; Block();
				State = 1050;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1049; Match(NEWLINE);
					}
					}
					State = 1052;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBParser.IMPLEMENTS, 0); }
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056; Match(IMPLEMENTS);
			State = 1057; Match(WS);
			State = 1058; AmbiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode INPUT() { return GetToken(VBParser.INPUT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060; Match(INPUT);
			State = 1061; Match(WS);
			State = 1062; ValueStmt(0);
			State = 1071;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1064;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1063; Match(WS);
						}
					}

					State = 1066; Match(T__6);
					State = 1068;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1067; Match(WS);
						}
					}

					State = 1070; ValueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1073;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,127,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode KILL() { return GetToken(VBParser.KILL, 0); }
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075; Match(KILL);
			State = 1076; Match(WS);
			State = 1077; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode PLUS_EQ() { return GetToken(VBParser.PLUS_EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode LET() { return GetToken(VBParser.LET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode MINUS_EQ() { return GetToken(VBParser.MINUS_EQ, 0); }
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			switch ( Interpreter.AdaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				State = 1079; Match(LET);
				State = 1080; Match(WS);
				}
				break;
			}
			State = 1083; ImplicitCallStmt_InStmt();
			State = 1085;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1084; Match(WS);
				}
			}

			State = 1087;
			_la = _input.La(1);
			if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (EQ - 187)) | (1L << (MINUS_EQ - 187)) | (1L << (PLUS_EQ - 187)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1089;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1088; Match(WS);
				}
			}

			State = 1091; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VBParser.LINE_INPUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093; Match(LINE_INPUT);
			State = 1094; Match(WS);
			State = 1095; ValueStmt(0);
			State = 1097;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1096; Match(WS);
				}
			}

			State = 1099; Match(T__6);
			State = 1101;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1100; Match(WS);
				}
			}

			State = 1103; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode LOAD() { return GetToken(VBParser.LOAD, 0); }
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105; Match(LOAD);
			State = 1106; Match(WS);
			State = 1107; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode LOCK() { return GetToken(VBParser.LOCK, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Match(LOCK);
			State = 1110; Match(WS);
			State = 1111; ValueStmt(0);
			State = 1126;
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1113;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1112; Match(WS);
					}
				}

				State = 1115; Match(T__6);
				State = 1117;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1116; Match(WS);
					}
				}

				State = 1119; ValueStmt(0);
				State = 1124;
				switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					State = 1120; Match(WS);
					State = 1121; Match(TO);
					State = 1122; Match(WS);
					State = 1123; ValueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode LSET() { return GetToken(VBParser.LSET, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128; Match(LSET);
			State = 1129; Match(WS);
			State = 1130; ImplicitCallStmt_InStmt();
			State = 1132;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1131; Match(WS);
				}
			}

			State = 1134; Match(EQ);
			State = 1136;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1135; Match(WS);
				}
			}

			State = 1138; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VBParser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext MacroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140; macroIfBlockStmt();
			State = 1144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1141; macroElseIfBlockStmt();
				}
				}
				State = 1146;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1148;
			_la = _input.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1147; macroElseBlockStmt();
				}
			}

			State = 1150; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode MACRO_IF() { return GetToken(VBParser.MACRO_IF, 0); }
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152; Match(MACRO_IF);
			State = 1153; Match(WS);
			State = 1154; ifConditionStmt();
			State = 1155; Match(WS);
			State = 1156; Match(THEN);
			State = 1158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1157; Match(NEWLINE);
				}
				}
				State = 1160;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1168;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1162; ModuleBody();
				State = 1164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1163; Match(NEWLINE);
					}
					}
					State = 1166;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode THEN() { return GetToken(VBParser.THEN, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VBParser.MACRO_ELSEIF, 0); }
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170; Match(MACRO_ELSEIF);
			State = 1171; Match(WS);
			State = 1172; ifConditionStmt();
			State = 1173; Match(WS);
			State = 1174; Match(THEN);
			State = 1176;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1175; Match(NEWLINE);
				}
				}
				State = 1178;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1186;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1180; ModuleBody();
				State = 1182;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1181; Match(NEWLINE);
					}
					}
					State = 1184;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode MACRO_ELSE() { return GetToken(VBParser.MACRO_ELSE, 0); }
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188; Match(MACRO_ELSE);
			State = 1190;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1189; Match(NEWLINE);
				}
				}
				State = 1192;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1200;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1194; ModuleBody();
				State = 1196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1195; Match(NEWLINE);
					}
					}
					State = 1198;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VBParser.MID, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202; Match(MID);
			State = 1204;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1203; Match(WS);
				}
			}

			State = 1206; Match(LPAREN);
			State = 1208;
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				State = 1207; Match(WS);
				}
				break;
			}
			State = 1210; argsCall();
			State = 1212;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1211; Match(WS);
				}
			}

			State = 1214; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBParser.MKDIR, 0); }
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216; Match(MKDIR);
			State = 1217; Match(WS);
			State = 1218; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBParser.AS, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode NAME() { return GetToken(VBParser.NAME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220; Match(NAME);
			State = 1221; Match(WS);
			State = 1222; ValueStmt(0);
			State = 1223; Match(WS);
			State = 1224; Match(AS);
			State = 1225; Match(WS);
			State = 1226; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBParser.GOTO, 0); }
		public ITerminalNode NEXT() { return GetToken(VBParser.NEXT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode ON_ERROR() { return GetToken(VBParser.ON_ERROR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode RESUME() { return GetToken(VBParser.RESUME, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_onErrorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; Match(ON_ERROR);
			State = 1229; Match(WS);
			State = 1236;
			switch (_input.La(1)) {
			case GOTO:
				{
				State = 1230; Match(GOTO);
				State = 1231; Match(WS);
				State = 1232; ValueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1233; Match(RESUME);
				State = 1234; Match(WS);
				State = 1235; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VBParser.GOTO, 0); }
		public ITerminalNode ON() { return GetToken(VBParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238; Match(ON);
			State = 1239; Match(WS);
			State = 1240; ValueStmt(0);
			State = 1241; Match(WS);
			State = 1242; Match(GOTO);
			State = 1243; Match(WS);
			State = 1244; ValueStmt(0);
			State = 1255;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,156,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1246;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1245; Match(WS);
						}
					}

					State = 1248; Match(T__6);
					State = 1250;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1249; Match(WS);
						}
					}

					State = 1252; ValueStmt(0);
					}
					} 
				}
				State = 1257;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,156,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VBParser.ON, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode GOSUB() { return GetToken(VBParser.GOSUB, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258; Match(ON);
			State = 1259; Match(WS);
			State = 1260; ValueStmt(0);
			State = 1261; Match(WS);
			State = 1262; Match(GOSUB);
			State = 1263; Match(WS);
			State = 1264; ValueStmt(0);
			State = 1275;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,159,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1266;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1265; Match(WS);
						}
					}

					State = 1268; Match(T__6);
					State = 1270;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1269; Match(WS);
						}
					}

					State = 1272; ValueStmt(0);
					}
					} 
				}
				State = 1277;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBParser.AS, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VBParser.READ_WRITE, 0); }
		public ITerminalNode LEN() { return GetToken(VBParser.LEN, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBParser.LOCK_READ_WRITE, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode APPEND() { return GetToken(VBParser.APPEND, 0); }
		public ITerminalNode INPUT() { return GetToken(VBParser.INPUT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBParser.ACCESS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LOCK_WRITE() { return GetToken(VBParser.LOCK_WRITE, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBParser.RANDOM, 0); }
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public ITerminalNode FOR() { return GetToken(VBParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(VBParser.READ, 0); }
		public ITerminalNode OPEN() { return GetToken(VBParser.OPEN, 0); }
		public ITerminalNode SHARED() { return GetToken(VBParser.SHARED, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBParser.OUTPUT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBParser.WRITE, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VBParser.LOCK_READ, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode BINARY() { return GetToken(VBParser.BINARY, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278; Match(OPEN);
			State = 1279; Match(WS);
			State = 1280; ValueStmt(0);
			State = 1281; Match(WS);
			State = 1282; Match(FOR);
			State = 1283; Match(WS);
			State = 1284;
			_la = _input.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INPUT - 87)) | (1L << (OUTPUT - 87)) | (1L << (RANDOM - 87)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1289;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1285; Match(WS);
				State = 1286; Match(ACCESS);
				State = 1287; Match(WS);
				State = 1288;
				_la = _input.La(1);
				if ( !(((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (READ - 140)) | (1L << (READ_WRITE - 140)) | (1L << (WRITE - 140)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1293;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1291; Match(WS);
				State = 1292;
				_la = _input.La(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCK_READ - 100)) | (1L << (LOCK_WRITE - 100)) | (1L << (LOCK_READ_WRITE - 100)) | (1L << (SHARED - 100)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 1295; Match(WS);
			State = 1296; Match(AS);
			State = 1297; Match(WS);
			State = 1298; ValueStmt(0);
			State = 1309;
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				State = 1299; Match(WS);
				State = 1300; Match(LEN);
				State = 1302;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1301; Match(WS);
					}
				}

				State = 1304; Match(EQ);
				State = 1306;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1305; Match(WS);
					}
				}

				State = 1308; ValueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1344;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1311; outputList_Expression();
				State = 1324;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,168,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1313;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1312; Match(WS);
							}
						}

						State = 1315;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1317;
						switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
						case 1:
							{
							State = 1316; Match(WS);
							}
							break;
						}
						State = 1320;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
							{
							State = 1319; outputList_Expression();
							}
						}

						}
						} 
					}
					State = 1326;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,168,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1328;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
					{
					State = 1327; outputList_Expression();
					}
				}

				State = 1340;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1331;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1330; Match(WS);
							}
						}

						State = 1333;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__2) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 1335;
						switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
						case 1:
							{
							State = 1334; Match(WS);
							}
							break;
						}
						State = 1338;
						_la = _input.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
							{
							State = 1337; outputList_Expression();
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1342;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,173,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VBParser.SPC, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public ITerminalNode TAB() { return GetToken(VBParser.TAB, 0); }
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_outputList_Expression);
		int _la;
		try {
			State = 1363;
			switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1346; ValueStmt(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1347;
				_la = _input.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 1361;
				switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					State = 1349;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1348; Match(WS);
						}
					}

					State = 1351; Match(LPAREN);
					State = 1353;
					switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
					case 1:
						{
						State = 1352; Match(WS);
						}
						break;
					}
					State = 1355; argsCall();
					State = 1357;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1356; Match(WS);
						}
					}

					State = 1359; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VBParser.PRINT, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365; Match(PRINT);
			State = 1366; Match(WS);
			State = 1367; ValueStmt(0);
			State = 1369;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1368; Match(WS);
				}
			}

			State = 1371; Match(T__6);
			State = 1376;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				State = 1373;
				switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					State = 1372; Match(WS);
					}
					break;
				}
				State = 1375; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public AsTypeClauseContext AsTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext Block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode PROPERTY_GET() { return GetToken(VBParser.PROPERTY_GET, 0); }
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext PropertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1378; visibility();
				State = 1379; Match(WS);
				}
			}

			State = 1385;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1383; Match(STATIC);
				State = 1384; Match(WS);
				}
			}

			State = 1387; Match(PROPERTY_GET);
			State = 1388; Match(WS);
			State = 1389; AmbiguousIdentifier();
			State = 1394;
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1391;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1390; Match(WS);
					}
				}

				State = 1393; ArgList();
				}
				break;
			}
			State = 1398;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1396; Match(WS);
				State = 1397; asTypeClause();
				}
			}

			State = 1401;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1400; Match(NEWLINE);
				}
				}
				State = 1403;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1411;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1405; Block();
				State = 1407;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1406; Match(NEWLINE);
					}
					}
					State = 1409;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1413; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBParser.END_PROPERTY, 0); }
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext Block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode PROPERTY_SET() { return GetToken(VBParser.PROPERTY_SET, 0); }
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext PropertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1415; visibility();
				State = 1416; Match(WS);
				}
			}

			State = 1422;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1420; Match(STATIC);
				State = 1421; Match(WS);
				}
			}

			State = 1424; Match(PROPERTY_SET);
			State = 1425; Match(WS);
			State = 1426; AmbiguousIdentifier();
			State = 1431;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1428;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1427; Match(WS);
					}
				}

				State = 1430; ArgList();
				}
			}

			State = 1434;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1433; Match(NEWLINE);
				}
				}
				State = 1436;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1444;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1438; Block();
				State = 1440;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1439; Match(NEWLINE);
					}
					}
					State = 1442;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1446; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VBParser.END_PROPERTY, 0); }
		public ITerminalNode PROPERTY_LET() { return GetToken(VBParser.PROPERTY_LET, 0); }
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext Block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext PropertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1448; visibility();
				State = 1449; Match(WS);
				}
			}

			State = 1455;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1453; Match(STATIC);
				State = 1454; Match(WS);
				}
			}

			State = 1457; Match(PROPERTY_LET);
			State = 1458; Match(WS);
			State = 1459; AmbiguousIdentifier();
			State = 1464;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1461;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1460; Match(WS);
					}
				}

				State = 1463; ArgList();
				}
			}

			State = 1467;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1466; Match(NEWLINE);
				}
				}
				State = 1469;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1477;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1471; Block();
				State = 1473;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1472; Match(NEWLINE);
					}
					}
					State = 1475;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1479; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VBParser.PUT, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481; Match(PUT);
			State = 1482; Match(WS);
			State = 1483; ValueStmt(0);
			State = 1485;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1484; Match(WS);
				}
			}

			State = 1487; Match(T__6);
			State = 1489;
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1488; Match(WS);
				}
				break;
			}
			State = 1492;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
				{
				State = 1491; ValueStmt(0);
				}
			}

			State = 1495;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1494; Match(WS);
				}
			}

			State = 1497; Match(T__6);
			State = 1499;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1498; Match(WS);
				}
			}

			State = 1501; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBParser.RAISEEVENT, 0); }
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503; Match(RAISEEVENT);
			State = 1504; Match(WS);
			State = 1505; AmbiguousIdentifier();
			State = 1520;
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1507;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1506; Match(WS);
					}
				}

				State = 1509; Match(LPAREN);
				State = 1511;
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					State = 1510; Match(WS);
					}
					break;
				}
				State = 1517;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
					{
					State = 1513; argsCall();
					State = 1515;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1514; Match(WS);
						}
					}

					}
				}

				State = 1519; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBParser.RANDOMIZE, 0); }
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522; Match(RANDOMIZE);
			State = 1525;
			switch ( Interpreter.AdaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				State = 1523; Match(WS);
				State = 1524; ValueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public IReadOnlyList<RedimSubStmtContext> redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode PRESERVE() { return GetToken(VBParser.PRESERVE, 0); }
		public ITerminalNode REDIM() { return GetToken(VBParser.REDIM, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527; Match(REDIM);
			State = 1528; Match(WS);
			State = 1531;
			switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				State = 1529; Match(PRESERVE);
				State = 1530; Match(WS);
				}
				break;
			}
			State = 1533; redimSubStmt();
			State = 1544;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,219,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1535;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1534; Match(WS);
						}
					}

					State = 1537; Match(T__6);
					State = 1539;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1538; Match(WS);
						}
					}

					State = 1541; redimSubStmt();
					}
					} 
				}
				State = 1546;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,219,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547; ImplicitCallStmt_InStmt();
			State = 1549;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1548; Match(WS);
				}
			}

			State = 1551; Match(LPAREN);
			State = 1553;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1552; Match(WS);
				}
			}

			State = 1555; Subscripts();
			State = 1557;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1556; Match(WS);
				}
			}

			State = 1559; Match(RPAREN);
			State = 1562;
			switch ( Interpreter.AdaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				State = 1560; Match(WS);
				State = 1561; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBParser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(VBParser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode RESUME() { return GetToken(VBParser.RESUME, 0); }
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1566; Match(RESUME);
			State = 1572;
			switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				State = 1567; Match(WS);
				State = 1570;
				switch ( Interpreter.AdaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					State = 1568; Match(NEXT);
					}
					break;

				case 2:
					{
					State = 1569; AmbiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VBParser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBParser.RMDIR, 0); }
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576; Match(RMDIR);
			State = 1577; Match(WS);
			State = 1578; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode RSET() { return GetToken(VBParser.RSET, 0); }
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1580; Match(RSET);
			State = 1581; Match(WS);
			State = 1582; ImplicitCallStmt_InStmt();
			State = 1584;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1583; Match(WS);
				}
			}

			State = 1586; Match(EQ);
			State = 1588;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1587; Match(WS);
				}
			}

			State = 1590; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SAVEPICTURE() { return GetToken(VBParser.SAVEPICTURE, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592; Match(SAVEPICTURE);
			State = 1593; Match(WS);
			State = 1594; ValueStmt(0);
			State = 1596;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1595; Match(WS);
				}
			}

			State = 1598; Match(T__6);
			State = 1600;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1599; Match(WS);
				}
			}

			State = 1602; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode SAVESETTING() { return GetToken(VBParser.SAVESETTING, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604; Match(SAVESETTING);
			State = 1605; Match(WS);
			State = 1606; ValueStmt(0);
			State = 1608;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1607; Match(WS);
				}
			}

			State = 1610; Match(T__6);
			State = 1612;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1611; Match(WS);
				}
			}

			State = 1614; ValueStmt(0);
			State = 1616;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1615; Match(WS);
				}
			}

			State = 1618; Match(T__6);
			State = 1620;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1619; Match(WS);
				}
			}

			State = 1622; ValueStmt(0);
			State = 1624;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1623; Match(WS);
				}
			}

			State = 1626; Match(T__6);
			State = 1628;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1627; Match(WS);
				}
			}

			State = 1630; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode SEEK() { return GetToken(VBParser.SEEK, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(SEEK);
			State = 1633; Match(WS);
			State = 1634; ValueStmt(0);
			State = 1636;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1635; Match(WS);
				}
			}

			State = 1638; Match(T__6);
			State = 1640;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1639; Match(WS);
				}
			}

			State = 1642; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public SC_CaseElseContext sC_CaseElse() {
			return GetRuleContext<SC_CaseElseContext>(0);
		}
		public IReadOnlyList<SC_CaseContext> sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public ITerminalNode CASE() { return GetToken(VBParser.CASE, 0); }
		public ITerminalNode END_SELECT() { return GetToken(VBParser.END_SELECT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode SELECT() { return GetToken(VBParser.SELECT, 0); }
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_selectCaseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644; Match(SELECT);
			State = 1645; Match(WS);
			State = 1646; Match(CASE);
			State = 1647; Match(WS);
			State = 1648; ValueStmt(0);
			State = 1650;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1649; Match(NEWLINE);
				}
				}
				State = 1652;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1657;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,239,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1654; sC_Case();
					}
					} 
				}
				State = 1659;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,239,_ctx);
			}
			State = 1661;
			_la = _input.La(1);
			if (_la==CASE) {
				{
				State = 1660; sC_CaseElse();
				}
			}

			State = 1664;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1663; Match(WS);
				}
			}

			State = 1666; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode CASE() { return GetToken(VBParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668; Match(CASE);
			State = 1669; Match(WS);
			State = 1670; sC_Cond();
			State = 1672;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				State = 1671; Match(WS);
				}
				break;
			}
			State = 1688;
			switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				State = 1675;
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 1674; Match(T__5);
					}
				}

				State = 1680;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1677; Match(NEWLINE);
					}
					}
					State = 1682;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1684;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1683; Match(NEWLINE);
					}
					}
					State = 1686;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1696;
			switch ( Interpreter.AdaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				State = 1690; Block();
				State = 1692;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1691; Match(NEWLINE);
					}
					}
					State = 1694;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondToContext : SC_CondContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBParser.INTEGERLITERAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondToContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondValueContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public CaseCondValueContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_CondContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBParser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public CaseCondIsContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1740;
			switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
			case 1:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1698; Match(IS);
				State = 1700;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1699; Match(WS);
					}
				}

				State = 1702; comparisonOperator();
				State = 1704;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1703; Match(WS);
					}
				}

				State = 1706; ValueStmt(0);
				}
				break;

			case 2:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1708; ValueStmt(0);
				State = 1719;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,253,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1710;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1709; Match(WS);
							}
						}

						State = 1712; Match(T__6);
						State = 1714;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1713; Match(WS);
							}
						}

						State = 1716; ValueStmt(0);
						}
						} 
					}
					State = 1721;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,253,_ctx);
				}
				}
				break;

			case 3:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1722; Match(INTEGERLITERAL);
				State = 1723; Match(WS);
				State = 1724; Match(TO);
				State = 1725; Match(WS);
				State = 1726; ValueStmt(0);
				State = 1737;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1728;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1727; Match(WS);
							}
						}

						State = 1730; Match(T__6);
						State = 1732;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1731; Match(WS);
							}
						}

						State = 1734; ValueStmt(0);
						}
						} 
					}
					State = 1739;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,256,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseElseContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode ELSE() { return GetToken(VBParser.ELSE, 0); }
		public ITerminalNode CASE() { return GetToken(VBParser.CASE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SC_CaseElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_CaseElse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSC_CaseElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSC_CaseElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_CaseElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseElseContext sC_CaseElse() {
		SC_CaseElseContext _localctx = new SC_CaseElseContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_sC_CaseElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1742; Match(CASE);
			State = 1743; Match(WS);
			State = 1744; Match(ELSE);
			State = 1746;
			switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				State = 1745; Match(WS);
				}
				break;
			}
			State = 1762;
			switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				State = 1749;
				_la = _input.La(1);
				if (_la==T__5) {
					{
					State = 1748; Match(T__5);
					}
				}

				State = 1754;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1751; Match(NEWLINE);
					}
					}
					State = 1756;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 1758;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1757; Match(NEWLINE);
					}
					}
					State = 1760;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1770;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1764; Block();
				State = 1766;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1765; Match(NEWLINE);
					}
					}
					State = 1768;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode SENDKEYS() { return GetToken(VBParser.SENDKEYS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772; Match(SENDKEYS);
			State = 1773; Match(WS);
			State = 1774; ValueStmt(0);
			State = 1783;
			switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				State = 1776;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1775; Match(WS);
					}
				}

				State = 1778; Match(T__6);
				State = 1780;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1779; Match(WS);
					}
				}

				State = 1782; ValueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAttrStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode SETATTR() { return GetToken(VBParser.SETATTR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SetAttrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAttrStmtContext setattrStmt() {
		SetAttrStmtContext _localctx = new SetAttrStmtContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1785; Match(SETATTR);
			State = 1786; Match(WS);
			State = 1787; ValueStmt(0);
			State = 1789;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1788; Match(WS);
				}
			}

			State = 1791; Match(T__6);
			State = 1793;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1792; Match(WS);
				}
			}

			State = 1795; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VBParser.SET, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797; Match(SET);
			State = 1798; Match(WS);
			State = 1799; ImplicitCallStmt_InStmt();
			State = 1801;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1800; Match(WS);
				}
			}

			State = 1803; Match(EQ);
			State = 1805;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1804; Match(WS);
				}
			}

			State = 1807; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VBParser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode END_SUB() { return GetToken(VBParser.END_SUB, 0); }
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ArgListContext ArgList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BlockContext Block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(VBParser.SUB, 0); }
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext SubStmt() {
		SubStmtContext _localctx = new SubStmtContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1811; visibility();
				State = 1812; Match(WS);
				}
			}

			State = 1818;
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 1816; Match(STATIC);
				State = 1817; Match(WS);
				}
			}

			State = 1820; Match(SUB);
			State = 1821; Match(WS);
			State = 1822; AmbiguousIdentifier();
			State = 1827;
			_la = _input.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1824;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1823; Match(WS);
					}
				}

				State = 1826; ArgList();
				}
			}

			State = 1830;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1829; Match(NEWLINE);
				}
				}
				State = 1832;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1840;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1834; Block();
				State = 1836;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1835; Match(NEWLINE);
					}
					}
					State = 1838;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1842; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode TIME() { return GetToken(VBParser.TIME, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844; Match(TIME);
			State = 1846;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1845; Match(WS);
				}
			}

			State = 1848; Match(EQ);
			State = 1850;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1849; Match(WS);
				}
			}

			State = 1852; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public IReadOnlyList<TypeStmt_ElementContext> TypeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public TypeStmt_ElementContext TypeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode END_TYPE() { return GetToken(VBParser.END_TYPE, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(VBParser.TYPE, 0); }
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext TypeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			_la = _input.La(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) {
				{
				State = 1854; visibility();
				State = 1855; Match(WS);
				}
			}

			State = 1859; Match(TYPE);
			State = 1860; Match(WS);
			State = 1861; AmbiguousIdentifier();
			State = 1863;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1862; Match(NEWLINE);
				}
				}
				State = 1865;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 1870;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1867; typeStmt_Element();
				}
				}
				State = 1872;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1873; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875; AmbiguousIdentifier();
			State = 1890;
			switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				State = 1877;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1876; Match(WS);
					}
				}

				State = 1879; Match(LPAREN);
				State = 1884;
				switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					State = 1881;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1880; Match(WS);
						}
					}

					State = 1883; Subscripts();
					}
					break;
				}
				State = 1887;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1886; Match(WS);
					}
				}

				State = 1889; Match(RPAREN);
				}
				break;
			}
			State = 1894;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 1892; Match(WS);
				State = 1893; asTypeClause();
				}
			}

			State = 1897;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1896; Match(NEWLINE);
				}
				}
				State = 1899;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode TYPEOF() { return GetToken(VBParser.TYPEOF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBParser.IS, 0); }
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901; Match(TYPEOF);
			State = 1902; Match(WS);
			State = 1903; ValueStmt(0);
			State = 1908;
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				State = 1904; Match(WS);
				State = 1905; Match(IS);
				State = 1906; Match(WS);
				State = 1907; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBParser.UNLOAD, 0); }
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1910; Match(UNLOAD);
			State = 1911; Match(WS);
			State = 1912; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode UNLOCK() { return GetToken(VBParser.UNLOCK, 0); }
		public ITerminalNode TO() { return GetToken(VBParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914; Match(UNLOCK);
			State = 1915; Match(WS);
			State = 1916; ValueStmt(0);
			State = 1931;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				State = 1918;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1917; Match(WS);
					}
				}

				State = 1920; Match(T__6);
				State = 1922;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1921; Match(WS);
					}
				}

				State = 1924; ValueStmt(0);
				State = 1929;
				switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					State = 1925; Match(WS);
					State = 1926; Match(TO);
					State = 1927; Match(WS);
					State = 1928; ValueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode DIV() { return GetToken(VBParser.DIV, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(VBParser.MINUS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MINUS() { return GetToken(VBParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode IMP() { return GetToken(VBParser.IMP, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ITerminalNode GEQ() { return GetToken(VBParser.GEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LT() { return GetToken(VBParser.LT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ITerminalNode EQV() { return GetToken(VBParser.EQV, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VBParser.LIKE, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ITerminalNode NEQ() { return GetToken(VBParser.NEQ, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VBParser.POW, 0); }
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode MULT() { return GetToken(VBParser.MULT, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode PLUS() { return GetToken(VBParser.PLUS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VBParser.ASSIGN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsValueCallsContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsValueCallsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsValueCalls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsValueCalls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsValueCalls(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VBParser.PLUS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode OR() { return GetToken(VBParser.OR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBParser.ADDRESSOF, 0); }
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VBParser.MOD, 0); }
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VBParser.NEW, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode NOT() { return GetToken(VBParser.NOT, 0); }
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ITerminalNode AMPERSAND() { return GetToken(VBParser.AMPERSAND, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode AND() { return GetToken(VBParser.AND, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VBParser.IS, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode XOR() { return GetToken(VBParser.XOR, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode GT() { return GetToken(VBParser.GT, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode LEQ() { return GetToken(VBParser.LEQ, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext ValueStmt() {
		return ValueStmt(0);
	}

	private ValueStmtContext ValueStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987;
			switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				_localctx = new VsNewContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 1934; Match(NEW);
				State = 1935; Match(WS);
				State = 1936; ValueStmt(29);
				}
				break;

			case 2:
				{
				_localctx = new VsAssignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1937; ImplicitCallStmt_InStmt();
				State = 1939;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1938; Match(WS);
					}
				}

				State = 1941; Match(ASSIGN);
				State = 1943;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1942; Match(WS);
					}
				}

				State = 1945; ValueStmt(25);
				}
				break;

			case 3:
				{
				_localctx = new VsPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1947; Match(PLUS);
				State = 1949;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1948; Match(WS);
					}
				}

				State = 1951; ValueStmt(23);
				}
				break;

			case 4:
				{
				_localctx = new VsAddressOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1952; Match(ADDRESSOF);
				State = 1953; Match(WS);
				State = 1954; ValueStmt(22);
				}
				break;

			case 5:
				{
				_localctx = new VsNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1955; Match(MINUS);
				State = 1957;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1956; Match(WS);
					}
				}

				State = 1959; ValueStmt(7);
				}
				break;

			case 6:
				{
				_localctx = new VsNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1960; Match(NOT);
				State = 1961; Match(WS);
				State = 1962; ValueStmt(4);
				}
				break;

			case 7:
				{
				_localctx = new VsLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1963; Literal();
				}
				break;

			case 8:
				{
				_localctx = new VsMidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1964; midStmt();
				}
				break;

			case 9:
				{
				_localctx = new VsValueCallsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1965; ImplicitCallStmt_InStmt();
				}
				break;

			case 10:
				{
				_localctx = new VsTypeOfContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1966; typeOfStmt();
				}
				break;

			case 11:
				{
				_localctx = new VsStructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 1967; Match(LPAREN);
				State = 1969;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 1968; Match(WS);
					}
				}

				State = 1971; ValueStmt(0);
				State = 1982;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__6 || _la==WS) {
					{
					{
					State = 1973;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1972; Match(WS);
						}
					}

					State = 1975; Match(T__6);
					State = 1977;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 1976; Match(WS);
						}
					}

					State = 1979; ValueStmt(0);
					}
					}
					State = 1984;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1985; Match(RPAREN);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2147;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2145;
					switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
					case 1:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1989;
						if (!(Precpred(_ctx, 24))) throw new FailedPredicateException(this, "Precpred(_ctx, 24)");
						State = 1991;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1990; Match(WS);
							}
						}

						State = 1993; Match(PLUS);
						State = 1995;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 1994; Match(WS);
							}
						}

						State = 1997; ValueStmt(25);
						}
						break;

					case 2:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1998;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 1999; Match(WS);
						State = 2000; Match(AMPERSAND);
						State = 2001; Match(WS);
						State = 2002; ValueStmt(22);
						}
						break;

					case 3:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2003;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2004; Match(WS);
						State = 2005; Match(AND);
						State = 2006; Match(WS);
						State = 2007; ValueStmt(21);
						}
						break;

					case 4:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2008;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2010;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2009; Match(WS);
							}
						}

						State = 2012; Match(LT);
						State = 2014;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2013; Match(WS);
							}
						}

						State = 2016; ValueStmt(20);
						}
						break;

					case 5:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2017;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2019;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2018; Match(WS);
							}
						}

						State = 2021; Match(LEQ);
						State = 2023;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2022; Match(WS);
							}
						}

						State = 2025; ValueStmt(19);
						}
						break;

					case 6:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2026;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2028;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2027; Match(WS);
							}
						}

						State = 2030; Match(GT);
						State = 2032;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2031; Match(WS);
							}
						}

						State = 2034; ValueStmt(18);
						}
						break;

					case 7:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2035;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2037;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2036; Match(WS);
							}
						}

						State = 2039; Match(GEQ);
						State = 2041;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2040; Match(WS);
							}
						}

						State = 2043; ValueStmt(17);
						}
						break;

					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2044;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2046;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2045; Match(WS);
							}
						}

						State = 2048; Match(EQ);
						State = 2050;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2049; Match(WS);
							}
						}

						State = 2052; ValueStmt(16);
						}
						break;

					case 9:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2053;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2055;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2054; Match(WS);
							}
						}

						State = 2057; Match(NEQ);
						State = 2059;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2058; Match(WS);
							}
						}

						State = 2061; ValueStmt(15);
						}
						break;

					case 10:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2062;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2064;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2063; Match(WS);
							}
						}

						State = 2066; Match(DIV);
						State = 2068;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2067; Match(WS);
							}
						}

						State = 2070; ValueStmt(14);
						}
						break;

					case 11:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2071;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2072; Match(WS);
						State = 2073; Match(EQV);
						State = 2074; Match(WS);
						State = 2075; ValueStmt(13);
						}
						break;

					case 12:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2076;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2077; Match(WS);
						State = 2078; Match(IMP);
						State = 2079; Match(WS);
						State = 2080; ValueStmt(12);
						}
						break;

					case 13:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2081;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2082; Match(WS);
						State = 2083; Match(IS);
						State = 2084; Match(WS);
						State = 2085; ValueStmt(11);
						}
						break;

					case 14:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2086;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2087; Match(WS);
						State = 2088; Match(LIKE);
						State = 2089; Match(WS);
						State = 2090; ValueStmt(10);
						}
						break;

					case 15:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2091;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2093;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2092; Match(WS);
							}
						}

						State = 2095; Match(MINUS);
						State = 2097;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2096; Match(WS);
							}
						}

						State = 2099; ValueStmt(9);
						}
						break;

					case 16:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2100;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2102;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2101; Match(WS);
							}
						}

						State = 2104; Match(MOD);
						State = 2106;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2105; Match(WS);
							}
						}

						State = 2108; ValueStmt(7);
						}
						break;

					case 17:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2109;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2111;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2110; Match(WS);
							}
						}

						State = 2113; Match(MULT);
						State = 2115;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2114; Match(WS);
							}
						}

						State = 2117; ValueStmt(6);
						}
						break;

					case 18:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2118;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2120;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2119; Match(WS);
							}
						}

						State = 2122; Match(OR);
						State = 2124;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2123; Match(WS);
							}
						}

						State = 2126; ValueStmt(4);
						}
						break;

					case 19:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2127;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2129;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2128; Match(WS);
							}
						}

						State = 2131; Match(POW);
						State = 2133;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2132; Match(WS);
							}
						}

						State = 2135; ValueStmt(3);
						}
						break;

					case 20:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2136;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2138;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2137; Match(WS);
							}
						}

						State = 2140; Match(XOR);
						State = 2142;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2141; Match(WS);
							}
						}

						State = 2144; ValueStmt(2);
						}
						break;
					}
					} 
				}
				State = 2149;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode DIM() { return GetToken(VBParser.DIM, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public VariableListStmtContext VariableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public VisibilityContext Visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VBParser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2153;
			switch (_input.La(1)) {
			case DIM:
				{
				State = 2150; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2151; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2152; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2155; Match(WS);
			State = 2158;
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2156; Match(WITHEVENTS);
				State = 2157; Match(WS);
				}
				break;
			}
			State = 2160; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public VariableSubStmtContext VariableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public IReadOnlyList<VariableSubStmtContext> VariableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2162; variableSubStmt();
			State = 2173;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2164;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2163; Match(WS);
						}
					}

					State = 2166; Match(T__6);
					State = 2168;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2167; Match(WS);
						}
					}

					State = 2170; variableSubStmt();
					}
					} 
				}
				State = 2175;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,339,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AsTypeClauseContext AsTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public TypeHintContext TypeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176; AmbiguousIdentifier();
			State = 2194;
			switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
			case 1:
				{
				State = 2178;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2177; Match(WS);
					}
				}

				State = 2180; Match(LPAREN);
				State = 2182;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2181; Match(WS);
					}
				}

				State = 2188;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
					{
					State = 2184; Subscripts();
					State = 2186;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2185; Match(WS);
						}
					}

					}
				}

				State = 2190; Match(RPAREN);
				State = 2192;
				switch ( Interpreter.AdaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					State = 2191; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2197;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2196; typeHint();
				}
			}

			State = 2201;
			switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				State = 2199; Match(WS);
				State = 2200; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ITerminalNode WHILE() { return GetToken(VBParser.WHILE, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode WEND() { return GetToken(VBParser.WEND, 0); }
		public IReadOnlyList<BlockContext> block() {
			return GetRuleContexts<BlockContext>();
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2203; Match(WHILE);
			State = 2204; Match(WS);
			State = 2205; ValueStmt(0);
			State = 2207;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2206; Match(NEWLINE);
				}
				}
				State = 2209;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2216;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2211; Block();
					State = 2212; Match(NEWLINE);
					}
					} 
				}
				State = 2218;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,349,_ctx);
			}
			State = 2219; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VBParser.WIDTH, 0); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2221; Match(WIDTH);
			State = 2222; Match(WS);
			State = 2223; ValueStmt(0);
			State = 2225;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2224; Match(WS);
				}
			}

			State = 2227; Match(T__6);
			State = 2229;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2228; Match(WS);
				}
			}

			State = 2231; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBParser.NEWLINE); }
		public ImplicitCallStmt_InStmtContext ImplicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VBParser.NEWLINE, i);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ITerminalNode WITH() { return GetToken(VBParser.WITH, 0); }
		public ITerminalNode END_WITH() { return GetToken(VBParser.END_WITH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233; Match(WITH);
			State = 2234; Match(WS);
			State = 2235; ImplicitCallStmt_InStmt();
			State = 2237;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2236; Match(NEWLINE);
				}
				}
				State = 2239;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NEWLINE );
			State = 2247;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2241; Block();
				State = 2243;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2242; Match(NEWLINE);
					}
					}
					State = 2245;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2249; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode WRITE() { return GetToken(VBParser.WRITE, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2251; Match(WRITE);
			State = 2252; Match(WS);
			State = 2253; ValueStmt(0);
			State = 2255;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2254; Match(WS);
				}
			}

			State = 2257; Match(T__6);
			State = 2262;
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 2259;
				switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					State = 2258; Match(WS);
					}
					break;
				}
				State = 2261; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext ECS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext ECS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext ExplicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_explicitCallStmt);
		try {
			State = 2266;
			switch ( Interpreter.AdaptivePredict(_input,358,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2264; eCS_ProcedureCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2265; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBParser.CALL, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2268; Match(CALL);
			State = 2269; Match(WS);
			State = 2270; AmbiguousIdentifier();
			State = 2272;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2271; typeHint();
				}
			}

			State = 2288;
			switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				State = 2275;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2274; Match(WS);
					}
				}

				State = 2277; Match(LPAREN);
				State = 2279;
				switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
				case 1:
					{
					State = 2278; Match(WS);
					}
					break;
				}
				State = 2285;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
					{
					State = 2281; argsCall();
					State = 2283;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2282; Match(WS);
						}
					}

					}
				}

				State = 2287; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode CALL() { return GetToken(VBParser.CALL, 0); }
		public MemberPropertyCallStmtContext memberPropertyCallStmt(int i) {
			return GetRuleContext<MemberPropertyCallStmtContext>(i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public VariableCallStmtContext variableCallStmt() {
			return GetRuleContext<VariableCallStmtContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public IReadOnlyList<MemberPropertyCallStmtContext> memberPropertyCallStmt() {
			return GetRuleContexts<MemberPropertyCallStmtContext>();
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290; Match(CALL);
			State = 2291; Match(WS);
			State = 2293;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2292; variableCallStmt();
				}
			}

			State = 2298;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,366,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2295; memberPropertyCallStmt();
					}
					} 
				}
				State = 2300;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,366,_ctx);
			}
			State = 2301; Match(T__7);
			State = 2302; AmbiguousIdentifier();
			State = 2304;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2303; typeHint();
				}
			}

			State = 2320;
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2307;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2306; Match(WS);
					}
				}

				State = 2309; Match(LPAREN);
				State = 2311;
				switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					State = 2310; Match(WS);
					}
					break;
				}
				State = 2317;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
					{
					State = 2313; argsCall();
					State = 2315;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2314; Match(WS);
						}
					}

					}
				}

				State = 2319; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_MemberSubCallContext iCS_B_MemberSubCall() {
			return GetRuleContext<ICS_B_MemberSubCallContext>(0);
		}
		public ICS_B_MemberFunctionCallContext iCS_B_MemberFunctionCall() {
			return GetRuleContext<ICS_B_MemberFunctionCallContext>(0);
		}
		public ICS_B_FunctionCallContext iCS_B_FunctionCall() {
			return GetRuleContext<ICS_B_FunctionCallContext>(0);
		}
		public ICS_B_SubCallContext iCS_B_SubCall() {
			return GetRuleContext<ICS_B_SubCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_implicitCallStmt_InBlock);
		try {
			State = 2326;
			switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2322; iCS_B_SubCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2323; iCS_B_FunctionCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2324; iCS_B_MemberSubCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2325; iCS_B_MemberFunctionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_SubCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_SubCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_SubCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_B_SubCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_B_SubCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_SubCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_SubCallContext iCS_B_SubCall() {
		ICS_B_SubCallContext _localctx = new ICS_B_SubCallContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_iCS_B_SubCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328; certainIdentifier();
			State = 2331;
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				State = 2329; Match(WS);
				State = 2330; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_FunctionCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public FunctionOrArrayCallStmtContext functionOrArrayCallStmt() {
			return GetRuleContext<FunctionOrArrayCallStmtContext>(0);
		}
		public ICS_B_FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_FunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_B_FunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_B_FunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_FunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_FunctionCallContext iCS_B_FunctionCall() {
		ICS_B_FunctionCallContext _localctx = new ICS_B_FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_iCS_B_FunctionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2333; functionOrArrayCallStmt();
			State = 2335;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 2334; dictionaryCallStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberSubCallContext : ParserRuleContext {
		public IReadOnlyList<ImplicitCallStmt_InStmtContext> implicitCallStmt_InStmt() {
			return GetRuleContexts<ImplicitCallStmt_InStmtContext>();
		}
		public MemberSubCallStmtContext memberSubCallStmt() {
			return GetRuleContext<MemberSubCallStmtContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt(int i) {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(i);
		}
		public ICS_B_MemberSubCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberSubCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberSubCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberSubCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberSubCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberSubCallContext iCS_B_MemberSubCall() {
		ICS_B_MemberSubCallContext _localctx = new ICS_B_MemberSubCallContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_iCS_B_MemberSubCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2337; ImplicitCallStmt_InStmt();
					}
					} 
				}
				State = 2342;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,376,_ctx);
			}
			State = 2343; memberSubCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberFunctionCallContext : ParserRuleContext {
		public IReadOnlyList<ImplicitCallStmt_InStmtContext> implicitCallStmt_InStmt() {
			return GetRuleContexts<ImplicitCallStmt_InStmtContext>();
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt(int i) {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(i);
		}
		public MemberFunctionOrArrayCallStmtContext memberFunctionOrArrayCallStmt() {
			return GetRuleContext<MemberFunctionOrArrayCallStmtContext>(0);
		}
		public ICS_B_MemberFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberFunctionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_B_MemberFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_B_MemberFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberFunctionCallContext iCS_B_MemberFunctionCall() {
		ICS_B_MemberFunctionCallContext _localctx = new ICS_B_MemberFunctionCallContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_iCS_B_MemberFunctionCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2348;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,377,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2345; ImplicitCallStmt_InStmt();
					}
					} 
				}
				State = 2350;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,377,_ctx);
			}
			State = 2351; memberFunctionOrArrayCallStmt();
			State = 2353;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 2352; dictionaryCallStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_FunctionOrArrayCallContext iCS_S_FunctionOrArrayCall() {
			return GetRuleContext<ICS_S_FunctionOrArrayCallContext>(0);
		}
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ICS_S_VariableCallContext ICS_S_VariableCall() {
			return GetRuleContext<ICS_S_VariableCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext ImplicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_implicitCallStmt_InStmt);
		try {
			State = 2359;
			switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2355; iCS_S_VariableCall();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2356; iCS_S_FunctionOrArrayCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2357; iCS_S_DictionaryCall();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2358; iCS_S_MembersCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public VariableCallStmtContext VariableCallStmt() {
			return GetRuleContext<VariableCallStmtContext>(0);
		}
		public ICS_S_VariableCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_S_VariableCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_S_VariableCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableCallContext iCS_S_VariableCall() {
		ICS_S_VariableCallContext _localctx = new ICS_S_VariableCallContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_iCS_S_VariableCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2361; variableCallStmt();
			State = 2363;
			switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				State = 2362; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_FunctionOrArrayCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public FunctionOrArrayCallStmtContext functionOrArrayCallStmt() {
			return GetRuleContext<FunctionOrArrayCallStmtContext>(0);
		}
		public ICS_S_FunctionOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_FunctionOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_S_FunctionOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_S_FunctionOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_FunctionOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_FunctionOrArrayCallContext iCS_S_FunctionOrArrayCall() {
		ICS_S_FunctionOrArrayCallContext _localctx = new ICS_S_FunctionOrArrayCallContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_iCS_S_FunctionOrArrayCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2365; functionOrArrayCallStmt();
			State = 2367;
			switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				State = 2366; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public FunctionOrArrayCallStmtContext functionOrArrayCallStmt() {
			return GetRuleContext<FunctionOrArrayCallStmtContext>(0);
		}
		public MemberCall_ValueContext memberCall_Value(int i) {
			return GetRuleContext<MemberCall_ValueContext>(i);
		}
		public VariableCallStmtContext variableCallStmt() {
			return GetRuleContext<VariableCallStmtContext>(0);
		}
		public IReadOnlyList<MemberCall_ValueContext> memberCall_Value() {
			return GetRuleContexts<MemberCall_ValueContext>();
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2373;
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				State = 2371; variableCallStmt();
				}
				break;

			case 2:
				{
				State = 2372; functionOrArrayCallStmt();
				}
				break;
			}
			State = 2376;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2375; memberCall_Value();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,383,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2381;
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				State = 2380; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberPropertyCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public MemberPropertyCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberPropertyCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMemberPropertyCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMemberPropertyCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberPropertyCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberPropertyCallStmtContext memberPropertyCallStmt() {
		MemberPropertyCallStmtContext _localctx = new MemberPropertyCallStmtContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_memberPropertyCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2383; Match(T__7);
			State = 2384; AmbiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberFunctionOrArrayCallStmtContext : ParserRuleContext {
		public FunctionOrArrayCallStmtContext functionOrArrayCallStmt() {
			return GetRuleContext<FunctionOrArrayCallStmtContext>(0);
		}
		public MemberFunctionOrArrayCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberFunctionOrArrayCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMemberFunctionOrArrayCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMemberFunctionOrArrayCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberFunctionOrArrayCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberFunctionOrArrayCallStmtContext memberFunctionOrArrayCallStmt() {
		MemberFunctionOrArrayCallStmtContext _localctx = new MemberFunctionOrArrayCallStmtContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_memberFunctionOrArrayCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386; Match(T__7);
			State = 2387; functionOrArrayCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSubCallStmtContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public MemberSubCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSubCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMemberSubCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMemberSubCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberSubCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberSubCallStmtContext memberSubCallStmt() {
		MemberSubCallStmtContext _localctx = new MemberSubCallStmtContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_memberSubCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389; Match(T__7);
			State = 2390; AmbiguousIdentifier();
			State = 2393;
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2391; Match(WS);
				State = 2392; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberCall_ValueContext : ParserRuleContext {
		public MemberPropertyCallStmtContext memberPropertyCallStmt() {
			return GetRuleContext<MemberPropertyCallStmtContext>(0);
		}
		public MemberFunctionOrArrayCallStmtContext memberFunctionOrArrayCallStmt() {
			return GetRuleContext<MemberFunctionOrArrayCallStmtContext>(0);
		}
		public MemberCall_ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberCall_Value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterMemberCall_Value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitMemberCall_Value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberCall_Value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberCall_ValueContext memberCall_Value() {
		MemberCall_ValueContext _localctx = new MemberCall_ValueContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_memberCall_Value);
		try {
			State = 2397;
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2395; memberPropertyCallStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2396; memberFunctionOrArrayCallStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public VariableCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVariableCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVariableCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableCallStmtContext variableCallStmt() {
		VariableCallStmtContext _localctx = new VariableCallStmtContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_variableCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2399; AmbiguousIdentifier();
			State = 2401;
			switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				State = 2400; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2403; Match(T__1);
			State = 2404; AmbiguousIdentifier();
			State = 2406;
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				State = 2405; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionOrArrayCallStmtContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public FunctionOrArrayCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionOrArrayCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterFunctionOrArrayCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitFunctionOrArrayCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionOrArrayCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionOrArrayCallStmtContext functionOrArrayCallStmt() {
		FunctionOrArrayCallStmtContext _localctx = new FunctionOrArrayCallStmtContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_functionOrArrayCallStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410;
			switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				State = 2408; AmbiguousIdentifier();
				}
				break;

			case 2:
				{
				State = 2409; baseType();
				}
				break;
			}
			State = 2413;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) {
				{
				State = 2412; typeHint();
				}
			}

			State = 2416;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2415; Match(WS);
				}
			}

			State = 2418; Match(LPAREN);
			State = 2420;
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				State = 2419; Match(WS);
				}
				break;
			}
			State = 2426;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__6) | (1L << T__2) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)) | (1L << (WS - 193)))) != 0)) {
				{
				State = 2422; argsCall();
				State = 2424;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2423; Match(WS);
					}
				}

				}
			}

			State = 2428; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ArgCallContext> argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2442;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,398,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2431;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
						{
						State = 2430; ArgCall();
						}
					}

					State = 2434;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2433; Match(WS);
						}
					}

					State = 2436;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2438;
					switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
					case 1:
						{
						State = 2437; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2444;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,398,_ctx);
			}
			State = 2445; ArgCall();
			State = 2458;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2447;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2446; Match(WS);
						}
					}

					State = 2449;
					_la = _input.La(1);
					if ( !(_la==T__6 || _la==T__2) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 2451;
					switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
					case 1:
						{
						State = 2450; Match(WS);
						}
						break;
					}
					State = 2454;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__1) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (LPAREN - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (MINUS - 193)) | (1L << (PLUS - 193)) | (1L << (L_SQUARE_BRACKET - 193)) | (1L << (STRINGLITERAL - 193)) | (1L << (DATELITERAL - 193)) | (1L << (COLORLITERAL - 193)) | (1L << (INTEGERLITERAL - 193)) | (1L << (DOUBLELITERAL - 193)) | (1L << (FILENUMBER - 193)) | (1L << (IDENTIFIER - 193)))) != 0)) {
						{
						State = 2453; ArgCall();
						}
					}

					}
					} 
				}
				State = 2460;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBParser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBParser.PARAMARRAY, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBParser.BYVAL, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext ArgCall() {
		ArgCallContext _localctx = new ArgCallContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2463;
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				State = 2461;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2462; Match(WS);
				}
				break;
			}
			State = 2465; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ArgContext> Arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public ArgContext Arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext ArgList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2467; Match(LPAREN);
			State = 2485;
			switch ( Interpreter.AdaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				State = 2469;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2468; Match(WS);
					}
				}

				State = 2471; arg();
				State = 2482;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,407,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2473;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2472; Match(WS);
							}
						}

						State = 2475; Match(T__6);
						State = 2477;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 2476; Match(WS);
							}
						}

						State = 2479; arg();
						}
						} 
					}
					State = 2484;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,407,_ctx);
				}
				}
				break;
			}
			State = 2488;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2487; Match(WS);
				}
			}

			State = 2490; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(VBParser.OPTIONAL, 0); }
		public AsTypeClauseContext AsTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode BYREF() { return GetToken(VBParser.BYREF, 0); }
		public ArgDefaultValueContext ArgDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VBParser.PARAMARRAY, 0); }
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBParser.BYVAL, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494;
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 2492; Match(OPTIONAL);
				State = 2493; Match(WS);
				}
				break;
			}
			State = 2498;
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 2496;
				_la = _input.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 2497; Match(WS);
				}
				break;
			}
			State = 2502;
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2500; Match(PARAMARRAY);
				State = 2501; Match(WS);
				}
				break;
			}
			State = 2504; AmbiguousIdentifier();
			State = 2513;
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				State = 2506;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2505; Match(WS);
					}
				}

				State = 2508; Match(LPAREN);
				State = 2510;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2509; Match(WS);
					}
				}

				State = 2512; Match(RPAREN);
				}
				break;
			}
			State = 2517;
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 2515; Match(WS);
				State = 2516; asTypeClause();
				}
				break;
			}
			State = 2523;
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 2520;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2519; Match(WS);
					}
				}

				State = 2522; ArgDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public AmbiguousIdentifierContext AmbiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext ArgDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2525; Match(EQ);
			State = 2527;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2526; Match(WS);
				}
			}

			State = 2531;
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				State = 2529; Literal();
				}
				break;

			case 2:
				{
				State = 2530; AmbiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public IReadOnlyList<SubscriptContext> subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext Subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2533; Subscript();
			State = 2544;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,423,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2535;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2534; Match(WS);
						}
					}

					State = 2537; Match(T__6);
					State = 2539;
					_la = _input.La(1);
					if (_la==WS) {
						{
						State = 2538; Match(WS);
						}
					}

					State = 2541; Subscript();
					}
					} 
				}
				State = 2546;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,423,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public IReadOnlyList<ValueStmtContext> valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VBParser.TO, 0); }
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext Subscript() {
		SubscriptContext _localctx = new SubscriptContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2552;
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 2547; ValueStmt(0);
				State = 2548; Match(WS);
				State = 2549; Match(TO);
				State = 2550; Match(WS);
				}
				break;
			}
			State = 2554; ValueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VBParser.R_SQUARE_BRACKET, 0); }
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VBParser.L_SQUARE_BRACKET, 0); }
		public AmbiguousKeywordContext AmbiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> AmbiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext AmbiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2570;
			switch (_input.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2558;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2558;
						switch (_input.La(1)) {
						case IDENTIFIER:
							{
							State = 2556; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATABASE:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2557; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2560;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,426,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2562; Match(L_SQUARE_BRACKET);
				State = 2565;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2565;
					switch (_input.La(1)) {
					case IDENTIFIER:
						{
						State = 2563; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2564; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2567;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2569; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VBParser.AS, 0); }
		public ITerminalNode NEW() { return GetToken(VBParser.NEW, 0); }
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public TypeContext Type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2572; Match(AS);
			State = 2573; Match(WS);
			State = 2576;
			switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				State = 2574; Match(NEW);
				State = 2575; Match(WS);
				}
				break;
			}
			State = 2578; type();
			State = 2581;
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 2579; Match(WS);
				State = 2580; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(VBParser.COLLECTION, 0); }
		public ITerminalNode BYTE() { return GetToken(VBParser.BYTE, 0); }
		public ITerminalNode DATE() { return GetToken(VBParser.DATE, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBParser.BOOLEAN, 0); }
		public ITerminalNode LONG() { return GetToken(VBParser.LONG, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBParser.DOUBLE, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBParser.SINGLE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBParser.VARIANT, 0); }
		public ITerminalNode STRING() { return GetToken(VBParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBParser.INTEGER, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2583;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & ((1L << (SINGLE - 157)) | (1L << (STRING - 157)) | (1L << (VARIANT - 157)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VBParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBParser.IDENTIFIER); }
		public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_certainIdentifier);
		int _la;
		try {
			State = 2600;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2585; Match(IDENTIFIER);
				State = 2590;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER) {
					{
					State = 2588;
					switch (_input.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2586; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2587; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2592;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2593; ambiguousKeyword();
				State = 2596;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					State = 2596;
					switch (_input.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATABASE:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2594; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2595; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2598;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode NEQ() { return GetToken(VBParser.NEQ, 0); }
		public ITerminalNode GEQ() { return GetToken(VBParser.GEQ, 0); }
		public ITerminalNode LT() { return GetToken(VBParser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VBParser.LEQ, 0); }
		public ITerminalNode LIKE() { return GetToken(VBParser.LIKE, 0); }
		public ITerminalNode IS() { return GetToken(VBParser.IS, 0); }
		public ITerminalNode GT() { return GetToken(VBParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(VBParser.EQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2602;
			_la = _input.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (EQ - 187)) | (1L << (GEQ - 187)) | (1L << (GT - 187)) | (1L << (LEQ - 187)) | (1L << (LT - 187)) | (1L << (NEQ - 187)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604; AmbiguousIdentifier();
			State = 2609;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,437,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2605; Match(T__7);
					State = 2606; AmbiguousIdentifier();
					}
					} 
				}
				State = 2611;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,437,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode WS() { return GetToken(VBParser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBParser.INTEGERLITERAL, 0); }
		public ITerminalNode MULT() { return GetToken(VBParser.MULT, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612; Match(MULT);
			State = 2614;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 2613; Match(WS);
				}
			}

			State = 2618;
			switch (_input.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2616; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATABASE:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2617; AmbiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public IReadOnlyList<CertainIdentifierContext> certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ITerminalNode MINUS() { return GetToken(VBParser.MINUS, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620; certainIdentifier();
			State = 2629;
			switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				State = 2622;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2621; Match(WS);
					}
				}

				State = 2624; Match(MINUS);
				State = 2626;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2625; Match(WS);
					}
				}

				State = 2628; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2631; AmbiguousIdentifier();
			State = 2632; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode FILENUMBER() { return GetToken(VBParser.FILENUMBER, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VBParser.DOUBLELITERAL, 0); }
		public ITerminalNode COLORLITERAL() { return GetToken(VBParser.COLORLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VBParser.TRUE, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VBParser.INTEGERLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VBParser.STRINGLITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(VBParser.NULL, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBParser.NOTHING, 0); }
		public ITerminalNode FALSE() { return GetToken(VBParser.FALSE, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VBParser.DATELITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext Literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2634;
			_la = _input.La(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (FALSE - 74)) | (1L << (NOTHING - 74)) | (1L << (NULL - 74)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (TRUE - 169)) | (1L << (STRINGLITERAL - 169)) | (1L << (DATELITERAL - 169)) | (1L << (COLORLITERAL - 169)) | (1L << (INTEGERLITERAL - 169)) | (1L << (DOUBLELITERAL - 169)) | (1L << (FILENUMBER - 169)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBParser.WS); }
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VBParser.RPAREN, 0); }
		public ITerminalNode WS(int i) {
			return GetToken(VBParser.WS, i);
		}
		public ITerminalNode LPAREN() { return GetToken(VBParser.LPAREN, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2638;
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				State = 2636; baseType();
				}
				break;

			case 2:
				{
				State = 2637; complexType();
				}
				break;
			}
			State = 2648;
			switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				State = 2641;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2640; Match(WS);
					}
				}

				State = 2643; Match(LPAREN);
				State = 2645;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 2644; Match(WS);
					}
				}

				State = 2647; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2650;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__4) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0) || _la==AMPERSAND) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(VBParser.PUBLIC, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBParser.GLOBAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBParser.PRIVATE, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBParser.FRIEND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2652;
			_la = _input.La(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VBParser.RESET, 0); }
		public ITerminalNode GET() { return GetToken(VBParser.GET, 0); }
		public ITerminalNode MID() { return GetToken(VBParser.MID, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VBParser.ELSEIF, 0); }
		public ITerminalNode LOCK() { return GetToken(VBParser.LOCK, 0); }
		public ITerminalNode VERSION() { return GetToken(VBParser.VERSION, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VBParser.SENDKEYS, 0); }
		public ITerminalNode IS() { return GetToken(VBParser.IS, 0); }
		public ITerminalNode EACH() { return GetToken(VBParser.EACH, 0); }
		public ITerminalNode DIM() { return GetToken(VBParser.DIM, 0); }
		public ITerminalNode ERASE() { return GetToken(VBParser.ERASE, 0); }
		public ITerminalNode DO() { return GetToken(VBParser.DO, 0); }
		public ITerminalNode GOSUB() { return GetToken(VBParser.GOSUB, 0); }
		public ITerminalNode STATIC() { return GetToken(VBParser.STATIC, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VBParser.UNLOCK, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VBParser.DEFBYTE, 0); }
		public ITerminalNode THEN() { return GetToken(VBParser.THEN, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VBParser.DEFSTR, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VBParser.UNLOAD, 0); }
		public ITerminalNode LONG() { return GetToken(VBParser.LONG, 0); }
		public ITerminalNode OR() { return GetToken(VBParser.OR, 0); }
		public ITerminalNode WITH() { return GetToken(VBParser.WITH, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VBParser.DELETESETTING, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VBParser.PUBLIC, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VBParser.OPTIONAL, 0); }
		public ITerminalNode EQV() { return GetToken(VBParser.EQV, 0); }
		public ITerminalNode NEW() { return GetToken(VBParser.NEW, 0); }
		public ITerminalNode ELSE() { return GetToken(VBParser.ELSE, 0); }
		public ITerminalNode CLOSE() { return GetToken(VBParser.CLOSE, 0); }
		public ITerminalNode CASE() { return GetToken(VBParser.CASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VBParser.ERROR, 0); }
		public ITerminalNode CONST() { return GetToken(VBParser.CONST, 0); }
		public ITerminalNode NULL() { return GetToken(VBParser.NULL, 0); }
		public ITerminalNode TAB() { return GetToken(VBParser.TAB, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VBParser.DEFCUR, 0); }
		public ITerminalNode AS() { return GetToken(VBParser.AS, 0); }
		public ITerminalNode INPUT() { return GetToken(VBParser.INPUT, 0); }
		public ITerminalNode TRUE() { return GetToken(VBParser.TRUE, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VBParser.ADDRESSOF, 0); }
		public ITerminalNode TEXT() { return GetToken(VBParser.TEXT, 0); }
		public ITerminalNode ACCESS() { return GetToken(VBParser.ACCESS, 0); }
		public ITerminalNode RSET() { return GetToken(VBParser.RSET, 0); }
		public ITerminalNode RANDOM() { return GetToken(VBParser.RANDOM, 0); }
		public ITerminalNode DEFINT() { return GetToken(VBParser.DEFINT, 0); }
		public ITerminalNode MKDIR() { return GetToken(VBParser.MKDIR, 0); }
		public ITerminalNode CLASS() { return GetToken(VBParser.CLASS, 0); }
		public ITerminalNode IN() { return GetToken(VBParser.IN, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VBParser.DEFSNG, 0); }
		public ITerminalNode BYREF() { return GetToken(VBParser.BYREF, 0); }
		public ITerminalNode LET() { return GetToken(VBParser.LET, 0); }
		public ITerminalNode RETURN() { return GetToken(VBParser.RETURN, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VBParser.DEFDEC, 0); }
		public ITerminalNode RESUME() { return GetToken(VBParser.RESUME, 0); }
		public ITerminalNode BINARY() { return GetToken(VBParser.BINARY, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VBParser.COLLECTION, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VBParser.PRIVATE, 0); }
		public ITerminalNode LOOP() { return GetToken(VBParser.LOOP, 0); }
		public ITerminalNode FRIEND() { return GetToken(VBParser.FRIEND, 0); }
		public ITerminalNode NOTHING() { return GetToken(VBParser.NOTHING, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VBParser.WITHEVENTS, 0); }
		public ITerminalNode GOTO() { return GetToken(VBParser.GOTO, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VBParser.DEFVAR, 0); }
		public ITerminalNode DATE() { return GetToken(VBParser.DATE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VBParser.APPACTIVATE, 0); }
		public ITerminalNode SPC() { return GetToken(VBParser.SPC, 0); }
		public ITerminalNode SETATTR() { return GetToken(VBParser.SETATTR, 0); }
		public ITerminalNode LIB() { return GetToken(VBParser.LIB, 0); }
		public ITerminalNode OPEN() { return GetToken(VBParser.OPEN, 0); }
		public ITerminalNode KILL() { return GetToken(VBParser.KILL, 0); }
		public ITerminalNode STRING() { return GetToken(VBParser.STRING, 0); }
		public ITerminalNode BEGIN() { return GetToken(VBParser.BEGIN, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VBParser.RANDOMIZE, 0); }
		public ITerminalNode FALSE() { return GetToken(VBParser.FALSE, 0); }
		public ITerminalNode NEXT() { return GetToken(VBParser.NEXT, 0); }
		public ITerminalNode ENUM() { return GetToken(VBParser.ENUM, 0); }
		public ITerminalNode CALL() { return GetToken(VBParser.CALL, 0); }
		public ITerminalNode TIME() { return GetToken(VBParser.TIME, 0); }
		public ITerminalNode DECLARE() { return GetToken(VBParser.DECLARE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VBParser.PRESERVE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VBParser.TYPEOF, 0); }
		public ITerminalNode STEP() { return GetToken(VBParser.STEP, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VBParser.DOUBLE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VBParser.CHDIR, 0); }
		public ITerminalNode LOAD() { return GetToken(VBParser.LOAD, 0); }
		public ITerminalNode SINGLE() { return GetToken(VBParser.SINGLE, 0); }
		public ITerminalNode ME() { return GetToken(VBParser.ME, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VBParser.SAVEPICTURE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VBParser.WIDTH, 0); }
		public ITerminalNode STOP() { return GetToken(VBParser.STOP, 0); }
		public ITerminalNode IF() { return GetToken(VBParser.IF, 0); }
		public ITerminalNode RMDIR() { return GetToken(VBParser.RMDIR, 0); }
		public ITerminalNode SHARED() { return GetToken(VBParser.SHARED, 0); }
		public ITerminalNode NAME() { return GetToken(VBParser.NAME, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VBParser.IMPLEMENTS, 0); }
		public ITerminalNode TO() { return GetToken(VBParser.TO, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VBParser.DEFLNG, 0); }
		public ITerminalNode LIKE() { return GetToken(VBParser.LIKE, 0); }
		public ITerminalNode VARIANT() { return GetToken(VBParser.VARIANT, 0); }
		public ITerminalNode TYPE() { return GetToken(VBParser.TYPE, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VBParser.DEFDATE, 0); }
		public ITerminalNode IMP() { return GetToken(VBParser.IMP, 0); }
		public ITerminalNode BYVAL() { return GetToken(VBParser.BYVAL, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VBParser.RAISEEVENT, 0); }
		public ITerminalNode BYTE() { return GetToken(VBParser.BYTE, 0); }
		public ITerminalNode EVENT() { return GetToken(VBParser.EVENT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VBParser.PARAMARRAY, 0); }
		public ITerminalNode READ() { return GetToken(VBParser.READ, 0); }
		public ITerminalNode NOT() { return GetToken(VBParser.NOT, 0); }
		public ITerminalNode WRITE() { return GetToken(VBParser.WRITE, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VBParser.CHDRIVE, 0); }
		public ITerminalNode MOD() { return GetToken(VBParser.MOD, 0); }
		public ITerminalNode SET() { return GetToken(VBParser.SET, 0); }
		public ITerminalNode APPEND() { return GetToken(VBParser.APPEND, 0); }
		public ITerminalNode AND() { return GetToken(VBParser.AND, 0); }
		public ITerminalNode WEND() { return GetToken(VBParser.WEND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VBParser.ATTRIBUTE, 0); }
		public ITerminalNode ALIAS() { return GetToken(VBParser.ALIAS, 0); }
		public ITerminalNode WHILE() { return GetToken(VBParser.WHILE, 0); }
		public ITerminalNode ON() { return GetToken(VBParser.ON, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VBParser.BOOLEAN, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VBParser.GLOBAL, 0); }
		public ITerminalNode BEEP() { return GetToken(VBParser.BEEP, 0); }
		public ITerminalNode LSET() { return GetToken(VBParser.LSET, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VBParser.SAVESETTING, 0); }
		public ITerminalNode UNTIL() { return GetToken(VBParser.UNTIL, 0); }
		public ITerminalNode REM() { return GetToken(VBParser.REM, 0); }
		public ITerminalNode LEN() { return GetToken(VBParser.LEN, 0); }
		public ITerminalNode PRINT() { return GetToken(VBParser.PRINT, 0); }
		public ITerminalNode DATABASE() { return GetToken(VBParser.DATABASE, 0); }
		public ITerminalNode XOR() { return GetToken(VBParser.XOR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VBParser.DEFOBJ, 0); }
		public ITerminalNode SELECT() { return GetToken(VBParser.SELECT, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VBParser.DEFDBL, 0); }
		public ITerminalNode PUT() { return GetToken(VBParser.PUT, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VBParser.FILECOPY, 0); }
		public ITerminalNode FOR() { return GetToken(VBParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VBParser.FUNCTION, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VBParser.OUTPUT, 0); }
		public ITerminalNode REDIM() { return GetToken(VBParser.REDIM, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VBParser.DEFBOOL, 0); }
		public ITerminalNode INTEGER() { return GetToken(VBParser.INTEGER, 0); }
		public ITerminalNode SUB() { return GetToken(VBParser.SUB, 0); }
		public ITerminalNode SEEK() { return GetToken(VBParser.SEEK, 0); }
		public ITerminalNode END() { return GetToken(VBParser.END, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVBListener typedListener = listener as IVBListener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVBVisitor<TResult> typedVisitor = visitor as IVBVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 97: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 24);

		case 1: return Precpred(_ctx, 21);

		case 2: return Precpred(_ctx, 20);

		case 3: return Precpred(_ctx, 19);

		case 4: return Precpred(_ctx, 18);

		case 5: return Precpred(_ctx, 17);

		case 6: return Precpred(_ctx, 16);

		case 7: return Precpred(_ctx, 15);

		case 8: return Precpred(_ctx, 14);

		case 9: return Precpred(_ctx, 13);

		case 10: return Precpred(_ctx, 12);

		case 11: return Precpred(_ctx, 11);

		case 12: return Precpred(_ctx, 10);

		case 13: return Precpred(_ctx, 9);

		case 14: return Precpred(_ctx, 8);

		case 15: return Precpred(_ctx, 6);

		case 17: return Precpred(_ctx, 3);

		case 16: return Precpred(_ctx, 5);

		case 19: return Precpred(_ctx, 1);

		case 18: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xD7\xA63\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x12B\n\x3\x3\x3\a\x3\x12E"+
		"\n\x3\f\x3\xE\x3\x131\v\x3\x3\x3\x3\x3\x6\x3\x135\n\x3\r\x3\xE\x3\x136"+
		"\x5\x3\x139\n\x3\x3\x3\x5\x3\x13C\n\x3\x3\x3\a\x3\x13F\n\x3\f\x3\xE\x3"+
		"\x142\v\x3\x3\x3\x5\x3\x145\n\x3\x3\x3\a\x3\x148\n\x3\f\x3\xE\x3\x14B"+
		"\v\x3\x3\x3\x5\x3\x14E\n\x3\x3\x3\a\x3\x151\n\x3\f\x3\xE\x3\x154\v\x3"+
		"\x3\x3\x5\x3\x157\n\x3\x3\x3\a\x3\x15A\n\x3\f\x3\xE\x3\x15D\v\x3\x3\x3"+
		"\x5\x3\x160\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x6\x5"+
		"\x16A\n\x5\r\x5\xE\x5\x16B\x3\x5\x3\x5\x5\x5\x170\n\x5\x3\x5\x3\x5\x5"+
		"\x5\x174\n\x5\x3\x5\x3\x5\x3\x5\x6\x5\x179\n\x5\r\x5\xE\x5\x17A\x3\x5"+
		"\x3\x5\x6\x5\x17F\n\x5\r\x5\xE\x5\x180\x3\x6\x3\x6\x6\x6\x185\n\x6\r\x6"+
		"\xE\x6\x186\x6\x6\x189\n\x6\r\x6\xE\x6\x18A\x3\a\x3\a\x6\a\x18F\n\a\r"+
		"\a\xE\a\x190\x6\a\x193\n\a\r\a\xE\a\x194\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b\x19F\n\b\x3\t\x3\t\x6\t\x1A3\n\t\r\t\xE\t\x1A4\x3\t\a"+
		"\t\x1A8\n\t\f\t\xE\t\x1AB\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x5\n\x1B8\n\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\x1C0"+
		"\n\f\x3\f\x3\f\x5\f\x1C4\n\f\x3\f\x3\f\x5\f\x1C8\n\f\x3\f\x3\f\x5\f\x1CC"+
		"\n\f\x3\f\a\f\x1CF\n\f\f\f\xE\f\x1D2\v\f\x3\r\x3\r\x6\r\x1D6\n\r\r\r\xE"+
		"\r\x1D7\x3\r\x5\r\x1DB\n\r\x3\r\a\r\x1DE\n\r\f\r\xE\r\x1E1\v\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x226\n\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x5\xF\x22C\n\xF\x3\xF\x3\xF\x5\xF\x230\n\xF\x3\xF\x5"+
		"\xF\x233\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x243\n\x13\x3\x13\x3"+
		"\x13\x5\x13\x247\n\x13\x3\x13\a\x13\x24A\n\x13\f\x13\xE\x13\x24D\v\x13"+
		"\x5\x13\x24F\n\x13\x3\x14\x3\x14\x3\x14\x5\x14\x254\n\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x25A\n\x14\x3\x14\x3\x14\x5\x14\x25E\n\x14\x3\x14"+
		"\a\x14\x261\n\x14\f\x14\xE\x14\x264\v\x14\x3\x15\x3\x15\x5\x15\x268\n"+
		"\x15\x3\x15\x3\x15\x5\x15\x26C\n\x15\x3\x15\x5\x15\x26F\n\x15\x3\x15\x3"+
		"\x15\x5\x15\x273\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x279\n\x16\x3"+
		"\x16\x3\x16\x5\x16\x27D\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\x284\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x293\n\x17\x3\x17\x5\x17\x296"+
		"\n\x17\x3\x17\x5\x17\x299\n\x17\x3\x17\x3\x17\x5\x17\x29D\n\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x5\x18\x2A3\n\x18\x3\x18\x3\x18\x5\x18\x2A7\n\x18"+
		"\x3\x18\a\x18\x2AA\n\x18\f\x18\xE\x18\x2AD\v\x18\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x5\x19\x2B3\n\x19\x3\x19\x3\x19\x5\x19\x2B7\n\x19\x3\x19\x3\x19"+
		"\x5\x19\x2BB\n\x19\x3\x19\x3\x19\x5\x19\x2BF\n\x19\x3\x19\x5\x19\x2C2"+
		"\n\x19\x3\x1A\x3\x1A\x6\x1A\x2C6\n\x1A\r\x1A\xE\x1A\x2C7\x3\x1A\x3\x1A"+
		"\x6\x1A\x2CC\n\x1A\r\x1A\xE\x1A\x2CD\x5\x1A\x2D0\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x6\x1A\x2D9\n\x1A\r\x1A\xE\x1A\x2DA\x3"+
		"\x1A\x3\x1A\x6\x1A\x2DF\n\x1A\r\x1A\xE\x1A\x2E0\x5\x1A\x2E3\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x6\x1A\x2E9\n\x1A\r\x1A\xE\x1A\x2EA\x3\x1A\x3\x1A"+
		"\x6\x1A\x2EF\n\x1A\r\x1A\xE\x1A\x2F0\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x2F9\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x300"+
		"\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x6\x1C\x306\n\x1C\r\x1C\xE\x1C\x307"+
		"\x3\x1C\a\x1C\x30B\n\x1C\f\x1C\xE\x1C\x30E\v\x1C\x3\x1C\x3\x1C\x3\x1D"+
		"\x3\x1D\x5\x1D\x314\n\x1D\x3\x1D\x3\x1D\x5\x1D\x318\n\x1D\x3\x1D\x5\x1D"+
		"\x31B\n\x1D\x3\x1D\x6\x1D\x31E\n\x1D\r\x1D\xE\x1D\x31F\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x5 \x32D\n \x3 \x3"+
		" \x3 \x3 \x5 \x333\n \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3\"\x5\"\x33D\n"+
		"\"\x3\"\x3\"\x5\"\x341\n\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x34B"+
		"\n#\x3#\x3#\x3#\x3#\x3#\x6#\x352\n#\r#\xE#\x353\x3#\x3#\x6#\x358\n#\r"+
		"#\xE#\x359\x5#\x35C\n#\x3#\x3#\x3#\x5#\x361\n#\x3$\x3$\x3$\x3$\x5$\x367"+
		"\n$\x3$\x3$\x5$\x36B\n$\x3$\x5$\x36E\n$\x3$\x3$\x5$\x372\n$\x3$\x3$\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x37D\n$\x3$\x6$\x380\n$\r$\xE$\x381\x3$"+
		"\x3$\x6$\x386\n$\r$\xE$\x387\x5$\x38A\n$\x3$\x3$\x3$\x5$\x38F\n$\x3%\x3"+
		"%\x3%\x5%\x394\n%\x3%\x3%\x5%\x398\n%\x3%\x3%\x3%\x3%\x5%\x39E\n%\x3%"+
		"\x5%\x3A1\n%\x3%\x3%\x5%\x3A5\n%\x3%\x6%\x3A8\n%\r%\xE%\x3A9\x3%\x3%\x6"+
		"%\x3AE\n%\r%\xE%\x3AF\x5%\x3B2\n%\x3%\x3%\x3&\x3&\x3&\x3&\x5&\x3BA\n&"+
		"\x3&\x3&\x5&\x3BE\n&\x3&\x5&\x3C1\n&\x3&\x5&\x3C4\n&\x3&\x3&\x5&\x3C8"+
		"\n&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x5)\x3DF\n)\x3)\x3)\a)\x3E3\n)\f)\xE)\x3E6\v)\x3"+
		")\x5)\x3E9\n)\x3)\x3)\x5)\x3ED\n)\x3*\x3*\x3*\x3*\x3*\x3*\x6*\x3F5\n*"+
		"\r*\xE*\x3F6\x3*\x3*\x6*\x3FB\n*\r*\xE*\x3FC\x5*\x3FF\n*\x3+\x3+\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x6,\x409\n,\r,\xE,\x40A\x3,\x3,\x6,\x40F\n,\r,\xE,\x410"+
		"\x5,\x413\n,\x3-\x3-\x6-\x417\n-\r-\xE-\x418\x3-\x3-\x6-\x41D\n-\r-\xE"+
		"-\x41E\x5-\x421\n-\x3.\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x5/\x42B\n/\x3/\x3"+
		"/\x5/\x42F\n/\x3/\x6/\x432\n/\r/\xE/\x433\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x31\x3\x31\x5\x31\x43C\n\x31\x3\x31\x3\x31\x5\x31\x440\n\x31\x3\x31"+
		"\x3\x31\x5\x31\x444\n\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x44C\n\x32\x3\x32\x3\x32\x5\x32\x450\n\x32\x3\x32\x3\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x45C\n\x34\x3\x34"+
		"\x3\x34\x5\x34\x460\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x467"+
		"\n\x34\x5\x34\x469\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x46F\n\x35"+
		"\x3\x35\x3\x35\x5\x35\x473\n\x35\x3\x35\x3\x35\x3\x36\x3\x36\a\x36\x479"+
		"\n\x36\f\x36\xE\x36\x47C\v\x36\x3\x36\x5\x36\x47F\n\x36\x3\x36\x3\x36"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x6\x37\x489\n\x37\r\x37\xE"+
		"\x37\x48A\x3\x37\x3\x37\x6\x37\x48F\n\x37\r\x37\xE\x37\x490\x5\x37\x493"+
		"\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x6\x38\x49B\n\x38\r\x38"+
		"\xE\x38\x49C\x3\x38\x3\x38\x6\x38\x4A1\n\x38\r\x38\xE\x38\x4A2\x5\x38"+
		"\x4A5\n\x38\x3\x39\x3\x39\x6\x39\x4A9\n\x39\r\x39\xE\x39\x4AA\x3\x39\x3"+
		"\x39\x6\x39\x4AF\n\x39\r\x39\xE\x39\x4B0\x5\x39\x4B3\n\x39\x3:\x3:\x5"+
		":\x4B7\n:\x3:\x3:\x5:\x4BB\n:\x3:\x3:\x5:\x4BF\n:\x3:\x3:\x3;\x3;\x3;"+
		"\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5"+
		"=\x4D7\n=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x4E1\n>\x3>\x3>\x5>\x4E5"+
		"\n>\x3>\a>\x4E8\n>\f>\xE>\x4EB\v>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?"+
		"\x4F5\n?\x3?\x3?\x5?\x4F9\n?\x3?\a?\x4FC\n?\f?\xE?\x4FF\v?\x3@\x3@\x3"+
		"@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x50C\n@\x3@\x3@\x5@\x510\n@\x3@"+
		"\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x519\n@\x3@\x3@\x5@\x51D\n@\x3@\x5@\x520"+
		"\n@\x3\x41\x3\x41\x5\x41\x524\n\x41\x3\x41\x3\x41\x5\x41\x528\n\x41\x3"+
		"\x41\x5\x41\x52B\n\x41\a\x41\x52D\n\x41\f\x41\xE\x41\x530\v\x41\x3\x41"+
		"\x5\x41\x533\n\x41\x3\x41\x5\x41\x536\n\x41\x3\x41\x3\x41\x5\x41\x53A"+
		"\n\x41\x3\x41\x5\x41\x53D\n\x41\x6\x41\x53F\n\x41\r\x41\xE\x41\x540\x5"+
		"\x41\x543\n\x41\x3\x42\x3\x42\x3\x42\x5\x42\x548\n\x42\x3\x42\x3\x42\x5"+
		"\x42\x54C\n\x42\x3\x42\x3\x42\x5\x42\x550\n\x42\x3\x42\x3\x42\x5\x42\x554"+
		"\n\x42\x5\x42\x556\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x55C\n\x43"+
		"\x3\x43\x3\x43\x5\x43\x560\n\x43\x3\x43\x5\x43\x563\n\x43\x3\x44\x3\x44"+
		"\x3\x44\x5\x44\x568\n\x44\x3\x44\x3\x44\x5\x44\x56C\n\x44\x3\x44\x3\x44"+
		"\x3\x44\x3\x44\x5\x44\x572\n\x44\x3\x44\x5\x44\x575\n\x44\x3\x44\x3\x44"+
		"\x5\x44\x579\n\x44\x3\x44\x6\x44\x57C\n\x44\r\x44\xE\x44\x57D\x3\x44\x3"+
		"\x44\x6\x44\x582\n\x44\r\x44\xE\x44\x583\x5\x44\x586\n\x44\x3\x44\x3\x44"+
		"\x3\x45\x3\x45\x3\x45\x5\x45\x58D\n\x45\x3\x45\x3\x45\x5\x45\x591\n\x45"+
		"\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x597\n\x45\x3\x45\x5\x45\x59A\n\x45"+
		"\x3\x45\x6\x45\x59D\n\x45\r\x45\xE\x45\x59E\x3\x45\x3\x45\x6\x45\x5A3"+
		"\n\x45\r\x45\xE\x45\x5A4\x5\x45\x5A7\n\x45\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3\x46\x5\x46\x5AE\n\x46\x3\x46\x3\x46\x5\x46\x5B2\n\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x5\x46\x5B8\n\x46\x3\x46\x5\x46\x5BB\n\x46\x3\x46\x6\x46"+
		"\x5BE\n\x46\r\x46\xE\x46\x5BF\x3\x46\x3\x46\x6\x46\x5C4\n\x46\r\x46\xE"+
		"\x46\x5C5\x5\x46\x5C8\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x5G\x5D0\nG"+
		"\x3G\x3G\x5G\x5D4\nG\x3G\x5G\x5D7\nG\x3G\x5G\x5DA\nG\x3G\x3G\x5G\x5DE"+
		"\nG\x3G\x3G\x3H\x3H\x3H\x3H\x5H\x5E6\nH\x3H\x3H\x5H\x5EA\nH\x3H\x3H\x5"+
		"H\x5EE\nH\x5H\x5F0\nH\x3H\x5H\x5F3\nH\x3I\x3I\x3I\x5I\x5F8\nI\x3J\x3J"+
		"\x3J\x3J\x5J\x5FE\nJ\x3J\x3J\x5J\x602\nJ\x3J\x3J\x5J\x606\nJ\x3J\aJ\x609"+
		"\nJ\fJ\xEJ\x60C\vJ\x3K\x3K\x5K\x610\nK\x3K\x3K\x5K\x614\nK\x3K\x3K\x5"+
		"K\x618\nK\x3K\x3K\x3K\x5K\x61D\nK\x3L\x3L\x3M\x3M\x3M\x3M\x5M\x625\nM"+
		"\x5M\x627\nM\x3N\x3N\x3O\x3O\x3O\x3O\x3P\x3P\x3P\x3P\x5P\x633\nP\x3P\x3"+
		"P\x5P\x637\nP\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x5Q\x63F\nQ\x3Q\x3Q\x5Q\x643\nQ"+
		"\x3Q\x3Q\x3R\x3R\x3R\x3R\x5R\x64B\nR\x3R\x3R\x5R\x64F\nR\x3R\x3R\x5R\x653"+
		"\nR\x3R\x3R\x5R\x657\nR\x3R\x3R\x5R\x65B\nR\x3R\x3R\x5R\x65F\nR\x3R\x3"+
		"R\x3S\x3S\x3S\x3S\x5S\x667\nS\x3S\x3S\x5S\x66B\nS\x3S\x3S\x3T\x3T\x3T"+
		"\x3T\x3T\x3T\x6T\x675\nT\rT\xET\x676\x3T\aT\x67A\nT\fT\xET\x67D\vT\x3"+
		"T\x5T\x680\nT\x3T\x5T\x683\nT\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x68B\nU\x3U"+
		"\x5U\x68E\nU\x3U\aU\x691\nU\fU\xEU\x694\vU\x3U\x6U\x697\nU\rU\xEU\x698"+
		"\x5U\x69B\nU\x3U\x3U\x6U\x69F\nU\rU\xEU\x6A0\x5U\x6A3\nU\x3V\x3V\x5V\x6A7"+
		"\nV\x3V\x3V\x5V\x6AB\nV\x3V\x3V\x3V\x3V\x5V\x6B1\nV\x3V\x3V\x5V\x6B5\n"+
		"V\x3V\aV\x6B8\nV\fV\xEV\x6BB\vV\x3V\x3V\x3V\x3V\x3V\x3V\x5V\x6C3\nV\x3"+
		"V\x3V\x5V\x6C7\nV\x3V\aV\x6CA\nV\fV\xEV\x6CD\vV\x5V\x6CF\nV\x3W\x3W\x3"+
		"W\x3W\x5W\x6D5\nW\x3W\x5W\x6D8\nW\x3W\aW\x6DB\nW\fW\xEW\x6DE\vW\x3W\x6"+
		"W\x6E1\nW\rW\xEW\x6E2\x5W\x6E5\nW\x3W\x3W\x6W\x6E9\nW\rW\xEW\x6EA\x5W"+
		"\x6ED\nW\x3X\x3X\x3X\x3X\x5X\x6F3\nX\x3X\x3X\x5X\x6F7\nX\x3X\x5X\x6FA"+
		"\nX\x3Y\x3Y\x3Y\x3Y\x5Y\x700\nY\x3Y\x3Y\x5Y\x704\nY\x3Y\x3Y\x3Z\x3Z\x3"+
		"Z\x3Z\x5Z\x70C\nZ\x3Z\x3Z\x5Z\x710\nZ\x3Z\x3Z\x3[\x3[\x3\\\x3\\\x3\\\x5"+
		"\\\x719\n\\\x3\\\x3\\\x5\\\x71D\n\\\x3\\\x3\\\x3\\\x3\\\x5\\\x723\n\\"+
		"\x3\\\x5\\\x726\n\\\x3\\\x6\\\x729\n\\\r\\\xE\\\x72A\x3\\\x3\\\x6\\\x72F"+
		"\n\\\r\\\xE\\\x730\x5\\\x733\n\\\x3\\\x3\\\x3]\x3]\x5]\x739\n]\x3]\x3"+
		"]\x5]\x73D\n]\x3]\x3]\x3^\x3^\x3^\x5^\x744\n^\x3^\x3^\x3^\x3^\x6^\x74A"+
		"\n^\r^\xE^\x74B\x3^\a^\x74F\n^\f^\xE^\x752\v^\x3^\x3^\x3_\x3_\x5_\x758"+
		"\n_\x3_\x3_\x5_\x75C\n_\x3_\x5_\x75F\n_\x3_\x5_\x762\n_\x3_\x5_\x765\n"+
		"_\x3_\x3_\x5_\x769\n_\x3_\x6_\x76C\n_\r_\xE_\x76D\x3`\x3`\x3`\x3`\x3`"+
		"\x3`\x3`\x5`\x777\n`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62"+
		"\x3\x62\x5\x62\x781\n\x62\x3\x62\x3\x62\x5\x62\x785\n\x62\x3\x62\x3\x62"+
		"\x3\x62\x3\x62\x3\x62\x5\x62\x78C\n\x62\x5\x62\x78E\n\x62\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x796\n\x63\x3\x63\x3\x63\x5\x63\x79A"+
		"\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7A0\n\x63\x3\x63\x3\x63\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7A8\n\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7B4\n\x63\x3\x63\x3"+
		"\x63\x5\x63\x7B8\n\x63\x3\x63\x3\x63\x5\x63\x7BC\n\x63\x3\x63\a\x63\x7BF"+
		"\n\x63\f\x63\xE\x63\x7C2\v\x63\x3\x63\x3\x63\x5\x63\x7C6\n\x63\x3\x63"+
		"\x3\x63\x5\x63\x7CA\n\x63\x3\x63\x3\x63\x5\x63\x7CE\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x7DD\n\x63\x3\x63\x3\x63\x5\x63\x7E1\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x7E6\n\x63\x3\x63\x3\x63\x5\x63\x7EA\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x7EF\n\x63\x3\x63\x3\x63\x5\x63\x7F3\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x7F8\n\x63\x3\x63\x3\x63\x5\x63\x7FC\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x801\n\x63\x3\x63\x3\x63\x5\x63\x805\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x80A\n\x63\x3\x63\x3\x63\x5\x63\x80E\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x813\n\x63\x3\x63\x3\x63\x5\x63\x817\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x830\n\x63\x3\x63\x3\x63\x5\x63\x834\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x839\n\x63\x3\x63\x3\x63\x5\x63\x83D\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x842\n\x63\x3\x63\x3\x63\x5\x63\x846\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x84B\n\x63\x3\x63\x3\x63\x5\x63\x84F\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x854\n\x63\x3\x63\x3\x63\x5\x63\x858\n\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x85D\n\x63\x3\x63\x3\x63\x5\x63\x861\n\x63\x3\x63\a\x63"+
		"\x864\n\x63\f\x63\xE\x63\x867\v\x63\x3\x64\x3\x64\x3\x64\x5\x64\x86C\n"+
		"\x64\x3\x64\x3\x64\x3\x64\x5\x64\x871\n\x64\x3\x64\x3\x64\x3\x65\x3\x65"+
		"\x5\x65\x877\n\x65\x3\x65\x3\x65\x5\x65\x87B\n\x65\x3\x65\a\x65\x87E\n"+
		"\x65\f\x65\xE\x65\x881\v\x65\x3\x66\x3\x66\x5\x66\x885\n\x66\x3\x66\x3"+
		"\x66\x5\x66\x889\n\x66\x3\x66\x3\x66\x5\x66\x88D\n\x66\x5\x66\x88F\n\x66"+
		"\x3\x66\x3\x66\x5\x66\x893\n\x66\x5\x66\x895\n\x66\x3\x66\x5\x66\x898"+
		"\n\x66\x3\x66\x3\x66\x5\x66\x89C\n\x66\x3g\x3g\x3g\x3g\x6g\x8A2\ng\rg"+
		"\xEg\x8A3\x3g\x3g\x3g\ag\x8A9\ng\fg\xEg\x8AC\vg\x3g\x3g\x3h\x3h\x3h\x3"+
		"h\x5h\x8B4\nh\x3h\x3h\x5h\x8B8\nh\x3h\x3h\x3i\x3i\x3i\x3i\x6i\x8C0\ni"+
		"\ri\xEi\x8C1\x3i\x3i\x6i\x8C6\ni\ri\xEi\x8C7\x5i\x8CA\ni\x3i\x3i\x3j\x3"+
		"j\x3j\x3j\x5j\x8D2\nj\x3j\x3j\x5j\x8D6\nj\x3j\x5j\x8D9\nj\x3k\x3k\x5k"+
		"\x8DD\nk\x3l\x3l\x3l\x3l\x5l\x8E3\nl\x3l\x5l\x8E6\nl\x3l\x3l\x5l\x8EA"+
		"\nl\x3l\x3l\x5l\x8EE\nl\x5l\x8F0\nl\x3l\x5l\x8F3\nl\x3m\x3m\x3m\x5m\x8F8"+
		"\nm\x3m\am\x8FB\nm\fm\xEm\x8FE\vm\x3m\x3m\x3m\x5m\x903\nm\x3m\x5m\x906"+
		"\nm\x3m\x3m\x5m\x90A\nm\x3m\x3m\x5m\x90E\nm\x5m\x910\nm\x3m\x5m\x913\n"+
		"m\x3n\x3n\x3n\x3n\x5n\x919\nn\x3o\x3o\x3o\x5o\x91E\no\x3p\x3p\x5p\x922"+
		"\np\x3q\aq\x925\nq\fq\xEq\x928\vq\x3q\x3q\x3r\ar\x92D\nr\fr\xEr\x930\v"+
		"r\x3r\x3r\x5r\x934\nr\x3s\x3s\x3s\x3s\x5s\x93A\ns\x3t\x3t\x5t\x93E\nt"+
		"\x3u\x3u\x5u\x942\nu\x3v\x3v\x3w\x3w\x5w\x948\nw\x3w\x6w\x94B\nw\rw\xE"+
		"w\x94C\x3w\x5w\x950\nw\x3x\x3x\x3x\x3y\x3y\x3y\x3z\x3z\x3z\x3z\x5z\x95C"+
		"\nz\x3{\x3{\x5{\x960\n{\x3|\x3|\x5|\x964\n|\x3}\x3}\x3}\x5}\x969\n}\x3"+
		"~\x3~\x5~\x96D\n~\x3~\x5~\x970\n~\x3~\x5~\x973\n~\x3~\x3~\x5~\x977\n~"+
		"\x3~\x3~\x5~\x97B\n~\x5~\x97D\n~\x3~\x3~\x3\x7F\x5\x7F\x982\n\x7F\x3\x7F"+
		"\x5\x7F\x985\n\x7F\x3\x7F\x3\x7F\x5\x7F\x989\n\x7F\a\x7F\x98B\n\x7F\f"+
		"\x7F\xE\x7F\x98E\v\x7F\x3\x7F\x3\x7F\x5\x7F\x992\n\x7F\x3\x7F\x3\x7F\x5"+
		"\x7F\x996\n\x7F\x3\x7F\x5\x7F\x999\n\x7F\a\x7F\x99B\n\x7F\f\x7F\xE\x7F"+
		"\x99E\v\x7F\x3\x80\x3\x80\x5\x80\x9A2\n\x80\x3\x80\x3\x80\x3\x81\x3\x81"+
		"\x5\x81\x9A8\n\x81\x3\x81\x3\x81\x5\x81\x9AC\n\x81\x3\x81\x3\x81\x5\x81"+
		"\x9B0\n\x81\x3\x81\a\x81\x9B3\n\x81\f\x81\xE\x81\x9B6\v\x81\x5\x81\x9B8"+
		"\n\x81\x3\x81\x5\x81\x9BB\n\x81\x3\x81\x3\x81\x3\x82\x3\x82\x5\x82\x9C1"+
		"\n\x82\x3\x82\x3\x82\x5\x82\x9C5\n\x82\x3\x82\x3\x82\x5\x82\x9C9\n\x82"+
		"\x3\x82\x3\x82\x5\x82\x9CD\n\x82\x3\x82\x3\x82\x5\x82\x9D1\n\x82\x3\x82"+
		"\x5\x82\x9D4\n\x82\x3\x82\x3\x82\x5\x82\x9D8\n\x82\x3\x82\x5\x82\x9DB"+
		"\n\x82\x3\x82\x5\x82\x9DE\n\x82\x3\x83\x3\x83\x5\x83\x9E2\n\x83\x3\x83"+
		"\x3\x83\x5\x83\x9E6\n\x83\x3\x84\x3\x84\x5\x84\x9EA\n\x84\x3\x84\x3\x84"+
		"\x5\x84\x9EE\n\x84\x3\x84\a\x84\x9F1\n\x84\f\x84\xE\x84\x9F4\v\x84\x3"+
		"\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\x9FB\n\x85\x3\x85\x3\x85\x3\x86"+
		"\x3\x86\x6\x86\xA01\n\x86\r\x86\xE\x86\xA02\x3\x86\x3\x86\x3\x86\x6\x86"+
		"\xA08\n\x86\r\x86\xE\x86\xA09\x3\x86\x5\x86\xA0D\n\x86\x3\x87\x3\x87\x3"+
		"\x87\x3\x87\x5\x87\xA13\n\x87\x3\x87\x3\x87\x3\x87\x5\x87\xA18\n\x87\x3"+
		"\x88\x3\x88\x3\x89\x3\x89\x3\x89\a\x89\xA1F\n\x89\f\x89\xE\x89\xA22\v"+
		"\x89\x3\x89\x3\x89\x3\x89\x6\x89\xA27\n\x89\r\x89\xE\x89\xA28\x5\x89\xA2B"+
		"\n\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\a\x8B\xA32\n\x8B\f\x8B\xE\x8B"+
		"\xA35\v\x8B\x3\x8C\x3\x8C\x5\x8C\xA39\n\x8C\x3\x8C\x3\x8C\x5\x8C\xA3D"+
		"\n\x8C\x3\x8D\x3\x8D\x5\x8D\xA41\n\x8D\x3\x8D\x3\x8D\x5\x8D\xA45\n\x8D"+
		"\x3\x8D\x5\x8D\xA48\n\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x90\x3"+
		"\x90\x5\x90\xA51\n\x90\x3\x90\x5\x90\xA54\n\x90\x3\x90\x3\x90\x5\x90\xA58"+
		"\n\x90\x3\x90\x5\x90\xA5B\n\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93\x3"+
		"\x93\x3\x93\x2\x2\x3\xC4\x94\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2"+
		"\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2"+
		"\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2"+
		"\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2"+
		"\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2"+
		"\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2"+
		"\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2"+
		"\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2"+
		"\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A"+
		"\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C"+
		"\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x2\x15\x5\x2\x16\x16##\xA7\xA7\x4"+
		"\x2PP\xA5\xA5\x3\x2&\x31\x4\x2\xB0\xB0\xB4\xB4\x3\x2GK\x5\x2\xBD\xBD\xC4"+
		"\xC4\xC8\xC8\a\x2\x12\x12\x16\x16YY\x81\x81\x8B\x8B\x4\x2\x8E\x8F\xB8"+
		"\xB8\x4\x2\x66h\x9E\x9E\x4\x2\x5\x5\t\t\x4\x2\xA0\xA0\xA6\xA6\x4\x2\x18"+
		"\x19\x82\x82\x3\x2\x18\x19\f\x2\x17\x17\x1A\x1A!!$$\x35\x35[[__\x9F\x9F"+
		"\xA4\xA4\xB1\xB1\a\x2ZZ\x64\x64\xBD\xC0\xC2\xC2\xC6\xC6\x6\x2LLvw\xAB"+
		"\xAB\xCD\xD2\x6\x2\x3\x3\a\b\n\v\xBA\xBA\x6\x2NNRR\x85\x85\x89\x89\v\x2"+
		"\f\x38\x41\x46L\x64iinxz{\x80\x85\x89\x8E\x90\xB9\xBFE\x2\x126\x3\x2\x2"+
		"\x2\x4\x12A\x3\x2\x2\x2\x6\x161\x3\x2\x2\x2\b\x167\x3\x2\x2\x2\n\x188"+
		"\x3\x2\x2\x2\f\x192\x3\x2\x2\x2\xE\x19E\x3\x2\x2\x2\x10\x1A0\x3\x2\x2"+
		"\x2\x12\x1B7\x3\x2\x2\x2\x14\x1B9\x3\x2\x2\x2\x16\x1BB\x3\x2\x2\x2\x18"+
		"\x1D3\x3\x2\x2\x2\x1A\x225\x3\x2\x2\x2\x1C\x227\x3\x2\x2\x2\x1E\x234\x3"+
		"\x2\x2\x2 \x236\x3\x2\x2\x2\"\x23A\x3\x2\x2\x2$\x23E\x3\x2\x2\x2&\x253"+
		"\x3\x2\x2\x2(\x265\x3\x2\x2\x2*\x276\x3\x2\x2\x2,\x283\x3\x2\x2\x2.\x29E"+
		"\x3\x2\x2\x2\x30\x2AE\x3\x2\x2\x2\x32\x2F8\x3\x2\x2\x2\x34\x2FA\x3\x2"+
		"\x2\x2\x36\x2FF\x3\x2\x2\x2\x38\x311\x3\x2\x2\x2:\x321\x3\x2\x2\x2<\x325"+
		"\x3\x2\x2\x2>\x32C\x3\x2\x2\x2@\x336\x3\x2\x2\x2\x42\x338\x3\x2\x2\x2"+
		"\x44\x344\x3\x2\x2\x2\x46\x362\x3\x2\x2\x2H\x393\x3\x2\x2\x2J\x3B5\x3"+
		"\x2\x2\x2L\x3CB\x3\x2\x2\x2N\x3CF\x3\x2\x2\x2P\x3EC\x3\x2\x2\x2R\x3EE"+
		"\x3\x2\x2\x2T\x400\x3\x2\x2\x2V\x402\x3\x2\x2\x2X\x414\x3\x2\x2\x2Z\x422"+
		"\x3\x2\x2\x2\\\x426\x3\x2\x2\x2^\x435\x3\x2\x2\x2`\x43B\x3\x2\x2\x2\x62"+
		"\x447\x3\x2\x2\x2\x64\x453\x3\x2\x2\x2\x66\x457\x3\x2\x2\x2h\x46A\x3\x2"+
		"\x2\x2j\x476\x3\x2\x2\x2l\x482\x3\x2\x2\x2n\x494\x3\x2\x2\x2p\x4A6\x3"+
		"\x2\x2\x2r\x4B4\x3\x2\x2\x2t\x4C2\x3\x2\x2\x2v\x4C6\x3\x2\x2\x2x\x4CE"+
		"\x3\x2\x2\x2z\x4D8\x3\x2\x2\x2|\x4EC\x3\x2\x2\x2~\x500\x3\x2\x2\x2\x80"+
		"\x542\x3\x2\x2\x2\x82\x555\x3\x2\x2\x2\x84\x557\x3\x2\x2\x2\x86\x567\x3"+
		"\x2\x2\x2\x88\x58C\x3\x2\x2\x2\x8A\x5AD\x3\x2\x2\x2\x8C\x5CB\x3\x2\x2"+
		"\x2\x8E\x5E1\x3\x2\x2\x2\x90\x5F4\x3\x2\x2\x2\x92\x5F9\x3\x2\x2\x2\x94"+
		"\x60D\x3\x2\x2\x2\x96\x61E\x3\x2\x2\x2\x98\x620\x3\x2\x2\x2\x9A\x628\x3"+
		"\x2\x2\x2\x9C\x62A\x3\x2\x2\x2\x9E\x62E\x3\x2\x2\x2\xA0\x63A\x3\x2\x2"+
		"\x2\xA2\x646\x3\x2\x2\x2\xA4\x662\x3\x2\x2\x2\xA6\x66E\x3\x2\x2\x2\xA8"+
		"\x686\x3\x2\x2\x2\xAA\x6CE\x3\x2\x2\x2\xAC\x6D0\x3\x2\x2\x2\xAE\x6EE\x3"+
		"\x2\x2\x2\xB0\x6FB\x3\x2\x2\x2\xB2\x707\x3\x2\x2\x2\xB4\x713\x3\x2\x2"+
		"\x2\xB6\x718\x3\x2\x2\x2\xB8\x736\x3\x2\x2\x2\xBA\x743\x3\x2\x2\x2\xBC"+
		"\x755\x3\x2\x2\x2\xBE\x76F\x3\x2\x2\x2\xC0\x778\x3\x2\x2\x2\xC2\x77C\x3"+
		"\x2\x2\x2\xC4\x7C5\x3\x2\x2\x2\xC6\x86B\x3\x2\x2\x2\xC8\x874\x3\x2\x2"+
		"\x2\xCA\x882\x3\x2\x2\x2\xCC\x89D\x3\x2\x2\x2\xCE\x8AF\x3\x2\x2\x2\xD0"+
		"\x8BB\x3\x2\x2\x2\xD2\x8CD\x3\x2\x2\x2\xD4\x8DC\x3\x2\x2\x2\xD6\x8DE\x3"+
		"\x2\x2\x2\xD8\x8F4\x3\x2\x2\x2\xDA\x918\x3\x2\x2\x2\xDC\x91A\x3\x2\x2"+
		"\x2\xDE\x91F\x3\x2\x2\x2\xE0\x926\x3\x2\x2\x2\xE2\x92E\x3\x2\x2\x2\xE4"+
		"\x939\x3\x2\x2\x2\xE6\x93B\x3\x2\x2\x2\xE8\x93F\x3\x2\x2\x2\xEA\x943\x3"+
		"\x2\x2\x2\xEC\x947\x3\x2\x2\x2\xEE\x951\x3\x2\x2\x2\xF0\x954\x3\x2\x2"+
		"\x2\xF2\x957\x3\x2\x2\x2\xF4\x95F\x3\x2\x2\x2\xF6\x961\x3\x2\x2\x2\xF8"+
		"\x965\x3\x2\x2\x2\xFA\x96C\x3\x2\x2\x2\xFC\x98C\x3\x2\x2\x2\xFE\x9A1\x3"+
		"\x2\x2\x2\x100\x9A5\x3\x2\x2\x2\x102\x9C0\x3\x2\x2\x2\x104\x9DF\x3\x2"+
		"\x2\x2\x106\x9E7\x3\x2\x2\x2\x108\x9FA\x3\x2\x2\x2\x10A\xA0C\x3\x2\x2"+
		"\x2\x10C\xA0E\x3\x2\x2\x2\x10E\xA19\x3\x2\x2\x2\x110\xA2A\x3\x2\x2\x2"+
		"\x112\xA2C\x3\x2\x2\x2\x114\xA2E\x3\x2\x2\x2\x116\xA36\x3\x2\x2\x2\x118"+
		"\xA3E\x3\x2\x2\x2\x11A\xA49\x3\x2\x2\x2\x11C\xA4C\x3\x2\x2\x2\x11E\xA50"+
		"\x3\x2\x2\x2\x120\xA5C\x3\x2\x2\x2\x122\xA5E\x3\x2\x2\x2\x124\xA60\x3"+
		"\x2\x2\x2\x126\x127\x5\x4\x3\x2\x127\x128\a\x2\x2\x3\x128\x3\x3\x2\x2"+
		"\x2\x129\x12B\a\xD7\x2\x2\x12A\x129\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2"+
		"\x12B\x12F\x3\x2\x2\x2\x12C\x12E\a\xD5\x2\x2\x12D\x12C\x3\x2\x2\x2\x12E"+
		"\x131\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x138"+
		"\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x132\x134\x5\x6\x4\x2\x133\x135\a\xD5"+
		"\x2\x2\x134\x133\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x134\x3\x2\x2"+
		"\x2\x136\x137\x3\x2\x2\x2\x137\x139\x3\x2\x2\x2\x138\x132\x3\x2\x2\x2"+
		"\x138\x139\x3\x2\x2\x2\x139\x13B\x3\x2\x2\x2\x13A\x13C\x5\b\x5\x2\x13B"+
		"\x13A\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x140\x3\x2\x2\x2\x13D\x13F"+
		"\a\xD5\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x13E\x3"+
		"\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x144\x3\x2\x2\x2\x142\x140\x3\x2"+
		"\x2\x2\x143\x145\x5\n\x6\x2\x144\x143\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2"+
		"\x145\x149\x3\x2\x2\x2\x146\x148\a\xD5\x2\x2\x147\x146\x3\x2\x2\x2\x148"+
		"\x14B\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14D"+
		"\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14C\x14E\x5\f\a\x2\x14D\x14C\x3\x2"+
		"\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x152\x3\x2\x2\x2\x14F\x151\a\xD5\x2"+
		"\x2\x150\x14F\x3\x2\x2\x2\x151\x154\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2"+
		"\x152\x153\x3\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155"+
		"\x157\x5\x10\t\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x15B"+
		"\x3\x2\x2\x2\x158\x15A\a\xD5\x2\x2\x159\x158\x3\x2\x2\x2\x15A\x15D\x3"+
		"\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15F\x3\x2"+
		"\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x160\a\xD7\x2\x2\x15F\x15E\x3\x2\x2"+
		"\x2\x15F\x160\x3\x2\x2\x2\x160\x5\x3\x2\x2\x2\x161\x162\a\xB2\x2\x2\x162"+
		"\x163\a\xD7\x2\x2\x163\x164\a\xD1\x2\x2\x164\x165\a\xD7\x2\x2\x165\x166"+
		"\a\x1F\x2\x2\x166\a\x3\x2\x2\x2\x167\x169\a\x14\x2\x2\x168\x16A\a\xD5"+
		"\x2\x2\x169\x168\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x169\x3\x2\x2"+
		"\x2\x16B\x16C\x3\x2\x2\x2\x16C\x178\x3\x2\x2\x2\x16D\x16F\x5\x10A\x86"+
		"\x2\x16E\x170\a\xD7\x2\x2\x16F\x16E\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2"+
		"\x170\x171\x3\x2\x2\x2\x171\x173\a\xBD\x2\x2\x172\x174\a\xD7\x2\x2\x173"+
		"\x172\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176"+
		"\x5\x11C\x8F\x2\x176\x177\a\xD5\x2\x2\x177\x179\x3\x2\x2\x2\x178\x16D"+
		"\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3"+
		"\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17E\a\x41\x2\x2\x17D\x17F\a\xD5"+
		"\x2\x2\x17E\x17D\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x17E\x3\x2\x2"+
		"\x2\x180\x181\x3\x2\x2\x2\x181\t\x3\x2\x2\x2\x182\x184\x5\x16\f\x2\x183"+
		"\x185\a\xD5\x2\x2\x184\x183\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x184"+
		"\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x189\x3\x2\x2\x2\x188\x182\x3"+
		"\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2"+
		"\x2\x2\x18B\v\x3\x2\x2\x2\x18C\x18E\x5\xE\b\x2\x18D\x18F\a\xD5\x2\x2\x18E"+
		"\x18D\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191"+
		"\x3\x2\x2\x2\x191\x193\x3\x2\x2\x2\x192\x18C\x3\x2\x2\x2\x193\x194\x3"+
		"\x2\x2\x2\x194\x192\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195\r\x3\x2\x2"+
		"\x2\x196\x197\a|\x2\x2\x197\x198\a\xD7\x2\x2\x198\x19F\a\xD0\x2\x2\x199"+
		"\x19A\a~\x2\x2\x19A\x19B\a\xD7\x2\x2\x19B\x19F\t\x2\x2\x2\x19C\x19F\a"+
		"}\x2\x2\x19D\x19F\a\x7F\x2\x2\x19E\x196\x3\x2\x2\x2\x19E\x199\x3\x2\x2"+
		"\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19D\x3\x2\x2\x2\x19F\xF\x3\x2\x2\x2\x1A0"+
		"\x1A9\x5\x12\n\x2\x1A1\x1A3\a\xD5\x2\x2\x1A2\x1A1\x3\x2\x2\x2\x1A3\x1A4"+
		"\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A6\x3"+
		"\x2\x2\x2\x1A6\x1A8\x5\x12\n\x2\x1A7\x1A2\x3\x2\x2\x2\x1A8\x1AB\x3\x2"+
		"\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x11\x3\x2\x2\x2"+
		"\x1AB\x1A9\x3\x2\x2\x2\x1AC\x1B8\x5\x14\v\x2\x1AD\x1B8\x5,\x17\x2\x1AE"+
		"\x1B8\x5\x36\x1C\x2\x1AF\x1B8\x5> \x2\x1B0\x1B8\x5H%\x2\x1B1\x1B8\x5j"+
		"\x36\x2\x1B2\x1B8\x5\x86\x44\x2\x1B3\x1B8\x5\x88\x45\x2\x1B4\x1B8\x5\x8A"+
		"\x46\x2\x1B5\x1B8\x5\xB6\\\x2\x1B6\x1B8\x5\xBA^\x2\x1B7\x1AC\x3\x2\x2"+
		"\x2\x1B7\x1AD\x3\x2\x2\x2\x1B7\x1AE\x3\x2\x2\x2\x1B7\x1AF\x3\x2\x2\x2"+
		"\x1B7\x1B0\x3\x2\x2\x2\x1B7\x1B1\x3\x2\x2\x2\x1B7\x1B2\x3\x2\x2\x2\x1B7"+
		"\x1B3\x3\x2\x2\x2\x1B7\x1B4\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B6"+
		"\x3\x2\x2\x2\x1B8\x13\x3\x2\x2\x2\x1B9\x1BA\x5\x18\r\x2\x1BA\x15\x3\x2"+
		"\x2\x2\x1BB\x1BC\a\x10\x2\x2\x1BC\x1BD\a\xD7\x2\x2\x1BD\x1BF\x5\xE4s\x2"+
		"\x1BE\x1C0\a\xD7\x2\x2\x1BF\x1BE\x3\x2\x2\x2\x1BF\x1C0\x3\x2\x2\x2\x1C0"+
		"\x1C1\x3\x2\x2\x2\x1C1\x1C3\a\xBD\x2\x2\x1C2\x1C4\a\xD7\x2\x2\x1C3\x1C2"+
		"\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1D0\x5"+
		"\x11C\x8F\x2\x1C6\x1C8\a\xD7\x2\x2\x1C7\x1C6\x3\x2\x2\x2\x1C7\x1C8\x3"+
		"\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CB\a\x5\x2\x2\x1CA\x1CC\a\xD7\x2"+
		"\x2\x1CB\x1CA\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2"+
		"\x1CD\x1CF\x5\x11C\x8F\x2\x1CE\x1C7\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2"+
		"\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x17\x3\x2\x2\x2\x1D2"+
		"\x1D0\x3\x2\x2\x2\x1D3\x1DF\x5\x1A\xE\x2\x1D4\x1D6\a\xD5\x2\x2\x1D5\x1D4"+
		"\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D5\x3\x2\x2\x2\x1D7\x1D8\x3"+
		"\x2\x2\x2\x1D8\x1DA\x3\x2\x2\x2\x1D9\x1DB\a\xD7\x2\x2\x1DA\x1D9\x3\x2"+
		"\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DE\x5\x1A\xE"+
		"\x2\x1DD\x1D5\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2"+
		"\x1DF\x1E0\x3\x2\x2\x2\x1E0\x19\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E2"+
		"\x226\x5\x1C\xF\x2\x1E3\x226\x5\x16\f\x2\x1E4\x226\x5\x1E\x10\x2\x1E5"+
		"\x226\x5 \x11\x2\x1E6\x226\x5\"\x12\x2\x1E7\x226\x5$\x13\x2\x1E8\x226"+
		"\x5&\x14\x2\x1E9\x226\x5*\x16\x2\x1EA\x226\x5\x30\x19\x2\x1EB\x226\x5"+
		".\x18\x2\x1EC\x226\x5\x32\x1A\x2\x1ED\x226\x5\x34\x1B\x2\x1EE\x226\x5"+
		":\x1E\x2\x1EF\x226\x5<\x1F\x2\x1F0\x226\x5@!\x2\x1F1\x226\x5\xD4k\x2\x1F2"+
		"\x226\x5\x42\"\x2\x1F3\x226\x5\x44#\x2\x1F4\x226\x5\x46$\x2\x1F5\x226"+
		"\x5J&\x2\x1F6\x226\x5L\'\x2\x1F7\x226\x5N(\x2\x1F8\x226\x5P)\x2\x1F9\x226"+
		"\x5Z.\x2\x1FA\x226\x5\xDAn\x2\x1FB\x226\x5\\/\x2\x1FC\x226\x5^\x30\x2"+
		"\x1FD\x226\x5`\x31\x2\x1FE\x226\x5\x62\x32\x2\x1FF\x226\x5\x11A\x8E\x2"+
		"\x200\x226\x5\x64\x33\x2\x201\x226\x5\x66\x34\x2\x202\x226\x5h\x35\x2"+
		"\x203\x226\x5j\x36\x2\x204\x226\x5r:\x2\x205\x226\x5t;\x2\x206\x226\x5"+
		"v<\x2\x207\x226\x5x=\x2\x208\x226\x5z>\x2\x209\x226\x5|?\x2\x20A\x226"+
		"\x5~@\x2\x20B\x226\x5\x84\x43\x2\x20C\x226\x5\x8CG\x2\x20D\x226\x5\x8E"+
		"H\x2\x20E\x226\x5\x90I\x2\x20F\x226\x5\x92J\x2\x210\x226\x5\x96L\x2\x211"+
		"\x226\x5\x98M\x2\x212\x226\x5\x9AN\x2\x213\x226\x5\x9CO\x2\x214\x226\x5"+
		"\x9EP\x2\x215\x226\x5\xA0Q\x2\x216\x226\x5\xA2R\x2\x217\x226\x5\xA4S\x2"+
		"\x218\x226\x5\xA6T\x2\x219\x226\x5\xAEX\x2\x21A\x226\x5\xB0Y\x2\x21B\x226"+
		"\x5\xB2Z\x2\x21C\x226\x5\xB4[\x2\x21D\x226\x5\xB8]\x2\x21E\x226\x5\xC0"+
		"\x61\x2\x21F\x226\x5\xC2\x62\x2\x220\x226\x5\xC6\x64\x2\x221\x226\x5\xCC"+
		"g\x2\x222\x226\x5\xCEh\x2\x223\x226\x5\xD0i\x2\x224\x226\x5\xD2j\x2\x225"+
		"\x1E2\x3\x2\x2\x2\x225\x1E3\x3\x2\x2\x2\x225\x1E4\x3\x2\x2\x2\x225\x1E5"+
		"\x3\x2\x2\x2\x225\x1E6\x3\x2\x2\x2\x225\x1E7\x3\x2\x2\x2\x225\x1E8\x3"+
		"\x2\x2\x2\x225\x1E9\x3\x2\x2\x2\x225\x1EA\x3\x2\x2\x2\x225\x1EB\x3\x2"+
		"\x2\x2\x225\x1EC\x3\x2\x2\x2\x225\x1ED\x3\x2\x2\x2\x225\x1EE\x3\x2\x2"+
		"\x2\x225\x1EF\x3\x2\x2\x2\x225\x1F0\x3\x2\x2\x2\x225\x1F1\x3\x2\x2\x2"+
		"\x225\x1F2\x3\x2\x2\x2\x225\x1F3\x3\x2\x2\x2\x225\x1F4\x3\x2\x2\x2\x225"+
		"\x1F5\x3\x2\x2\x2\x225\x1F6\x3\x2\x2\x2\x225\x1F7\x3\x2\x2\x2\x225\x1F8"+
		"\x3\x2\x2\x2\x225\x1F9\x3\x2\x2\x2\x225\x1FA\x3\x2\x2\x2\x225\x1FB\x3"+
		"\x2\x2\x2\x225\x1FC\x3\x2\x2\x2\x225\x1FD\x3\x2\x2\x2\x225\x1FE\x3\x2"+
		"\x2\x2\x225\x1FF\x3\x2\x2\x2\x225\x200\x3\x2\x2\x2\x225\x201\x3\x2\x2"+
		"\x2\x225\x202\x3\x2\x2\x2\x225\x203\x3\x2\x2\x2\x225\x204\x3\x2\x2\x2"+
		"\x225\x205\x3\x2\x2\x2\x225\x206\x3\x2\x2\x2\x225\x207\x3\x2\x2\x2\x225"+
		"\x208\x3\x2\x2\x2\x225\x209\x3\x2\x2\x2\x225\x20A\x3\x2\x2\x2\x225\x20B"+
		"\x3\x2\x2\x2\x225\x20C\x3\x2\x2\x2\x225\x20D\x3\x2\x2\x2\x225\x20E\x3"+
		"\x2\x2\x2\x225\x20F\x3\x2\x2\x2\x225\x210\x3\x2\x2\x2\x225\x211\x3\x2"+
		"\x2\x2\x225\x212\x3\x2\x2\x2\x225\x213\x3\x2\x2\x2\x225\x214\x3\x2\x2"+
		"\x2\x225\x215\x3\x2\x2\x2\x225\x216\x3\x2\x2\x2\x225\x217\x3\x2\x2\x2"+
		"\x225\x218\x3\x2\x2\x2\x225\x219\x3\x2\x2\x2\x225\x21A\x3\x2\x2\x2\x225"+
		"\x21B\x3\x2\x2\x2\x225\x21C\x3\x2\x2\x2\x225\x21D\x3\x2\x2\x2\x225\x21E"+
		"\x3\x2\x2\x2\x225\x21F\x3\x2\x2\x2\x225\x220\x3\x2\x2\x2\x225\x221\x3"+
		"\x2\x2\x2\x225\x222\x3\x2\x2\x2\x225\x223\x3\x2\x2\x2\x225\x224\x3\x2"+
		"\x2\x2\x226\x1B\x3\x2\x2\x2\x227\x228\a\x11\x2\x2\x228\x229\a\xD7\x2\x2"+
		"\x229\x232\x5\xC4\x63\x2\x22A\x22C\a\xD7\x2\x2\x22B\x22A\x3\x2\x2\x2\x22B"+
		"\x22C\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22F\a\x5\x2\x2\x22E\x230"+
		"\a\xD7\x2\x2\x22F\x22E\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x231\x3"+
		"\x2\x2\x2\x231\x233\x5\xC4\x63\x2\x232\x22B\x3\x2\x2\x2\x232\x233\x3\x2"+
		"\x2\x2\x233\x1D\x3\x2\x2\x2\x234\x235\a\x15\x2\x2\x235\x1F\x3\x2\x2\x2"+
		"\x236\x237\a\x1D\x2\x2\x237\x238\a\xD7\x2\x2\x238\x239\x5\xC4\x63\x2\x239"+
		"!\x3\x2\x2\x2\x23A\x23B\a\x1E\x2\x2\x23B\x23C\a\xD7\x2\x2\x23C\x23D\x5"+
		"\xC4\x63\x2\x23D#\x3\x2\x2\x2\x23E\x24E\a \x2\x2\x23F\x240\a\xD7\x2\x2"+
		"\x240\x24B\x5\xC4\x63\x2\x241\x243\a\xD7\x2\x2\x242\x241\x3\x2\x2\x2\x242"+
		"\x243\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244\x246\a\x5\x2\x2\x245\x247"+
		"\a\xD7\x2\x2\x246\x245\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x248\x3"+
		"\x2\x2\x2\x248\x24A\x5\xC4\x63\x2\x249\x242\x3\x2\x2\x2\x24A\x24D\x3\x2"+
		"\x2\x2\x24B\x249\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24F\x3\x2\x2"+
		"\x2\x24D\x24B\x3\x2\x2\x2\x24E\x23F\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2"+
		"\x24F%\x3\x2\x2\x2\x250\x251\x5\x122\x92\x2\x251\x252\a\xD7\x2\x2\x252"+
		"\x254\x3\x2\x2\x2\x253\x250\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x255"+
		"\x3\x2\x2\x2\x255\x256\a\"\x2\x2\x256\x257\a\xD7\x2\x2\x257\x262\x5(\x15"+
		"\x2\x258\x25A\a\xD7\x2\x2\x259\x258\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2"+
		"\x25A\x25B\x3\x2\x2\x2\x25B\x25D\a\x5\x2\x2\x25C\x25E\a\xD7\x2\x2\x25D"+
		"\x25C\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x261"+
		"\x5(\x15\x2\x260\x259\x3\x2\x2\x2\x261\x264\x3\x2\x2\x2\x262\x260\x3\x2"+
		"\x2\x2\x262\x263\x3\x2\x2\x2\x263\'\x3\x2\x2\x2\x264\x262\x3\x2\x2\x2"+
		"\x265\x267\x5\x10A\x86\x2\x266\x268\x5\x120\x91\x2\x267\x266\x3\x2\x2"+
		"\x2\x267\x268\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269\x26A\a\xD7\x2\x2"+
		"\x26A\x26C\x5\x10C\x87\x2\x26B\x269\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2"+
		"\x26C\x26E\x3\x2\x2\x2\x26D\x26F\a\xD7\x2\x2\x26E\x26D\x3\x2\x2\x2\x26E"+
		"\x26F\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x272\a\xBD\x2\x2\x271\x273"+
		"\a\xD7\x2\x2\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x3"+
		"\x2\x2\x2\x274\x275\x5\xC4\x63\x2\x275)\x3\x2\x2\x2\x276\x278\a$\x2\x2"+
		"\x277\x279\a\xD7\x2\x2\x278\x277\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279"+
		"\x27A\x3\x2\x2\x2\x27A\x27C\a\xBD\x2\x2\x27B\x27D\a\xD7\x2\x2\x27C\x27B"+
		"\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x27F\x5"+
		"\xC4\x63\x2\x27F+\x3\x2\x2\x2\x280\x281\x5\x122\x92\x2\x281\x282\a\xD7"+
		"\x2\x2\x282\x284\x3\x2\x2\x2\x283\x280\x3\x2\x2\x2\x283\x284\x3\x2\x2"+
		"\x2\x284\x285\x3\x2\x2\x2\x285\x286\a%\x2\x2\x286\x287\a\xD7\x2\x2\x287"+
		"\x288\t\x3\x2\x2\x288\x289\a\xD7\x2\x2\x289\x28A\x5\x10A\x86\x2\x28A\x28B"+
		"\a\xD7\x2\x2\x28B\x28C\a\x63\x2\x2\x28C\x28D\a\xD7\x2\x2\x28D\x292\a\xCD"+
		"\x2\x2\x28E\x28F\a\xD7\x2\x2\x28F\x290\a\xE\x2\x2\x290\x291\a\xD7\x2\x2"+
		"\x291\x293\a\xCD\x2\x2\x292\x28E\x3\x2\x2\x2\x292\x293\x3\x2\x2\x2\x293"+
		"\x298\x3\x2\x2\x2\x294\x296\a\xD7\x2\x2\x295\x294\x3\x2\x2\x2\x295\x296"+
		"\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x299\x5\x100\x81\x2\x298\x295"+
		"\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29C\x3\x2\x2\x2\x29A\x29B\a\xD7"+
		"\x2\x2\x29B\x29D\x5\x10C\x87\x2\x29C\x29A\x3\x2\x2\x2\x29C\x29D\x3\x2"+
		"\x2\x2\x29D-\x3\x2\x2\x2\x29E\x29F\t\x4\x2\x2\x29F\x2A0\a\xD7\x2\x2\x2A0"+
		"\x2AB\x5\x118\x8D\x2\x2A1\x2A3\a\xD7\x2\x2\x2A2\x2A1\x3\x2\x2\x2\x2A2"+
		"\x2A3\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2A6\a\x5\x2\x2\x2A5\x2A7"+
		"\a\xD7\x2\x2\x2A6\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A8\x3"+
		"\x2\x2\x2\x2A8\x2AA\x5\x118\x8D\x2\x2A9\x2A2\x3\x2\x2\x2\x2AA\x2AD\x3"+
		"\x2\x2\x2\x2AB\x2A9\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC/\x3\x2\x2\x2"+
		"\x2AD\x2AB\x3\x2\x2\x2\x2AE\x2AF\a\x32\x2\x2\x2AF\x2B0\a\xD7\x2\x2\x2B0"+
		"\x2B2\x5\xC4\x63\x2\x2B1\x2B3\a\xD7\x2\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3"+
		"\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B6\a\x5\x2\x2\x2B5\x2B7\a\xD7"+
		"\x2\x2\x2B6\x2B5\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2"+
		"\x2\x2B8\x2C1\x5\xC4\x63\x2\x2B9\x2BB\a\xD7\x2\x2\x2BA\x2B9\x3\x2\x2\x2"+
		"\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BE\a\x5\x2\x2\x2BD"+
		"\x2BF\a\xD7\x2\x2\x2BE\x2BD\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C0"+
		"\x3\x2\x2\x2\x2C0\x2C2\x5\xC4\x63\x2\x2C1\x2BA\x3\x2\x2\x2\x2C1\x2C2\x3"+
		"\x2\x2\x2\x2C2\x31\x3\x2\x2\x2\x2C3\x2C5\a\x34\x2\x2\x2C4\x2C6\a\xD5\x2"+
		"\x2\x2C5\x2C4\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2"+
		"\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2CF\x3\x2\x2\x2\x2C9\x2CB\x5\x18\r\x2\x2CA"+
		"\x2CC\a\xD5\x2\x2\x2CB\x2CA\x3\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2CB"+
		"\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2D0\x3\x2\x2\x2\x2CF\x2C9\x3"+
		"\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2F9\a`\x2"+
		"\x2\x2D2\x2D3\a\x34\x2\x2\x2D3\x2D4\a\xD7\x2\x2\x2D4\x2D5\t\x5\x2\x2\x2D5"+
		"\x2D6\a\xD7\x2\x2\x2D6\x2D8\x5\xC4\x63\x2\x2D7\x2D9\a\xD5\x2\x2\x2D8\x2D7"+
		"\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DA\x2DB\x3"+
		"\x2\x2\x2\x2DB\x2E2\x3\x2\x2\x2\x2DC\x2DE\x5\x18\r\x2\x2DD\x2DF\a\xD5"+
		"\x2\x2\x2DE\x2DD\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2DE\x3\x2\x2"+
		"\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2E3\x3\x2\x2\x2\x2E2\x2DC\x3\x2\x2\x2"+
		"\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E5\a`\x2\x2\x2E5\x2F9"+
		"\x3\x2\x2\x2\x2E6\x2E8\a\x34\x2\x2\x2E7\x2E9\a\xD5\x2\x2\x2E8\x2E7\x3"+
		"\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2E8\x3\x2\x2\x2\x2EA\x2EB\x3\x2"+
		"\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EE\x5\x18\r\x2\x2ED\x2EF\a\xD5\x2"+
		"\x2\x2EE\x2ED\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2EE\x3\x2\x2\x2"+
		"\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3\a`\x2\x2\x2F3\x2F4"+
		"\a\xD7\x2\x2\x2F4\x2F5\t\x5\x2\x2\x2F5\x2F6\a\xD7\x2\x2\x2F6\x2F7\x5\xC4"+
		"\x63\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8\x2C3\x3\x2\x2\x2\x2F8\x2D2\x3\x2\x2"+
		"\x2\x2F8\x2E6\x3\x2\x2\x2\x2F9\x33\x3\x2\x2\x2\x2FA\x2FB\a\x41\x2\x2\x2FB"+
		"\x35\x3\x2\x2\x2\x2FC\x2FD\x5\x122\x92\x2\x2FD\x2FE\a\xD7\x2\x2\x2FE\x300"+
		"\x3\x2\x2\x2\x2FF\x2FC\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x301\x3"+
		"\x2\x2\x2\x301\x302\a\x42\x2\x2\x302\x303\a\xD7\x2\x2\x303\x305\x5\x10A"+
		"\x86\x2\x304\x306\a\xD5\x2\x2\x305\x304\x3\x2\x2\x2\x306\x307\x3\x2\x2"+
		"\x2\x307\x305\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2\x308\x30C\x3\x2\x2\x2"+
		"\x309\x30B\x5\x38\x1D\x2\x30A\x309\x3\x2\x2\x2\x30B\x30E\x3\x2\x2\x2\x30C"+
		"\x30A\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30F\x3\x2\x2\x2\x30E\x30C"+
		"\x3\x2\x2\x2\x30F\x310\a\x39\x2\x2\x310\x37\x3\x2\x2\x2\x311\x31A\x5\x10A"+
		"\x86\x2\x312\x314\a\xD7\x2\x2\x313\x312\x3\x2\x2\x2\x313\x314\x3\x2\x2"+
		"\x2\x314\x315\x3\x2\x2\x2\x315\x317\a\xBD\x2\x2\x316\x318\a\xD7\x2\x2"+
		"\x317\x316\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319"+
		"\x31B\x5\xC4\x63\x2\x31A\x313\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x31D"+
		"\x3\x2\x2\x2\x31C\x31E\a\xD5\x2\x2\x31D\x31C\x3\x2\x2\x2\x31E\x31F\x3"+
		"\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x39\x3\x2\x2"+
		"\x2\x321\x322\a\x44\x2\x2\x322\x323\a\xD7\x2\x2\x323\x324\x5\xC4\x63\x2"+
		"\x324;\x3\x2\x2\x2\x325\x326\a\x45\x2\x2\x326\x327\a\xD7\x2\x2\x327\x328"+
		"\x5\xC4\x63\x2\x328=\x3\x2\x2\x2\x329\x32A\x5\x122\x92\x2\x32A\x32B\a"+
		"\xD7\x2\x2\x32B\x32D\x3\x2\x2\x2\x32C\x329\x3\x2\x2\x2\x32C\x32D\x3\x2"+
		"\x2\x2\x32D\x32E\x3\x2\x2\x2\x32E\x32F\a\x46\x2\x2\x32F\x330\a\xD7\x2"+
		"\x2\x330\x332\x5\x10A\x86\x2\x331\x333\a\xD7\x2\x2\x332\x331\x3\x2\x2"+
		"\x2\x332\x333\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334\x335\x5\x100\x81"+
		"\x2\x335?\x3\x2\x2\x2\x336\x337\t\x6\x2\x2\x337\x41\x3\x2\x2\x2\x338\x339"+
		"\aM\x2\x2\x339\x33A\a\xD7\x2\x2\x33A\x33C\x5\xC4\x63\x2\x33B\x33D\a\xD7"+
		"\x2\x2\x33C\x33B\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\x3\x2\x2"+
		"\x2\x33E\x340\a\x5\x2\x2\x33F\x341\a\xD7\x2\x2\x340\x33F\x3\x2\x2\x2\x340"+
		"\x341\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342\x343\x5\xC4\x63\x2\x343\x43"+
		"\x3\x2\x2\x2\x344\x345\aO\x2\x2\x345\x346\a\xD7\x2\x2\x346\x347\a\x36"+
		"\x2\x2\x347\x348\a\xD7\x2\x2\x348\x34A\x5\x10A\x86\x2\x349\x34B\x5\x120"+
		"\x91\x2\x34A\x349\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34B\x34C\x3\x2\x2"+
		"\x2\x34C\x34D\a\xD7\x2\x2\x34D\x34E\aX\x2\x2\x34E\x34F\a\xD7\x2\x2\x34F"+
		"\x351\x5\xC4\x63\x2\x350\x352\a\xD5\x2\x2\x351\x350\x3\x2\x2\x2\x352\x353"+
		"\x3\x2\x2\x2\x353\x351\x3\x2\x2\x2\x353\x354\x3\x2\x2\x2\x354\x35B\x3"+
		"\x2\x2\x2\x355\x357\x5\x18\r\x2\x356\x358\a\xD5\x2\x2\x357\x356\x3\x2"+
		"\x2\x2\x358\x359\x3\x2\x2\x2\x359\x357\x3\x2\x2\x2\x359\x35A\x3\x2\x2"+
		"\x2\x35A\x35C\x3\x2\x2\x2\x35B\x355\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2"+
		"\x35C\x35D\x3\x2\x2\x2\x35D\x360\as\x2\x2\x35E\x35F\a\xD7\x2\x2\x35F\x361"+
		"\x5\x10A\x86\x2\x360\x35E\x3\x2\x2\x2\x360\x361\x3\x2\x2\x2\x361\x45\x3"+
		"\x2\x2\x2\x362\x363\aO\x2\x2\x363\x364\a\xD7\x2\x2\x364\x366\x5\x10A\x86"+
		"\x2\x365\x367\x5\x120\x91\x2\x366\x365\x3\x2\x2\x2\x366\x367\x3\x2\x2"+
		"\x2\x367\x36A\x3\x2\x2\x2\x368\x369\a\xD7\x2\x2\x369\x36B\x5\x10C\x87"+
		"\x2\x36A\x368\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x36D\x3\x2\x2\x2"+
		"\x36C\x36E\a\xD7\x2\x2\x36D\x36C\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E"+
		"\x36F\x3\x2\x2\x2\x36F\x371\a\xBD\x2\x2\x370\x372\a\xD7\x2\x2\x371\x370"+
		"\x3\x2\x2\x2\x371\x372\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x374\x5"+
		"\xC4\x63\x2\x374\x375\a\xD7\x2\x2\x375\x376\a\xAA\x2\x2\x376\x377\a\xD7"+
		"\x2\x2\x377\x37C\x5\xC4\x63\x2\x378\x379\a\xD7\x2\x2\x379\x37A\a\xA2\x2"+
		"\x2\x37A\x37B\a\xD7\x2\x2\x37B\x37D\x5\xC4\x63\x2\x37C\x378\x3\x2\x2\x2"+
		"\x37C\x37D\x3\x2\x2\x2\x37D\x37F\x3\x2\x2\x2\x37E\x380\a\xD5\x2\x2\x37F"+
		"\x37E\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381\x37F\x3\x2\x2\x2\x381\x382"+
		"\x3\x2\x2\x2\x382\x389\x3\x2\x2\x2\x383\x385\x5\x18\r\x2\x384\x386\a\xD5"+
		"\x2\x2\x385\x384\x3\x2\x2\x2\x386\x387\x3\x2\x2\x2\x387\x385\x3\x2\x2"+
		"\x2\x387\x388\x3\x2\x2\x2\x388\x38A\x3\x2\x2\x2\x389\x383\x3\x2\x2\x2"+
		"\x389\x38A\x3\x2\x2\x2\x38A\x38B\x3\x2\x2\x2\x38B\x38E\as\x2\x2\x38C\x38D"+
		"\a\xD7\x2\x2\x38D\x38F\x5\x10A\x86\x2\x38E\x38C\x3\x2\x2\x2\x38E\x38F"+
		"\x3\x2\x2\x2\x38FG\x3\x2\x2\x2\x390\x391\x5\x122\x92\x2\x391\x392\a\xD7"+
		"\x2\x2\x392\x394\x3\x2\x2\x2\x393\x390\x3\x2\x2\x2\x393\x394\x3\x2\x2"+
		"\x2\x394\x397\x3\x2\x2\x2\x395\x396\a\xA1\x2\x2\x396\x398\a\xD7\x2\x2"+
		"\x397\x395\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399"+
		"\x39A\aP\x2\x2\x39A\x39B\a\xD7\x2\x2\x39B\x3A0\x5\x10A\x86\x2\x39C\x39E"+
		"\a\xD7\x2\x2\x39D\x39C\x3\x2\x2\x2\x39D\x39E\x3\x2\x2\x2\x39E\x39F\x3"+
		"\x2\x2\x2\x39F\x3A1\x5\x100\x81\x2\x3A0\x39D\x3\x2\x2\x2\x3A0\x3A1\x3"+
		"\x2\x2\x2\x3A1\x3A4\x3\x2\x2\x2\x3A2\x3A3\a\xD7\x2\x2\x3A3\x3A5\x5\x10C"+
		"\x87\x2\x3A4\x3A2\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A7\x3\x2\x2"+
		"\x2\x3A6\x3A8\a\xD5\x2\x2\x3A7\x3A6\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2"+
		"\x3A9\x3A7\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3B1\x3\x2\x2\x2\x3AB"+
		"\x3AD\x5\x18\r\x2\x3AC\x3AE\a\xD5\x2\x2\x3AD\x3AC\x3\x2\x2\x2\x3AE\x3AF"+
		"\x3\x2\x2\x2\x3AF\x3AD\x3\x2\x2\x2\x3AF\x3B0\x3\x2\x2\x2\x3B0\x3B2\x3"+
		"\x2\x2\x2\x3B1\x3AB\x3\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B3\x3\x2"+
		"\x2\x2\x3B3\x3B4\a:\x2\x2\x3B4I\x3\x2\x2\x2\x3B5\x3B6\aQ\x2\x2\x3B6\x3B7"+
		"\a\xD7\x2\x2\x3B7\x3B9\x5\xC4\x63\x2\x3B8\x3BA\a\xD7\x2\x2\x3B9\x3B8\x3"+
		"\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BD\a\x5\x2"+
		"\x2\x3BC\x3BE\a\xD7\x2\x2\x3BD\x3BC\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2"+
		"\x3BE\x3C0\x3\x2\x2\x2\x3BF\x3C1\x5\xC4\x63\x2\x3C0\x3BF\x3\x2\x2\x2\x3C0"+
		"\x3C1\x3\x2\x2\x2\x3C1\x3C3\x3\x2\x2\x2\x3C2\x3C4\a\xD7\x2\x2\x3C3\x3C2"+
		"\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4\x3C5\x3\x2\x2\x2\x3C5\x3C7\a\x5"+
		"\x2\x2\x3C6\x3C8\a\xD7\x2\x2\x3C7\x3C6\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2"+
		"\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CA\x5\xC4\x63\x2\x3CAK\x3\x2\x2\x2\x3CB"+
		"\x3CC\aS\x2\x2\x3CC\x3CD\a\xD7\x2\x2\x3CD\x3CE\x5\xC4\x63\x2\x3CEM\x3"+
		"\x2\x2\x2\x3CF\x3D0\aT\x2\x2\x3D0\x3D1\a\xD7\x2\x2\x3D1\x3D2\x5\xC4\x63"+
		"\x2\x3D2O\x3\x2\x2\x2\x3D3\x3D4\aU\x2\x2\x3D4\x3D5\a\xD7\x2\x2\x3D5\x3D6"+
		"\x5T+\x2\x3D6\x3D7\a\xD7\x2\x2\x3D7\x3D8\a\xA8\x2\x2\x3D8\x3D9\a\xD7\x2"+
		"\x2\x3D9\x3DE\x5\x1A\xE\x2\x3DA\x3DB\a\xD7\x2\x2\x3DB\x3DC\a\x37\x2\x2"+
		"\x3DC\x3DD\a\xD7\x2\x2\x3DD\x3DF\x5\x1A\xE\x2\x3DE\x3DA\x3\x2\x2\x2\x3DE"+
		"\x3DF\x3\x2\x2\x2\x3DF\x3ED\x3\x2\x2\x2\x3E0\x3E4\x5R*\x2\x3E1\x3E3\x5"+
		"V,\x2\x3E2\x3E1\x3\x2\x2\x2\x3E3\x3E6\x3\x2\x2\x2\x3E4\x3E2\x3\x2\x2\x2"+
		"\x3E4\x3E5\x3\x2\x2\x2\x3E5\x3E8\x3\x2\x2\x2\x3E6\x3E4\x3\x2\x2\x2\x3E7"+
		"\x3E9\x5X-\x2\x3E8\x3E7\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3EA\x3"+
		"\x2\x2\x2\x3EA\x3EB\a;\x2\x2\x3EB\x3ED\x3\x2\x2\x2\x3EC\x3D3\x3\x2\x2"+
		"\x2\x3EC\x3E0\x3\x2\x2\x2\x3EDQ\x3\x2\x2\x2\x3EE\x3EF\aU\x2\x2\x3EF\x3F0"+
		"\a\xD7\x2\x2\x3F0\x3F1\x5T+\x2\x3F1\x3F2\a\xD7\x2\x2\x3F2\x3F4\a\xA8\x2"+
		"\x2\x3F3\x3F5\a\xD5\x2\x2\x3F4\x3F3\x3\x2\x2\x2\x3F5\x3F6\x3\x2\x2\x2"+
		"\x3F6\x3F4\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3FE\x3\x2\x2\x2\x3F8"+
		"\x3FA\x5\x18\r\x2\x3F9\x3FB\a\xD5\x2\x2\x3FA\x3F9\x3\x2\x2\x2\x3FB\x3FC"+
		"\x3\x2\x2\x2\x3FC\x3FA\x3\x2\x2\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\x3FF\x3"+
		"\x2\x2\x2\x3FE\x3F8\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FFS\x3\x2\x2\x2"+
		"\x400\x401\x5\xC4\x63\x2\x401U\x3\x2\x2\x2\x402\x403\a\x38\x2\x2\x403"+
		"\x404\a\xD7\x2\x2\x404\x405\x5T+\x2\x405\x406\a\xD7\x2\x2\x406\x408\a"+
		"\xA8\x2\x2\x407\x409\a\xD5\x2\x2\x408\x407\x3\x2\x2\x2\x409\x40A\x3\x2"+
		"\x2\x2\x40A\x408\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x412\x3\x2\x2"+
		"\x2\x40C\x40E\x5\x18\r\x2\x40D\x40F\a\xD5\x2\x2\x40E\x40D\x3\x2\x2\x2"+
		"\x40F\x410\x3\x2\x2\x2\x410\x40E\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411"+
		"\x413\x3\x2\x2\x2\x412\x40C\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413W\x3"+
		"\x2\x2\x2\x414\x416\a\x37\x2\x2\x415\x417\a\xD5\x2\x2\x416\x415\x3\x2"+
		"\x2\x2\x417\x418\x3\x2\x2\x2\x418\x416\x3\x2\x2\x2\x418\x419\x3\x2\x2"+
		"\x2\x419\x420\x3\x2\x2\x2\x41A\x41C\x5\x18\r\x2\x41B\x41D\a\xD5\x2\x2"+
		"\x41C\x41B\x3\x2\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x41C\x3\x2\x2\x2\x41E"+
		"\x41F\x3\x2\x2\x2\x41F\x421\x3\x2\x2\x2\x420\x41A\x3\x2\x2\x2\x420\x421"+
		"\x3\x2\x2\x2\x421Y\x3\x2\x2\x2\x422\x423\aW\x2\x2\x423\x424\a\xD7\x2\x2"+
		"\x424\x425\x5\x10A\x86\x2\x425[\x3\x2\x2\x2\x426\x427\aY\x2\x2\x427\x428"+
		"\a\xD7\x2\x2\x428\x431\x5\xC4\x63\x2\x429\x42B\a\xD7\x2\x2\x42A\x429\x3"+
		"\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x42E\a\x5\x2"+
		"\x2\x42D\x42F\a\xD7\x2\x2\x42E\x42D\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2"+
		"\x42F\x430\x3\x2\x2\x2\x430\x432\x5\xC4\x63\x2\x431\x42A\x3\x2\x2\x2\x432"+
		"\x433\x3\x2\x2\x2\x433\x431\x3\x2\x2\x2\x433\x434\x3\x2\x2\x2\x434]\x3"+
		"\x2\x2\x2\x435\x436\a\\\x2\x2\x436\x437\a\xD7\x2\x2\x437\x438\x5\xC4\x63"+
		"\x2\x438_\x3\x2\x2\x2\x439\x43A\a\x62\x2\x2\x43A\x43C\a\xD7\x2\x2\x43B"+
		"\x439\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2\x43D\x43F"+
		"\x5\xE4s\x2\x43E\x440\a\xD7\x2\x2\x43F\x43E\x3\x2\x2\x2\x43F\x440\x3\x2"+
		"\x2\x2\x440\x441\x3\x2\x2\x2\x441\x443\t\a\x2\x2\x442\x444\a\xD7\x2\x2"+
		"\x443\x442\x3\x2\x2\x2\x443\x444\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2\x445"+
		"\x446\x5\xC4\x63\x2\x446\x61\x3\x2\x2\x2\x447\x448\a\x65\x2\x2\x448\x449"+
		"\a\xD7\x2\x2\x449\x44B\x5\xC4\x63\x2\x44A\x44C\a\xD7\x2\x2\x44B\x44A\x3"+
		"\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D\x44F\a\x5\x2"+
		"\x2\x44E\x450\a\xD7\x2\x2\x44F\x44E\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2"+
		"\x450\x451\x3\x2\x2\x2\x451\x452\x5\xC4\x63\x2\x452\x63\x3\x2\x2\x2\x453"+
		"\x454\a]\x2\x2\x454\x455\a\xD7\x2\x2\x455\x456\x5\xC4\x63\x2\x456\x65"+
		"\x3\x2\x2\x2\x457\x458\a^\x2\x2\x458\x459\a\xD7\x2\x2\x459\x468\x5\xC4"+
		"\x63\x2\x45A\x45C\a\xD7\x2\x2\x45B\x45A\x3\x2\x2\x2\x45B\x45C\x3\x2\x2"+
		"\x2\x45C\x45D\x3\x2\x2\x2\x45D\x45F\a\x5\x2\x2\x45E\x460\a\xD7\x2\x2\x45F"+
		"\x45E\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x466"+
		"\x5\xC4\x63\x2\x462\x463\a\xD7\x2\x2\x463\x464\a\xAA\x2\x2\x464\x465\a"+
		"\xD7\x2\x2\x465\x467\x5\xC4\x63\x2\x466\x462\x3\x2\x2\x2\x466\x467\x3"+
		"\x2\x2\x2\x467\x469\x3\x2\x2\x2\x468\x45B\x3\x2\x2\x2\x468\x469\x3\x2"+
		"\x2\x2\x469g\x3\x2\x2\x2\x46A\x46B\ai\x2\x2\x46B\x46C\a\xD7\x2\x2\x46C"+
		"\x46E\x5\xE4s\x2\x46D\x46F\a\xD7\x2\x2\x46E\x46D\x3\x2\x2\x2\x46E\x46F"+
		"\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x472\a\xBD\x2\x2\x471\x473\a\xD7"+
		"\x2\x2\x472\x471\x3\x2\x2\x2\x472\x473\x3\x2\x2\x2\x473\x474\x3\x2\x2"+
		"\x2\x474\x475\x5\xC4\x63\x2\x475i\x3\x2\x2\x2\x476\x47A\x5l\x37\x2\x477"+
		"\x479\x5n\x38\x2\x478\x477\x3\x2\x2\x2\x479\x47C\x3\x2\x2\x2\x47A\x478"+
		"\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47E\x3\x2\x2\x2\x47C\x47A\x3"+
		"\x2\x2\x2\x47D\x47F\x5p\x39\x2\x47E\x47D\x3\x2\x2\x2\x47E\x47F\x3\x2\x2"+
		"\x2\x47F\x480\x3\x2\x2\x2\x480\x481\am\x2\x2\x481k\x3\x2\x2\x2\x482\x483"+
		"\aj\x2\x2\x483\x484\a\xD7\x2\x2\x484\x485\x5T+\x2\x485\x486\a\xD7\x2\x2"+
		"\x486\x488\a\xA8\x2\x2\x487\x489\a\xD5\x2\x2\x488\x487\x3\x2\x2\x2\x489"+
		"\x48A\x3\x2\x2\x2\x48A\x488\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x492"+
		"\x3\x2\x2\x2\x48C\x48E\x5\x10\t\x2\x48D\x48F\a\xD5\x2\x2\x48E\x48D\x3"+
		"\x2\x2\x2\x48F\x490\x3\x2\x2\x2\x490\x48E\x3\x2\x2\x2\x490\x491\x3\x2"+
		"\x2\x2\x491\x493\x3\x2\x2\x2\x492\x48C\x3\x2\x2\x2\x492\x493\x3\x2\x2"+
		"\x2\x493m\x3\x2\x2\x2\x494\x495\ak\x2\x2\x495\x496\a\xD7\x2\x2\x496\x497"+
		"\x5T+\x2\x497\x498\a\xD7\x2\x2\x498\x49A\a\xA8\x2\x2\x499\x49B\a\xD5\x2"+
		"\x2\x49A\x499\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x49A\x3\x2\x2\x2"+
		"\x49C\x49D\x3\x2\x2\x2\x49D\x4A4\x3\x2\x2\x2\x49E\x4A0\x5\x10\t\x2\x49F"+
		"\x4A1\a\xD5\x2\x2\x4A0\x49F\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2\x4A2\x4A0"+
		"\x3\x2\x2\x2\x4A2\x4A3\x3\x2\x2\x2\x4A3\x4A5\x3\x2\x2\x2\x4A4\x49E\x3"+
		"\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5o\x3\x2\x2\x2\x4A6\x4A8\al\x2\x2\x4A7"+
		"\x4A9\a\xD5\x2\x2\x4A8\x4A7\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA\x4A8"+
		"\x3\x2\x2\x2\x4AA\x4AB\x3\x2\x2\x2\x4AB\x4B2\x3\x2\x2\x2\x4AC\x4AE\x5"+
		"\x10\t\x2\x4AD\x4AF\a\xD5\x2\x2\x4AE\x4AD\x3\x2\x2\x2\x4AF\x4B0\x3\x2"+
		"\x2\x2\x4B0\x4AE\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2\x2\x4B1\x4B3\x3\x2\x2"+
		"\x2\x4B2\x4AC\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3q\x3\x2\x2\x2\x4B4"+
		"\x4B6\ao\x2\x2\x4B5\x4B7\a\xD7\x2\x2\x4B6\x4B5\x3\x2\x2\x2\x4B6\x4B7\x3"+
		"\x2\x2\x2\x4B7\x4B8\x3\x2\x2\x2\x4B8\x4BA\a\xC1\x2\x2\x4B9\x4BB\a\xD7"+
		"\x2\x2\x4BA\x4B9\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2"+
		"\x2\x4BC\x4BE\x5\xFC\x7F\x2\x4BD\x4BF\a\xD7\x2\x2\x4BE\x4BD\x3\x2\x2\x2"+
		"\x4BE\x4BF\x3\x2\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C1\a\xCA\x2\x2\x4C1"+
		"s\x3\x2\x2\x2\x4C2\x4C3\ap\x2\x2\x4C3\x4C4\a\xD7\x2\x2\x4C4\x4C5\x5\xC4"+
		"\x63\x2\x4C5u\x3\x2\x2\x2\x4C6\x4C7\ar\x2\x2\x4C7\x4C8\a\xD7\x2\x2\x4C8"+
		"\x4C9\x5\xC4\x63\x2\x4C9\x4CA\a\xD7\x2\x2\x4CA\x4CB\a\x13\x2\x2\x4CB\x4CC"+
		"\a\xD7\x2\x2\x4CC\x4CD\x5\xC4\x63\x2\x4CDw\x3\x2\x2\x2\x4CE\x4CF\ay\x2"+
		"\x2\x4CF\x4D6\a\xD7\x2\x2\x4D0\x4D1\aT\x2\x2\x4D1\x4D2\a\xD7\x2\x2\x4D2"+
		"\x4D7\x5\xC4\x63\x2\x4D3\x4D4\a\x93\x2\x2\x4D4\x4D5\a\xD7\x2\x2\x4D5\x4D7"+
		"\as\x2\x2\x4D6\x4D0\x3\x2\x2\x2\x4D6\x4D3\x3\x2\x2\x2\x4D7y\x3\x2\x2\x2"+
		"\x4D8\x4D9\ax\x2\x2\x4D9\x4DA\a\xD7\x2\x2\x4DA\x4DB\x5\xC4\x63\x2\x4DB"+
		"\x4DC\a\xD7\x2\x2\x4DC\x4DD\aT\x2\x2\x4DD\x4DE\a\xD7\x2\x2\x4DE\x4E9\x5"+
		"\xC4\x63\x2\x4DF\x4E1\a\xD7\x2\x2\x4E0\x4DF\x3\x2\x2\x2\x4E0\x4E1\x3\x2"+
		"\x2\x2\x4E1\x4E2\x3\x2\x2\x2\x4E2\x4E4\a\x5\x2\x2\x4E3\x4E5\a\xD7\x2\x2"+
		"\x4E4\x4E3\x3\x2\x2\x2\x4E4\x4E5\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6"+
		"\x4E8\x5\xC4\x63\x2\x4E7\x4E0\x3\x2\x2\x2\x4E8\x4EB\x3\x2\x2\x2\x4E9\x4E7"+
		"\x3\x2\x2\x2\x4E9\x4EA\x3\x2\x2\x2\x4EA{\x3\x2\x2\x2\x4EB\x4E9\x3\x2\x2"+
		"\x2\x4EC\x4ED\ax\x2\x2\x4ED\x4EE\a\xD7\x2\x2\x4EE\x4EF\x5\xC4\x63\x2\x4EF"+
		"\x4F0\a\xD7\x2\x2\x4F0\x4F1\aS\x2\x2\x4F1\x4F2\a\xD7\x2\x2\x4F2\x4FD\x5"+
		"\xC4\x63\x2\x4F3\x4F5\a\xD7\x2\x2\x4F4\x4F3\x3\x2\x2\x2\x4F4\x4F5\x3\x2"+
		"\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F8\a\x5\x2\x2\x4F7\x4F9\a\xD7\x2\x2"+
		"\x4F8\x4F7\x3\x2\x2\x2\x4F8\x4F9\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA"+
		"\x4FC\x5\xC4\x63\x2\x4FB\x4F4\x3\x2\x2\x2\x4FC\x4FF\x3\x2\x2\x2\x4FD\x4FB"+
		"\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE}\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2"+
		"\x2\x500\x501\az\x2\x2\x501\x502\a\xD7\x2\x2\x502\x503\x5\xC4\x63\x2\x503"+
		"\x504\a\xD7\x2\x2\x504\x505\aO\x2\x2\x505\x506\a\xD7\x2\x2\x506\x50B\t"+
		"\b\x2\x2\x507\x508\a\xD7\x2\x2\x508\x509\a\f\x2\x2\x509\x50A\a\xD7\x2"+
		"\x2\x50A\x50C\t\t\x2\x2\x50B\x507\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2\x50C"+
		"\x50F\x3\x2\x2\x2\x50D\x50E\a\xD7\x2\x2\x50E\x510\t\n\x2\x2\x50F\x50D"+
		"\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512\a\xD7"+
		"\x2\x2\x512\x513\a\x13\x2\x2\x513\x514\a\xD7\x2\x2\x514\x51F\x5\xC4\x63"+
		"\x2\x515\x516\a\xD7\x2\x2\x516\x518\a\x61\x2\x2\x517\x519\a\xD7\x2\x2"+
		"\x518\x517\x3\x2\x2\x2\x518\x519\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A"+
		"\x51C\a\xBD\x2\x2\x51B\x51D\a\xD7\x2\x2\x51C\x51B\x3\x2\x2\x2\x51C\x51D"+
		"\x3\x2\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x520\x5\xC4\x63\x2\x51F\x515\x3"+
		"\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x7F\x3\x2\x2\x2\x521\x52E\x5\x82"+
		"\x42\x2\x522\x524\a\xD7\x2\x2\x523\x522\x3\x2\x2\x2\x523\x524\x3\x2\x2"+
		"\x2\x524\x525\x3\x2\x2\x2\x525\x527\t\v\x2\x2\x526\x528\a\xD7\x2\x2\x527"+
		"\x526\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x52A\x3\x2\x2\x2\x529\x52B"+
		"\x5\x82\x42\x2\x52A\x529\x3\x2\x2\x2\x52A\x52B\x3\x2\x2\x2\x52B\x52D\x3"+
		"\x2\x2\x2\x52C\x523\x3\x2\x2\x2\x52D\x530\x3\x2\x2\x2\x52E\x52C\x3\x2"+
		"\x2\x2\x52E\x52F\x3\x2\x2\x2\x52F\x543\x3\x2\x2\x2\x530\x52E\x3\x2\x2"+
		"\x2\x531\x533\x5\x82\x42\x2\x532\x531\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2"+
		"\x533\x53E\x3\x2\x2\x2\x534\x536\a\xD7\x2\x2\x535\x534\x3\x2\x2\x2\x535"+
		"\x536\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x539\t\v\x2\x2\x538\x53A"+
		"\a\xD7\x2\x2\x539\x538\x3\x2\x2\x2\x539\x53A\x3\x2\x2\x2\x53A\x53C\x3"+
		"\x2\x2\x2\x53B\x53D\x5\x82\x42\x2\x53C\x53B\x3\x2\x2\x2\x53C\x53D\x3\x2"+
		"\x2\x2\x53D\x53F\x3\x2\x2\x2\x53E\x535\x3\x2\x2\x2\x53F\x540\x3\x2\x2"+
		"\x2\x540\x53E\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x543\x3\x2\x2\x2"+
		"\x542\x521\x3\x2\x2\x2\x542\x532\x3\x2\x2\x2\x543\x81\x3\x2\x2\x2\x544"+
		"\x556\x5\xC4\x63\x2\x545\x553\t\f\x2\x2\x546\x548\a\xD7\x2\x2\x547\x546"+
		"\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54B\a\xC1"+
		"\x2\x2\x54A\x54C\a\xD7\x2\x2\x54B\x54A\x3\x2\x2\x2\x54B\x54C\x3\x2\x2"+
		"\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54F\x5\xFC\x7F\x2\x54E\x550\a\xD7\x2\x2"+
		"\x54F\x54E\x3\x2\x2\x2\x54F\x550\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551"+
		"\x552\a\xCA\x2\x2\x552\x554\x3\x2\x2\x2\x553\x547\x3\x2\x2\x2\x553\x554"+
		"\x3\x2\x2\x2\x554\x556\x3\x2\x2\x2\x555\x544\x3\x2\x2\x2\x555\x545\x3"+
		"\x2\x2\x2\x556\x83\x3\x2\x2\x2\x557\x558\a\x84\x2\x2\x558\x559\a\xD7\x2"+
		"\x2\x559\x55B\x5\xC4\x63\x2\x55A\x55C\a\xD7\x2\x2\x55B\x55A\x3\x2\x2\x2"+
		"\x55B\x55C\x3\x2\x2\x2\x55C\x55D\x3\x2\x2\x2\x55D\x562\a\x5\x2\x2\x55E"+
		"\x560\a\xD7\x2\x2\x55F\x55E\x3\x2\x2\x2\x55F\x560\x3\x2\x2\x2\x560\x561"+
		"\x3\x2\x2\x2\x561\x563\x5\x80\x41\x2\x562\x55F\x3\x2\x2\x2\x562\x563\x3"+
		"\x2\x2\x2\x563\x85\x3\x2\x2\x2\x564\x565\x5\x122\x92\x2\x565\x566\a\xD7"+
		"\x2\x2\x566\x568\x3\x2\x2\x2\x567\x564\x3\x2\x2\x2\x567\x568\x3\x2\x2"+
		"\x2\x568\x56B\x3\x2\x2\x2\x569\x56A\a\xA1\x2\x2\x56A\x56C\a\xD7\x2\x2"+
		"\x56B\x569\x3\x2\x2\x2\x56B\x56C\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D"+
		"\x56E\a\x86\x2\x2\x56E\x56F\a\xD7\x2\x2\x56F\x574\x5\x10A\x86\x2\x570"+
		"\x572\a\xD7\x2\x2\x571\x570\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x573"+
		"\x3\x2\x2\x2\x573\x575\x5\x100\x81\x2\x574\x571\x3\x2\x2\x2\x574\x575"+
		"\x3\x2\x2\x2\x575\x578\x3\x2\x2\x2\x576\x577\a\xD7\x2\x2\x577\x579\x5"+
		"\x10C\x87\x2\x578\x576\x3\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579\x57B\x3"+
		"\x2\x2\x2\x57A\x57C\a\xD5\x2\x2\x57B\x57A\x3\x2\x2\x2\x57C\x57D\x3\x2"+
		"\x2\x2\x57D\x57B\x3\x2\x2\x2\x57D\x57E\x3\x2\x2\x2\x57E\x585\x3\x2\x2"+
		"\x2\x57F\x581\x5\x18\r\x2\x580\x582\a\xD5\x2\x2\x581\x580\x3\x2\x2\x2"+
		"\x582\x583\x3\x2\x2\x2\x583\x581\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584"+
		"\x586\x3\x2\x2\x2\x585\x57F\x3\x2\x2\x2\x585\x586\x3\x2\x2\x2\x586\x587"+
		"\x3\x2\x2\x2\x587\x588\a<\x2\x2\x588\x87\x3\x2\x2\x2\x589\x58A\x5\x122"+
		"\x92\x2\x58A\x58B\a\xD7\x2\x2\x58B\x58D\x3\x2\x2\x2\x58C\x589\x3\x2\x2"+
		"\x2\x58C\x58D\x3\x2\x2\x2\x58D\x590\x3\x2\x2\x2\x58E\x58F\a\xA1\x2\x2"+
		"\x58F\x591\a\xD7\x2\x2\x590\x58E\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591"+
		"\x592\x3\x2\x2\x2\x592\x593\a\x88\x2\x2\x593\x594\a\xD7\x2\x2\x594\x599"+
		"\x5\x10A\x86\x2\x595\x597\a\xD7\x2\x2\x596\x595\x3\x2\x2\x2\x596\x597"+
		"\x3\x2\x2\x2\x597\x598\x3\x2\x2\x2\x598\x59A\x5\x100\x81\x2\x599\x596"+
		"\x3\x2\x2\x2\x599\x59A\x3\x2\x2\x2\x59A\x59C\x3\x2\x2\x2\x59B\x59D\a\xD5"+
		"\x2\x2\x59C\x59B\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\x59C\x3\x2\x2"+
		"\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5A6\x3\x2\x2\x2\x5A0\x5A2\x5\x18\r\x2"+
		"\x5A1\x5A3\a\xD5\x2\x2\x5A2\x5A1\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4"+
		"\x5A2\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A7\x3\x2\x2\x2\x5A6\x5A0"+
		"\x3\x2\x2\x2\x5A6\x5A7\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A9\a<"+
		"\x2\x2\x5A9\x89\x3\x2\x2\x2\x5AA\x5AB\x5\x122\x92\x2\x5AB\x5AC\a\xD7\x2"+
		"\x2\x5AC\x5AE\x3\x2\x2\x2\x5AD\x5AA\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2"+
		"\x5AE\x5B1\x3\x2\x2\x2\x5AF\x5B0\a\xA1\x2\x2\x5B0\x5B2\a\xD7\x2\x2\x5B1"+
		"\x5AF\x3\x2\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B4"+
		"\a\x87\x2\x2\x5B4\x5B5\a\xD7\x2\x2\x5B5\x5BA\x5\x10A\x86\x2\x5B6\x5B8"+
		"\a\xD7\x2\x2\x5B7\x5B6\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x5B9\x3"+
		"\x2\x2\x2\x5B9\x5BB\x5\x100\x81\x2\x5BA\x5B7\x3\x2\x2\x2\x5BA\x5BB\x3"+
		"\x2\x2\x2\x5BB\x5BD\x3\x2\x2\x2\x5BC\x5BE\a\xD5\x2\x2\x5BD\x5BC\x3\x2"+
		"\x2\x2\x5BE\x5BF\x3\x2\x2\x2\x5BF\x5BD\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2"+
		"\x2\x5C0\x5C7\x3\x2\x2\x2\x5C1\x5C3\x5\x18\r\x2\x5C2\x5C4\a\xD5\x2\x2"+
		"\x5C3\x5C2\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C3\x3\x2\x2\x2\x5C5"+
		"\x5C6\x3\x2\x2\x2\x5C6\x5C8\x3\x2\x2\x2\x5C7\x5C1\x3\x2\x2\x2\x5C7\x5C8"+
		"\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x5CA\a<\x2\x2\x5CA\x8B\x3\x2\x2"+
		"\x2\x5CB\x5CC\a\x8A\x2\x2\x5CC\x5CD\a\xD7\x2\x2\x5CD\x5CF\x5\xC4\x63\x2"+
		"\x5CE\x5D0\a\xD7\x2\x2\x5CF\x5CE\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0"+
		"\x5D1\x3\x2\x2\x2\x5D1\x5D3\a\x5\x2\x2\x5D2\x5D4\a\xD7\x2\x2\x5D3\x5D2"+
		"\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D6\x3\x2\x2\x2\x5D5\x5D7\x5"+
		"\xC4\x63\x2\x5D6\x5D5\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2\x2\x5D7\x5D9\x3\x2"+
		"\x2\x2\x5D8\x5DA\a\xD7\x2\x2\x5D9\x5D8\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2"+
		"\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DD\a\x5\x2\x2\x5DC\x5DE\a\xD7\x2\x2\x5DD"+
		"\x5DC\x3\x2\x2\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5E0"+
		"\x5\xC4\x63\x2\x5E0\x8D\x3\x2\x2\x2\x5E1\x5E2\a\x8D\x2\x2\x5E2\x5E3\a"+
		"\xD7\x2\x2\x5E3\x5F2\x5\x10A\x86\x2\x5E4\x5E6\a\xD7\x2\x2\x5E5\x5E4\x3"+
		"\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7\x5E9\a\xC1"+
		"\x2\x2\x5E8\x5EA\a\xD7\x2\x2\x5E9\x5E8\x3\x2\x2\x2\x5E9\x5EA\x3\x2\x2"+
		"\x2\x5EA\x5EF\x3\x2\x2\x2\x5EB\x5ED\x5\xFC\x7F\x2\x5EC\x5EE\a\xD7\x2\x2"+
		"\x5ED\x5EC\x3\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE\x5F0\x3\x2\x2\x2\x5EF"+
		"\x5EB\x3\x2\x2\x2\x5EF\x5F0\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F3"+
		"\a\xCA\x2\x2\x5F2\x5E5\x3\x2\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x8F\x3\x2"+
		"\x2\x2\x5F4\x5F7\a\x8C\x2\x2\x5F5\x5F6\a\xD7\x2\x2\x5F6\x5F8\x5\xC4\x63"+
		"\x2\x5F7\x5F5\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8\x91\x3\x2\x2\x2\x5F9"+
		"\x5FA\a\x90\x2\x2\x5FA\x5FD\a\xD7\x2\x2\x5FB\x5FC\a\x83\x2\x2\x5FC\x5FE"+
		"\a\xD7\x2\x2\x5FD\x5FB\x3\x2\x2\x2\x5FD\x5FE\x3\x2\x2\x2\x5FE\x5FF\x3"+
		"\x2\x2\x2\x5FF\x60A\x5\x94K\x2\x600\x602\a\xD7\x2\x2\x601\x600\x3\x2\x2"+
		"\x2\x601\x602\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603\x605\a\x5\x2\x2\x604"+
		"\x606\a\xD7\x2\x2\x605\x604\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x607"+
		"\x3\x2\x2\x2\x607\x609\x5\x94K\x2\x608\x601\x3\x2\x2\x2\x609\x60C\x3\x2"+
		"\x2\x2\x60A\x608\x3\x2\x2\x2\x60A\x60B\x3\x2\x2\x2\x60B\x93\x3\x2\x2\x2"+
		"\x60C\x60A\x3\x2\x2\x2\x60D\x60F\x5\xE4s\x2\x60E\x610\a\xD7\x2\x2\x60F"+
		"\x60E\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\x613"+
		"\a\xC1\x2\x2\x612\x614\a\xD7\x2\x2\x613\x612\x3\x2\x2\x2\x613\x614\x3"+
		"\x2\x2\x2\x614\x615\x3\x2\x2\x2\x615\x617\x5\x106\x84\x2\x616\x618\a\xD7"+
		"\x2\x2\x617\x616\x3\x2\x2\x2\x617\x618\x3\x2\x2\x2\x618\x619\x3\x2\x2"+
		"\x2\x619\x61C\a\xCA\x2\x2\x61A\x61B\a\xD7\x2\x2\x61B\x61D\x5\x10C\x87"+
		"\x2\x61C\x61A\x3\x2\x2\x2\x61C\x61D\x3\x2\x2\x2\x61D\x95\x3\x2\x2\x2\x61E"+
		"\x61F\a\x92\x2\x2\x61F\x97\x3\x2\x2\x2\x620\x626\a\x93\x2\x2\x621\x624"+
		"\a\xD7\x2\x2\x622\x625\as\x2\x2\x623\x625\x5\x10A\x86\x2\x624\x622\x3"+
		"\x2\x2\x2\x624\x623\x3\x2\x2\x2\x625\x627\x3\x2\x2\x2\x626\x621\x3\x2"+
		"\x2\x2\x626\x627\x3\x2\x2\x2\x627\x99\x3\x2\x2\x2\x628\x629\a\x94\x2\x2"+
		"\x629\x9B\x3\x2\x2\x2\x62A\x62B\a\x95\x2\x2\x62B\x62C\a\xD7\x2\x2\x62C"+
		"\x62D\x5\xC4\x63\x2\x62D\x9D\x3\x2\x2\x2\x62E\x62F\a\x96\x2\x2\x62F\x630"+
		"\a\xD7\x2\x2\x630\x632\x5\xE4s\x2\x631\x633\a\xD7\x2\x2\x632\x631\x3\x2"+
		"\x2\x2\x632\x633\x3\x2\x2\x2\x633\x634\x3\x2\x2\x2\x634\x636\a\xBD\x2"+
		"\x2\x635\x637\a\xD7\x2\x2\x636\x635\x3\x2\x2\x2\x636\x637\x3\x2\x2\x2"+
		"\x637\x638\x3\x2\x2\x2\x638\x639\x5\xC4\x63\x2\x639\x9F\x3\x2\x2\x2\x63A"+
		"\x63B\a\x97\x2\x2\x63B\x63C\a\xD7\x2\x2\x63C\x63E\x5\xC4\x63\x2\x63D\x63F"+
		"\a\xD7\x2\x2\x63E\x63D\x3\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x640\x3"+
		"\x2\x2\x2\x640\x642\a\x5\x2\x2\x641\x643\a\xD7\x2\x2\x642\x641\x3\x2\x2"+
		"\x2\x642\x643\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x645\x5\xC4\x63\x2"+
		"\x645\xA1\x3\x2\x2\x2\x646\x647\a\x98\x2\x2\x647\x648\a\xD7\x2\x2\x648"+
		"\x64A\x5\xC4\x63\x2\x649\x64B\a\xD7\x2\x2\x64A\x649\x3\x2\x2\x2\x64A\x64B"+
		"\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x64E\a\x5\x2\x2\x64D\x64F\a\xD7"+
		"\x2\x2\x64E\x64D\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x650\x3\x2\x2"+
		"\x2\x650\x652\x5\xC4\x63\x2\x651\x653\a\xD7\x2\x2\x652\x651\x3\x2\x2\x2"+
		"\x652\x653\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x656\a\x5\x2\x2\x655"+
		"\x657\a\xD7\x2\x2\x656\x655\x3\x2\x2\x2\x656\x657\x3\x2\x2\x2\x657\x658"+
		"\x3\x2\x2\x2\x658\x65A\x5\xC4\x63\x2\x659\x65B\a\xD7\x2\x2\x65A\x659\x3"+
		"\x2\x2\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65E\a\x5\x2"+
		"\x2\x65D\x65F\a\xD7\x2\x2\x65E\x65D\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2"+
		"\x65F\x660\x3\x2\x2\x2\x660\x661\x5\xC4\x63\x2\x661\xA3\x3\x2\x2\x2\x662"+
		"\x663\a\x99\x2\x2\x663\x664\a\xD7\x2\x2\x664\x666\x5\xC4\x63\x2\x665\x667"+
		"\a\xD7\x2\x2\x666\x665\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x668\x3"+
		"\x2\x2\x2\x668\x66A\a\x5\x2\x2\x669\x66B\a\xD7\x2\x2\x66A\x669\x3\x2\x2"+
		"\x2\x66A\x66B\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66D\x5\xC4\x63\x2"+
		"\x66D\xA5\x3\x2\x2\x2\x66E\x66F\a\x9A\x2\x2\x66F\x670\a\xD7\x2\x2\x670"+
		"\x671\a\x1C\x2\x2\x671\x672\a\xD7\x2\x2\x672\x674\x5\xC4\x63\x2\x673\x675"+
		"\a\xD5\x2\x2\x674\x673\x3\x2\x2\x2\x675\x676\x3\x2\x2\x2\x676\x674\x3"+
		"\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\x67B\x3\x2\x2\x2\x678\x67A\x5\xA8"+
		"U\x2\x679\x678\x3\x2\x2\x2\x67A\x67D\x3\x2\x2\x2\x67B\x679\x3\x2\x2\x2"+
		"\x67B\x67C\x3\x2\x2\x2\x67C\x67F\x3\x2\x2\x2\x67D\x67B\x3\x2\x2\x2\x67E"+
		"\x680\x5\xACW\x2\x67F\x67E\x3\x2\x2\x2\x67F\x680\x3\x2\x2\x2\x680\x682"+
		"\x3\x2\x2\x2\x681\x683\a\xD7\x2\x2\x682\x681\x3\x2\x2\x2\x682\x683\x3"+
		"\x2\x2\x2\x683\x684\x3\x2\x2\x2\x684\x685\a=\x2\x2\x685\xA7\x3\x2\x2\x2"+
		"\x686\x687\a\x1C\x2\x2\x687\x688\a\xD7\x2\x2\x688\x68A\x5\xAAV\x2\x689"+
		"\x68B\a\xD7\x2\x2\x68A\x689\x3\x2\x2\x2\x68A\x68B\x3\x2\x2\x2\x68B\x69A"+
		"\x3\x2\x2\x2\x68C\x68E\a\x6\x2\x2\x68D\x68C\x3\x2\x2\x2\x68D\x68E\x3\x2"+
		"\x2\x2\x68E\x692\x3\x2\x2\x2\x68F\x691\a\xD5\x2\x2\x690\x68F\x3\x2\x2"+
		"\x2\x691\x694\x3\x2\x2\x2\x692\x690\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2"+
		"\x693\x69B\x3\x2\x2\x2\x694\x692\x3\x2\x2\x2\x695\x697\a\xD5\x2\x2\x696"+
		"\x695\x3\x2\x2\x2\x697\x698\x3\x2\x2\x2\x698\x696\x3\x2\x2\x2\x698\x699"+
		"\x3\x2\x2\x2\x699\x69B\x3\x2\x2\x2\x69A\x68D\x3\x2\x2\x2\x69A\x696\x3"+
		"\x2\x2\x2\x69B\x6A2\x3\x2\x2\x2\x69C\x69E\x5\x18\r\x2\x69D\x69F\a\xD5"+
		"\x2\x2\x69E\x69D\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x69E\x3\x2\x2"+
		"\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A3\x3\x2\x2\x2\x6A2\x69C\x3\x2\x2\x2"+
		"\x6A2\x6A3\x3\x2\x2\x2\x6A3\xA9\x3\x2\x2\x2\x6A4\x6A6\aZ\x2\x2\x6A5\x6A7"+
		"\a\xD7\x2\x2\x6A6\x6A5\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2\x6A7\x6A8\x3"+
		"\x2\x2\x2\x6A8\x6AA\x5\x112\x8A\x2\x6A9\x6AB\a\xD7\x2\x2\x6AA\x6A9\x3"+
		"\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AD\x5\xC4"+
		"\x63\x2\x6AD\x6CF\x3\x2\x2\x2\x6AE\x6B9\x5\xC4\x63\x2\x6AF\x6B1\a\xD7"+
		"\x2\x2\x6B0\x6AF\x3\x2\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2"+
		"\x2\x6B2\x6B4\a\x5\x2\x2\x6B3\x6B5\a\xD7\x2\x2\x6B4\x6B3\x3\x2\x2\x2\x6B4"+
		"\x6B5\x3\x2\x2\x2\x6B5\x6B6\x3\x2\x2\x2\x6B6\x6B8\x5\xC4\x63\x2\x6B7\x6B0"+
		"\x3\x2\x2\x2\x6B8\x6BB\x3\x2\x2\x2\x6B9\x6B7\x3\x2\x2\x2\x6B9\x6BA\x3"+
		"\x2\x2\x2\x6BA\x6CF\x3\x2\x2\x2\x6BB\x6B9\x3\x2\x2\x2\x6BC\x6BD\a\xD0"+
		"\x2\x2\x6BD\x6BE\a\xD7\x2\x2\x6BE\x6BF\a\xAA\x2\x2\x6BF\x6C0\a\xD7\x2"+
		"\x2\x6C0\x6CB\x5\xC4\x63\x2\x6C1\x6C3\a\xD7\x2\x2\x6C2\x6C1\x3\x2\x2\x2"+
		"\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C6\a\x5\x2\x2\x6C5"+
		"\x6C7\a\xD7\x2\x2\x6C6\x6C5\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2\x2\x6C7\x6C8"+
		"\x3\x2\x2\x2\x6C8\x6CA\x5\xC4\x63\x2\x6C9\x6C2\x3\x2\x2\x2\x6CA\x6CD\x3"+
		"\x2\x2\x2\x6CB\x6C9\x3\x2\x2\x2\x6CB\x6CC\x3\x2\x2\x2\x6CC\x6CF\x3\x2"+
		"\x2\x2\x6CD\x6CB\x3\x2\x2\x2\x6CE\x6A4\x3\x2\x2\x2\x6CE\x6AE\x3\x2\x2"+
		"\x2\x6CE\x6BC\x3\x2\x2\x2\x6CF\xAB\x3\x2\x2\x2\x6D0\x6D1\a\x1C\x2\x2\x6D1"+
		"\x6D2\a\xD7\x2\x2\x6D2\x6D4\a\x37\x2\x2\x6D3\x6D5\a\xD7\x2\x2\x6D4\x6D3"+
		"\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6E4\x3\x2\x2\x2\x6D6\x6D8\a\x6"+
		"\x2\x2\x6D7\x6D6\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6DC\x3\x2\x2"+
		"\x2\x6D9\x6DB\a\xD5\x2\x2\x6DA\x6D9\x3\x2\x2\x2\x6DB\x6DE\x3\x2\x2\x2"+
		"\x6DC\x6DA\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x6E5\x3\x2\x2\x2\x6DE"+
		"\x6DC\x3\x2\x2\x2\x6DF\x6E1\a\xD5\x2\x2\x6E0\x6DF\x3\x2\x2\x2\x6E1\x6E2"+
		"\x3\x2\x2\x2\x6E2\x6E0\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E5\x3"+
		"\x2\x2\x2\x6E4\x6D7\x3\x2\x2\x2\x6E4\x6E0\x3\x2\x2\x2\x6E5\x6EC\x3\x2"+
		"\x2\x2\x6E6\x6E8\x5\x18\r\x2\x6E7\x6E9\a\xD5\x2\x2\x6E8\x6E7\x3\x2\x2"+
		"\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6E8\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2"+
		"\x6EB\x6ED\x3\x2\x2\x2\x6EC\x6E6\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED"+
		"\xAD\x3\x2\x2\x2\x6EE\x6EF\a\x9B\x2\x2\x6EF\x6F0\a\xD7\x2\x2\x6F0\x6F9"+
		"\x5\xC4\x63\x2\x6F1\x6F3\a\xD7\x2\x2\x6F2\x6F1\x3\x2\x2\x2\x6F2\x6F3\x3"+
		"\x2\x2\x2\x6F3\x6F4\x3\x2\x2\x2\x6F4\x6F6\a\x5\x2\x2\x6F5\x6F7\a\xD7\x2"+
		"\x2\x6F6\x6F5\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2"+
		"\x6F8\x6FA\x5\xC4\x63\x2\x6F9\x6F2\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2\x6FA"+
		"\xAF\x3\x2\x2\x2\x6FB\x6FC\a\x9D\x2\x2\x6FC\x6FD\a\xD7\x2\x2\x6FD\x6FF"+
		"\x5\xC4\x63\x2\x6FE\x700\a\xD7\x2\x2\x6FF\x6FE\x3\x2\x2\x2\x6FF\x700\x3"+
		"\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x703\a\x5\x2\x2\x702\x704\a\xD7\x2"+
		"\x2\x703\x702\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2"+
		"\x705\x706\x5\xC4\x63\x2\x706\xB1\x3\x2\x2\x2\x707\x708\a\x9C\x2\x2\x708"+
		"\x709\a\xD7\x2\x2\x709\x70B\x5\xE4s\x2\x70A\x70C\a\xD7\x2\x2\x70B\x70A"+
		"\x3\x2\x2\x2\x70B\x70C\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x70F\a\xBD"+
		"\x2\x2\x70E\x710\a\xD7\x2\x2\x70F\x70E\x3\x2\x2\x2\x70F\x710\x3\x2\x2"+
		"\x2\x710\x711\x3\x2\x2\x2\x711\x712\x5\xC4\x63\x2\x712\xB3\x3\x2\x2\x2"+
		"\x713\x714\a\xA3\x2\x2\x714\xB5\x3\x2\x2\x2\x715\x716\x5\x122\x92\x2\x716"+
		"\x717\a\xD7\x2\x2\x717\x719\x3\x2\x2\x2\x718\x715\x3\x2\x2\x2\x718\x719"+
		"\x3\x2\x2\x2\x719\x71C\x3\x2\x2\x2\x71A\x71B\a\xA1\x2\x2\x71B\x71D\a\xD7"+
		"\x2\x2\x71C\x71A\x3\x2\x2\x2\x71C\x71D\x3\x2\x2\x2\x71D\x71E\x3\x2\x2"+
		"\x2\x71E\x71F\a\xA5\x2\x2\x71F\x720\a\xD7\x2\x2\x720\x725\x5\x10A\x86"+
		"\x2\x721\x723\a\xD7\x2\x2\x722\x721\x3\x2\x2\x2\x722\x723\x3\x2\x2\x2"+
		"\x723\x724\x3\x2\x2\x2\x724\x726\x5\x100\x81\x2\x725\x722\x3\x2\x2\x2"+
		"\x725\x726\x3\x2\x2\x2\x726\x728\x3\x2\x2\x2\x727\x729\a\xD5\x2\x2\x728"+
		"\x727\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x728\x3\x2\x2\x2\x72A\x72B"+
		"\x3\x2\x2\x2\x72B\x732\x3\x2\x2\x2\x72C\x72E\x5\x18\r\x2\x72D\x72F\a\xD5"+
		"\x2\x2\x72E\x72D\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x72E\x3\x2\x2"+
		"\x2\x730\x731\x3\x2\x2\x2\x731\x733\x3\x2\x2\x2\x732\x72C\x3\x2\x2\x2"+
		"\x732\x733\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734\x735\a>\x2\x2\x735\xB7"+
		"\x3\x2\x2\x2\x736\x738\a\xA9\x2\x2\x737\x739\a\xD7\x2\x2\x738\x737\x3"+
		"\x2\x2\x2\x738\x739\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A\x73C\a\xBD"+
		"\x2\x2\x73B\x73D\a\xD7\x2\x2\x73C\x73B\x3\x2\x2\x2\x73C\x73D\x3\x2\x2"+
		"\x2\x73D\x73E\x3\x2\x2\x2\x73E\x73F\x5\xC4\x63\x2\x73F\xB9\x3\x2\x2\x2"+
		"\x740\x741\x5\x122\x92\x2\x741\x742\a\xD7\x2\x2\x742\x744\x3\x2\x2\x2"+
		"\x743\x740\x3\x2\x2\x2\x743\x744\x3\x2\x2\x2\x744\x745\x3\x2\x2\x2\x745"+
		"\x746\a\xAC\x2\x2\x746\x747\a\xD7\x2\x2\x747\x749\x5\x10A\x86\x2\x748"+
		"\x74A\a\xD5\x2\x2\x749\x748\x3\x2\x2\x2\x74A\x74B\x3\x2\x2\x2\x74B\x749"+
		"\x3\x2\x2\x2\x74B\x74C\x3\x2\x2\x2\x74C\x750\x3\x2\x2\x2\x74D\x74F\x5"+
		"\xBC_\x2\x74E\x74D\x3\x2\x2\x2\x74F\x752\x3\x2\x2\x2\x750\x74E\x3\x2\x2"+
		"\x2\x750\x751\x3\x2\x2\x2\x751\x753\x3\x2\x2\x2\x752\x750\x3\x2\x2\x2"+
		"\x753\x754\a?\x2\x2\x754\xBB\x3\x2\x2\x2\x755\x764\x5\x10A\x86\x2\x756"+
		"\x758\a\xD7\x2\x2\x757\x756\x3\x2\x2\x2\x757\x758\x3\x2\x2\x2\x758\x759"+
		"\x3\x2\x2\x2\x759\x75E\a\xC1\x2\x2\x75A\x75C\a\xD7\x2\x2\x75B\x75A\x3"+
		"\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x75D\x3\x2\x2\x2\x75D\x75F\x5\x106"+
		"\x84\x2\x75E\x75B\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x761\x3\x2\x2"+
		"\x2\x760\x762\a\xD7\x2\x2\x761\x760\x3\x2\x2\x2\x761\x762\x3\x2\x2\x2"+
		"\x762\x763\x3\x2\x2\x2\x763\x765\a\xCA\x2\x2\x764\x757\x3\x2\x2\x2\x764"+
		"\x765\x3\x2\x2\x2\x765\x768\x3\x2\x2\x2\x766\x767\a\xD7\x2\x2\x767\x769"+
		"\x5\x10C\x87\x2\x768\x766\x3\x2\x2\x2\x768\x769\x3\x2\x2\x2\x769\x76B"+
		"\x3\x2\x2\x2\x76A\x76C\a\xD5\x2\x2\x76B\x76A\x3\x2\x2\x2\x76C\x76D\x3"+
		"\x2\x2\x2\x76D\x76B\x3\x2\x2\x2\x76D\x76E\x3\x2\x2\x2\x76E\xBD\x3\x2\x2"+
		"\x2\x76F\x770\a\xAD\x2\x2\x770\x771\a\xD7\x2\x2\x771\x776\x5\xC4\x63\x2"+
		"\x772\x773\a\xD7\x2\x2\x773\x774\aZ\x2\x2\x774\x775\a\xD7\x2\x2\x775\x777"+
		"\x5\x11E\x90\x2\x776\x772\x3\x2\x2\x2\x776\x777\x3\x2\x2\x2\x777\xBF\x3"+
		"\x2\x2\x2\x778\x779\a\xAE\x2\x2\x779\x77A\a\xD7\x2\x2\x77A\x77B\x5\xC4"+
		"\x63\x2\x77B\xC1\x3\x2\x2\x2\x77C\x77D\a\xAF\x2\x2\x77D\x77E\a\xD7\x2"+
		"\x2\x77E\x78D\x5\xC4\x63\x2\x77F\x781\a\xD7\x2\x2\x780\x77F\x3\x2\x2\x2"+
		"\x780\x781\x3\x2\x2\x2\x781\x782\x3\x2\x2\x2\x782\x784\a\x5\x2\x2\x783"+
		"\x785\a\xD7\x2\x2\x784\x783\x3\x2\x2\x2\x784\x785\x3\x2\x2\x2\x785\x786"+
		"\x3\x2\x2\x2\x786\x78B\x5\xC4\x63\x2\x787\x788\a\xD7\x2\x2\x788\x789\a"+
		"\xAA\x2\x2\x789\x78A\a\xD7\x2\x2\x78A\x78C\x5\xC4\x63\x2\x78B\x787\x3"+
		"\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78E\x3\x2\x2\x2\x78D\x780\x3\x2"+
		"\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\xC3\x3\x2\x2\x2\x78F\x790\b\x63\x1\x2"+
		"\x790\x791\at\x2\x2\x791\x792\a\xD7\x2\x2\x792\x7C6\x5\xC4\x63\x1F\x793"+
		"\x795\x5\xE4s\x2\x794\x796\a\xD7\x2\x2\x795\x794\x3\x2\x2\x2\x795\x796"+
		"\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x799\a\xBB\x2\x2\x798\x79A\a\xD7"+
		"\x2\x2\x799\x798\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79B\x3\x2\x2"+
		"\x2\x79B\x79C\x5\xC4\x63\x1B\x79C\x7C6\x3\x2\x2\x2\x79D\x79F\a\xC7\x2"+
		"\x2\x79E\x7A0\a\xD7\x2\x2\x79F\x79E\x3\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2"+
		"\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7C6\x5\xC4\x63\x19\x7A2\x7A3\a\r\x2\x2\x7A3"+
		"\x7A4\a\xD7\x2\x2\x7A4\x7C6\x5\xC4\x63\x18\x7A5\x7A7\a\xC3\x2\x2\x7A6"+
		"\x7A8\a\xD7\x2\x2\x7A7\x7A6\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\x7A9"+
		"\x3\x2\x2\x2\x7A9\x7C6\x5\xC4\x63\t\x7AA\x7AB\au\x2\x2\x7AB\x7AC\a\xD7"+
		"\x2\x2\x7AC\x7C6\x5\xC4\x63\x6\x7AD\x7C6\x5\x11C\x8F\x2\x7AE\x7C6\x5r"+
		":\x2\x7AF\x7C6\x5\xE4s\x2\x7B0\x7C6\x5\xBE`\x2\x7B1\x7B3\a\xC1\x2\x2\x7B2"+
		"\x7B4\a\xD7\x2\x2\x7B3\x7B2\x3\x2\x2\x2\x7B3\x7B4\x3\x2\x2\x2\x7B4\x7B5"+
		"\x3\x2\x2\x2\x7B5\x7C0\x5\xC4\x63\x2\x7B6\x7B8\a\xD7\x2\x2\x7B7\x7B6\x3"+
		"\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7B9\x3\x2\x2\x2\x7B9\x7BB\a\x5\x2"+
		"\x2\x7BA\x7BC\a\xD7\x2\x2\x7BB\x7BA\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2"+
		"\x7BC\x7BD\x3\x2\x2\x2\x7BD\x7BF\x5\xC4\x63\x2\x7BE\x7B7\x3\x2\x2\x2\x7BF"+
		"\x7C2\x3\x2\x2\x2\x7C0\x7BE\x3\x2\x2\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\x7C3"+
		"\x3\x2\x2\x2\x7C2\x7C0\x3\x2\x2\x2\x7C3\x7C4\a\xCA\x2\x2\x7C4\x7C6\x3"+
		"\x2\x2\x2\x7C5\x78F\x3\x2\x2\x2\x7C5\x793\x3\x2\x2\x2\x7C5\x79D\x3\x2"+
		"\x2\x2\x7C5\x7A2\x3\x2\x2\x2\x7C5\x7A5\x3\x2\x2\x2\x7C5\x7AA\x3\x2\x2"+
		"\x2\x7C5\x7AD\x3\x2\x2\x2\x7C5\x7AE\x3\x2\x2\x2\x7C5\x7AF\x3\x2\x2\x2"+
		"\x7C5\x7B0\x3\x2\x2\x2\x7C5\x7B1\x3\x2\x2\x2\x7C6\x865\x3\x2\x2\x2\x7C7"+
		"\x7C9\f\x1A\x2\x2\x7C8\x7CA\a\xD7\x2\x2\x7C9\x7C8\x3\x2\x2\x2\x7C9\x7CA"+
		"\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2\x7CB\x7CD\a\xC7\x2\x2\x7CC\x7CE\a\xD7"+
		"\x2\x2\x7CD\x7CC\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2"+
		"\x2\x7CF\x864\x5\xC4\x63\x1B\x7D0\x7D1\f\x17\x2\x2\x7D1\x7D2\a\xD7\x2"+
		"\x2\x7D2\x7D3\a\xBA\x2\x2\x7D3\x7D4\a\xD7\x2\x2\x7D4\x864\x5\xC4\x63\x18"+
		"\x7D5\x7D6\f\x16\x2\x2\x7D6\x7D7\a\xD7\x2\x2\x7D7\x7D8\a\xF\x2\x2\x7D8"+
		"\x7D9\a\xD7\x2\x2\x7D9\x864\x5\xC4\x63\x17\x7DA\x7DC\f\x15\x2\x2\x7DB"+
		"\x7DD\a\xD7\x2\x2\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3\x2\x2\x2\x7DD\x7DE"+
		"\x3\x2\x2\x2\x7DE\x7E0\a\xC2\x2\x2\x7DF\x7E1\a\xD7\x2\x2\x7E0\x7DF\x3"+
		"\x2\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x864\x5\xC4"+
		"\x63\x16\x7E3\x7E5\f\x14\x2\x2\x7E4\x7E6\a\xD7\x2\x2\x7E5\x7E4\x3\x2\x2"+
		"\x2\x7E5\x7E6\x3\x2\x2\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7\x7E9\a\xC0\x2\x2"+
		"\x7E8\x7EA\a\xD7\x2\x2\x7E9\x7E8\x3\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA"+
		"\x7EB\x3\x2\x2\x2\x7EB\x864\x5\xC4\x63\x15\x7EC\x7EE\f\x13\x2\x2\x7ED"+
		"\x7EF\a\xD7\x2\x2\x7EE\x7ED\x3\x2\x2\x2\x7EE\x7EF\x3\x2\x2\x2\x7EF\x7F0"+
		"\x3\x2\x2\x2\x7F0\x7F2\a\xBF\x2\x2\x7F1\x7F3\a\xD7\x2\x2\x7F2\x7F1\x3"+
		"\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x864\x5\xC4"+
		"\x63\x14\x7F5\x7F7\f\x12\x2\x2\x7F6\x7F8\a\xD7\x2\x2\x7F7\x7F6\x3\x2\x2"+
		"\x2\x7F7\x7F8\x3\x2\x2\x2\x7F8\x7F9\x3\x2\x2\x2\x7F9\x7FB\a\xBE\x2\x2"+
		"\x7FA\x7FC\a\xD7\x2\x2\x7FB\x7FA\x3\x2\x2\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC"+
		"\x7FD\x3\x2\x2\x2\x7FD\x864\x5\xC4\x63\x13\x7FE\x800\f\x11\x2\x2\x7FF"+
		"\x801\a\xD7\x2\x2\x800\x7FF\x3\x2\x2\x2\x800\x801\x3\x2\x2\x2\x801\x802"+
		"\x3\x2\x2\x2\x802\x804\a\xBD\x2\x2\x803\x805\a\xD7\x2\x2\x804\x803\x3"+
		"\x2\x2\x2\x804\x805\x3\x2\x2\x2\x805\x806\x3\x2\x2\x2\x806\x864\x5\xC4"+
		"\x63\x12\x807\x809\f\x10\x2\x2\x808\x80A\a\xD7\x2\x2\x809\x808\x3\x2\x2"+
		"\x2\x809\x80A\x3\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80D\a\xC6\x2\x2"+
		"\x80C\x80E\a\xD7\x2\x2\x80D\x80C\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E"+
		"\x80F\x3\x2\x2\x2\x80F\x864\x5\xC4\x63\x11\x810\x812\f\xF\x2\x2\x811\x813"+
		"\a\xD7\x2\x2\x812\x811\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\x3"+
		"\x2\x2\x2\x814\x816\a\xBC\x2\x2\x815\x817\a\xD7\x2\x2\x816\x815\x3\x2"+
		"\x2\x2\x816\x817\x3\x2\x2\x2\x817\x818\x3\x2\x2\x2\x818\x864\x5\xC4\x63"+
		"\x10\x819\x81A\f\xE\x2\x2\x81A\x81B\a\xD7\x2\x2\x81B\x81C\a\x43\x2\x2"+
		"\x81C\x81D\a\xD7\x2\x2\x81D\x864\x5\xC4\x63\xF\x81E\x81F\f\r\x2\x2\x81F"+
		"\x820\a\xD7\x2\x2\x820\x821\aV\x2\x2\x821\x822\a\xD7\x2\x2\x822\x864\x5"+
		"\xC4\x63\xE\x823\x824\f\f\x2\x2\x824\x825\a\xD7\x2\x2\x825\x826\aZ\x2"+
		"\x2\x826\x827\a\xD7\x2\x2\x827\x864\x5\xC4\x63\r\x828\x829\f\v\x2\x2\x829"+
		"\x82A\a\xD7\x2\x2\x82A\x82B\a\x64\x2\x2\x82B\x82C\a\xD7\x2\x2\x82C\x864"+
		"\x5\xC4\x63\f\x82D\x82F\f\n\x2\x2\x82E\x830\a\xD7\x2\x2\x82F\x82E\x3\x2"+
		"\x2\x2\x82F\x830\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x833\a\xC3\x2"+
		"\x2\x832\x834\a\xD7\x2\x2\x833\x832\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2"+
		"\x834\x835\x3\x2\x2\x2\x835\x864\x5\xC4\x63\v\x836\x838\f\b\x2\x2\x837"+
		"\x839\a\xD7\x2\x2\x838\x837\x3\x2\x2\x2\x838\x839\x3\x2\x2\x2\x839\x83A"+
		"\x3\x2\x2\x2\x83A\x83C\aq\x2\x2\x83B\x83D\a\xD7\x2\x2\x83C\x83B\x3\x2"+
		"\x2\x2\x83C\x83D\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x864\x5\xC4\x63"+
		"\t\x83F\x841\f\a\x2\x2\x840\x842\a\xD7\x2\x2\x841\x840\x3\x2\x2\x2\x841"+
		"\x842\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x845\a\xC5\x2\x2\x844\x846"+
		"\a\xD7\x2\x2\x845\x844\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x847\x3"+
		"\x2\x2\x2\x847\x864\x5\xC4\x63\b\x848\x84A\f\x5\x2\x2\x849\x84B\a\xD7"+
		"\x2\x2\x84A\x849\x3\x2\x2\x2\x84A\x84B\x3\x2\x2\x2\x84B\x84C\x3\x2\x2"+
		"\x2\x84C\x84E\a\x80\x2\x2\x84D\x84F\a\xD7\x2\x2\x84E\x84D\x3\x2\x2\x2"+
		"\x84E\x84F\x3\x2\x2\x2\x84F\x850\x3\x2\x2\x2\x850\x864\x5\xC4\x63\x6\x851"+
		"\x853\f\x4\x2\x2\x852\x854\a\xD7\x2\x2\x853\x852\x3\x2\x2\x2\x853\x854"+
		"\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\x857\a\xC9\x2\x2\x856\x858\a\xD7"+
		"\x2\x2\x857\x856\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x859\x3\x2\x2"+
		"\x2\x859\x864\x5\xC4\x63\x5\x85A\x85C\f\x3\x2\x2\x85B\x85D\a\xD7\x2\x2"+
		"\x85C\x85B\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E"+
		"\x860\a\xB9\x2\x2\x85F\x861\a\xD7\x2\x2\x860\x85F\x3\x2\x2\x2\x860\x861"+
		"\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862\x864\x5\xC4\x63\x4\x863\x7C7\x3"+
		"\x2\x2\x2\x863\x7D0\x3\x2\x2\x2\x863\x7D5\x3\x2\x2\x2\x863\x7DA\x3\x2"+
		"\x2\x2\x863\x7E3\x3\x2\x2\x2\x863\x7EC\x3\x2\x2\x2\x863\x7F5\x3\x2\x2"+
		"\x2\x863\x7FE\x3\x2\x2\x2\x863\x807\x3\x2\x2\x2\x863\x810\x3\x2\x2\x2"+
		"\x863\x819\x3\x2\x2\x2\x863\x81E\x3\x2\x2\x2\x863\x823\x3\x2\x2\x2\x863"+
		"\x828\x3\x2\x2\x2\x863\x82D\x3\x2\x2\x2\x863\x836\x3\x2\x2\x2\x863\x83F"+
		"\x3\x2\x2\x2\x863\x848\x3\x2\x2\x2\x863\x851\x3\x2\x2\x2\x863\x85A\x3"+
		"\x2\x2\x2\x864\x867\x3\x2\x2\x2\x865\x863\x3\x2\x2\x2\x865\x866\x3\x2"+
		"\x2\x2\x866\xC5\x3\x2\x2\x2\x867\x865\x3\x2\x2\x2\x868\x86C\a\x33\x2\x2"+
		"\x869\x86C\a\xA1\x2\x2\x86A\x86C\x5\x122\x92\x2\x86B\x868\x3\x2\x2\x2"+
		"\x86B\x869\x3\x2\x2\x2\x86B\x86A\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D"+
		"\x870\a\xD7\x2\x2\x86E\x86F\a\xB7\x2\x2\x86F\x871\a\xD7\x2\x2\x870\x86E"+
		"\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x873\x5"+
		"\xC8\x65\x2\x873\xC7\x3\x2\x2\x2\x874\x87F\x5\xCA\x66\x2\x875\x877\a\xD7"+
		"\x2\x2\x876\x875\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x878\x3\x2\x2"+
		"\x2\x878\x87A\a\x5\x2\x2\x879\x87B\a\xD7\x2\x2\x87A\x879\x3\x2\x2\x2\x87A"+
		"\x87B\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87E\x5\xCA\x66\x2\x87D\x876"+
		"\x3\x2\x2\x2\x87E\x881\x3\x2\x2\x2\x87F\x87D\x3\x2\x2\x2\x87F\x880\x3"+
		"\x2\x2\x2\x880\xC9\x3\x2\x2\x2\x881\x87F\x3\x2\x2\x2\x882\x894\x5\x10A"+
		"\x86\x2\x883\x885\a\xD7\x2\x2\x884\x883\x3\x2\x2\x2\x884\x885\x3\x2\x2"+
		"\x2\x885\x886\x3\x2\x2\x2\x886\x888\a\xC1\x2\x2\x887\x889\a\xD7\x2\x2"+
		"\x888\x887\x3\x2\x2\x2\x888\x889\x3\x2\x2\x2\x889\x88E\x3\x2\x2\x2\x88A"+
		"\x88C\x5\x106\x84\x2\x88B\x88D\a\xD7\x2\x2\x88C\x88B\x3\x2\x2\x2\x88C"+
		"\x88D\x3\x2\x2\x2\x88D\x88F\x3\x2\x2\x2\x88E\x88A\x3\x2\x2\x2\x88E\x88F"+
		"\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x892\a\xCA\x2\x2\x891\x893\a\xD7"+
		"\x2\x2\x892\x891\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x895\x3\x2\x2"+
		"\x2\x894\x884\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x897\x3\x2\x2\x2"+
		"\x896\x898\x5\x120\x91\x2\x897\x896\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2"+
		"\x898\x89B\x3\x2\x2\x2\x899\x89A\a\xD7\x2\x2\x89A\x89C\x5\x10C\x87\x2"+
		"\x89B\x899\x3\x2\x2\x2\x89B\x89C\x3\x2\x2\x2\x89C\xCB\x3\x2\x2\x2\x89D"+
		"\x89E\a\xB4\x2\x2\x89E\x89F\a\xD7\x2\x2\x89F\x8A1\x5\xC4\x63\x2\x8A0\x8A2"+
		"\a\xD5\x2\x2\x8A1\x8A0\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A1\x3"+
		"\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8AA\x3\x2\x2\x2\x8A5\x8A6\x5\x18"+
		"\r\x2\x8A6\x8A7\a\xD5\x2\x2\x8A7\x8A9\x3\x2\x2\x2\x8A8\x8A5\x3\x2\x2\x2"+
		"\x8A9\x8AC\x3\x2\x2\x2\x8AA\x8A8\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2\x8AB"+
		"\x8AD\x3\x2\x2\x2\x8AC\x8AA\x3\x2\x2\x2\x8AD\x8AE\a\xB3\x2\x2\x8AE\xCD"+
		"\x3\x2\x2\x2\x8AF\x8B0\a\xB5\x2\x2\x8B0\x8B1\a\xD7\x2\x2\x8B1\x8B3\x5"+
		"\xC4\x63\x2\x8B2\x8B4\a\xD7\x2\x2\x8B3\x8B2\x3\x2\x2\x2\x8B3\x8B4\x3\x2"+
		"\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B7\a\x5\x2\x2\x8B6\x8B8\a\xD7\x2\x2"+
		"\x8B7\x8B6\x3\x2\x2\x2\x8B7\x8B8\x3\x2\x2\x2\x8B8\x8B9\x3\x2\x2\x2\x8B9"+
		"\x8BA\x5\xC4\x63\x2\x8BA\xCF\x3\x2\x2\x2\x8BB\x8BC\a\xB6\x2\x2\x8BC\x8BD"+
		"\a\xD7\x2\x2\x8BD\x8BF\x5\xE4s\x2\x8BE\x8C0\a\xD5\x2\x2\x8BF\x8BE\x3\x2"+
		"\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8BF\x3\x2\x2\x2\x8C1\x8C2\x3\x2\x2"+
		"\x2\x8C2\x8C9\x3\x2\x2\x2\x8C3\x8C5\x5\x18\r\x2\x8C4\x8C6\a\xD5\x2\x2"+
		"\x8C5\x8C4\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2\x2\x8C7\x8C5\x3\x2\x2\x2\x8C7"+
		"\x8C8\x3\x2\x2\x2\x8C8\x8CA\x3\x2\x2\x2\x8C9\x8C3\x3\x2\x2\x2\x8C9\x8CA"+
		"\x3\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CC\a@\x2\x2\x8CC\xD1\x3\x2\x2"+
		"\x2\x8CD\x8CE\a\xB8\x2\x2\x8CE\x8CF\a\xD7\x2\x2\x8CF\x8D1\x5\xC4\x63\x2"+
		"\x8D0\x8D2\a\xD7\x2\x2\x8D1\x8D0\x3\x2\x2\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2"+
		"\x8D3\x3\x2\x2\x2\x8D3\x8D8\a\x5\x2\x2\x8D4\x8D6\a\xD7\x2\x2\x8D5\x8D4"+
		"\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7\x8D9\x5"+
		"\x80\x41\x2\x8D8\x8D5\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\xD3\x3\x2"+
		"\x2\x2\x8DA\x8DD\x5\xD6l\x2\x8DB\x8DD\x5\xD8m\x2\x8DC\x8DA\x3\x2\x2\x2"+
		"\x8DC\x8DB\x3\x2\x2\x2\x8DD\xD5\x3\x2\x2\x2\x8DE\x8DF\a\x1B\x2\x2\x8DF"+
		"\x8E0\a\xD7\x2\x2\x8E0\x8E2\x5\x10A\x86\x2\x8E1\x8E3\x5\x120\x91\x2\x8E2"+
		"\x8E1\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x8F2\x3\x2\x2\x2\x8E4\x8E6"+
		"\a\xD7\x2\x2\x8E5\x8E4\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2\x8E6\x8E7\x3"+
		"\x2\x2\x2\x8E7\x8E9\a\xC1\x2\x2\x8E8\x8EA\a\xD7\x2\x2\x8E9\x8E8\x3\x2"+
		"\x2\x2\x8E9\x8EA\x3\x2\x2\x2\x8EA\x8EF\x3\x2\x2\x2\x8EB\x8ED\x5\xFC\x7F"+
		"\x2\x8EC\x8EE\a\xD7\x2\x2\x8ED\x8EC\x3\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2"+
		"\x8EE\x8F0\x3\x2\x2\x2\x8EF\x8EB\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0"+
		"\x8F1\x3\x2\x2\x2\x8F1\x8F3\a\xCA\x2\x2\x8F2\x8E5\x3\x2\x2\x2\x8F2\x8F3"+
		"\x3\x2\x2\x2\x8F3\xD7\x3\x2\x2\x2\x8F4\x8F5\a\x1B\x2\x2\x8F5\x8F7\a\xD7"+
		"\x2\x2\x8F6\x8F8\x5\xF6|\x2\x8F7\x8F6\x3\x2\x2\x2\x8F7\x8F8\x3\x2\x2\x2"+
		"\x8F8\x8FC\x3\x2\x2\x2\x8F9\x8FB\x5\xEEx\x2\x8FA\x8F9\x3\x2\x2\x2\x8FB"+
		"\x8FE\x3\x2\x2\x2\x8FC\x8FA\x3\x2\x2\x2\x8FC\x8FD\x3\x2\x2\x2\x8FD\x8FF"+
		"\x3\x2\x2\x2\x8FE\x8FC\x3\x2\x2\x2\x8FF\x900\a\x4\x2\x2\x900\x902\x5\x10A"+
		"\x86\x2\x901\x903\x5\x120\x91\x2\x902\x901\x3\x2\x2\x2\x902\x903\x3\x2"+
		"\x2\x2\x903\x912\x3\x2\x2\x2\x904\x906\a\xD7\x2\x2\x905\x904\x3\x2\x2"+
		"\x2\x905\x906\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x909\a\xC1\x2\x2"+
		"\x908\x90A\a\xD7\x2\x2\x909\x908\x3\x2\x2\x2\x909\x90A\x3\x2\x2\x2\x90A"+
		"\x90F\x3\x2\x2\x2\x90B\x90D\x5\xFC\x7F\x2\x90C\x90E\a\xD7\x2\x2\x90D\x90C"+
		"\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\x910\x3\x2\x2\x2\x90F\x90B\x3"+
		"\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x911\x3\x2\x2\x2\x911\x913\a\xCA"+
		"\x2\x2\x912\x905\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\xD9\x3\x2\x2\x2"+
		"\x914\x919\x5\xDCo\x2\x915\x919\x5\xDEp\x2\x916\x919\x5\xE0q\x2\x917\x919"+
		"\x5\xE2r\x2\x918\x914\x3\x2\x2\x2\x918\x915\x3\x2\x2\x2\x918\x916\x3\x2"+
		"\x2\x2\x918\x917\x3\x2\x2\x2\x919\xDB\x3\x2\x2\x2\x91A\x91D\x5\x110\x89"+
		"\x2\x91B\x91C\a\xD7\x2\x2\x91C\x91E\x5\xFC\x7F\x2\x91D\x91B\x3\x2\x2\x2"+
		"\x91D\x91E\x3\x2\x2\x2\x91E\xDD\x3\x2\x2\x2\x91F\x921\x5\xFA~\x2\x920"+
		"\x922\x5\xF8}\x2\x921\x920\x3\x2\x2\x2\x921\x922\x3\x2\x2\x2\x922\xDF"+
		"\x3\x2\x2\x2\x923\x925\x5\xE4s\x2\x924\x923\x3\x2\x2\x2\x925\x928\x3\x2"+
		"\x2\x2\x926\x924\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x929\x3\x2\x2"+
		"\x2\x928\x926\x3\x2\x2\x2\x929\x92A\x5\xF2z\x2\x92A\xE1\x3\x2\x2\x2\x92B"+
		"\x92D\x5\xE4s\x2\x92C\x92B\x3\x2\x2\x2\x92D\x930\x3\x2\x2\x2\x92E\x92C"+
		"\x3\x2\x2\x2\x92E\x92F\x3\x2\x2\x2\x92F\x931\x3\x2\x2\x2\x930\x92E\x3"+
		"\x2\x2\x2\x931\x933\x5\xF0y\x2\x932\x934\x5\xF8}\x2\x933\x932\x3\x2\x2"+
		"\x2\x933\x934\x3\x2\x2\x2\x934\xE3\x3\x2\x2\x2\x935\x93A\x5\xE6t\x2\x936"+
		"\x93A\x5\xE8u\x2\x937\x93A\x5\xEAv\x2\x938\x93A\x5\xECw\x2\x939\x935\x3"+
		"\x2\x2\x2\x939\x936\x3\x2\x2\x2\x939\x937\x3\x2\x2\x2\x939\x938\x3\x2"+
		"\x2\x2\x93A\xE5\x3\x2\x2\x2\x93B\x93D\x5\xF6|\x2\x93C\x93E\x5\xF8}\x2"+
		"\x93D\x93C\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E\xE7\x3\x2\x2\x2\x93F"+
		"\x941\x5\xFA~\x2\x940\x942\x5\xF8}\x2\x941\x940\x3\x2\x2\x2\x941\x942"+
		"\x3\x2\x2\x2\x942\xE9\x3\x2\x2\x2\x943\x944\x5\xF8}\x2\x944\xEB\x3\x2"+
		"\x2\x2\x945\x948\x5\xF6|\x2\x946\x948\x5\xFA~\x2\x947\x945\x3\x2\x2\x2"+
		"\x947\x946\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948\x94A\x3\x2\x2\x2\x949"+
		"\x94B\x5\xF4{\x2\x94A\x949\x3\x2\x2\x2\x94B\x94C\x3\x2\x2\x2\x94C\x94A"+
		"\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94F\x3\x2\x2\x2\x94E\x950\x5"+
		"\xF8}\x2\x94F\x94E\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2\x950\xED\x3\x2\x2"+
		"\x2\x951\x952\a\x4\x2\x2\x952\x953\x5\x10A\x86\x2\x953\xEF\x3\x2\x2\x2"+
		"\x954\x955\a\x4\x2\x2\x955\x956\x5\xFA~\x2\x956\xF1\x3\x2\x2\x2\x957\x958"+
		"\a\x4\x2\x2\x958\x95B\x5\x10A\x86\x2\x959\x95A\a\xD7\x2\x2\x95A\x95C\x5"+
		"\xFC\x7F\x2\x95B\x959\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\xF3\x3\x2"+
		"\x2\x2\x95D\x960\x5\xEEx\x2\x95E\x960\x5\xF0y\x2\x95F\x95D\x3\x2\x2\x2"+
		"\x95F\x95E\x3\x2\x2\x2\x960\xF5\x3\x2\x2\x2\x961\x963\x5\x10A\x86\x2\x962"+
		"\x964\x5\x120\x91\x2\x963\x962\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2\x964"+
		"\xF7\x3\x2\x2\x2\x965\x966\a\n\x2\x2\x966\x968\x5\x10A\x86\x2\x967\x969"+
		"\x5\x120\x91\x2\x968\x967\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969\xF9\x3"+
		"\x2\x2\x2\x96A\x96D\x5\x10A\x86\x2\x96B\x96D\x5\x10E\x88\x2\x96C\x96A"+
		"\x3\x2\x2\x2\x96C\x96B\x3\x2\x2\x2\x96D\x96F\x3\x2\x2\x2\x96E\x970\x5"+
		"\x120\x91\x2\x96F\x96E\x3\x2\x2\x2\x96F\x970\x3\x2\x2\x2\x970\x972\x3"+
		"\x2\x2\x2\x971\x973\a\xD7\x2\x2\x972\x971\x3\x2\x2\x2\x972\x973\x3\x2"+
		"\x2\x2\x973\x974\x3\x2\x2\x2\x974\x976\a\xC1\x2\x2\x975\x977\a\xD7\x2"+
		"\x2\x976\x975\x3\x2\x2\x2\x976\x977\x3\x2\x2\x2\x977\x97C\x3\x2\x2\x2"+
		"\x978\x97A\x5\xFC\x7F\x2\x979\x97B\a\xD7\x2\x2\x97A\x979\x3\x2\x2\x2\x97A"+
		"\x97B\x3\x2\x2\x2\x97B\x97D\x3\x2\x2\x2\x97C\x978\x3\x2\x2\x2\x97C\x97D"+
		"\x3\x2\x2\x2\x97D\x97E\x3\x2\x2\x2\x97E\x97F\a\xCA\x2\x2\x97F\xFB\x3\x2"+
		"\x2\x2\x980\x982\x5\xFE\x80\x2\x981\x980\x3\x2\x2\x2\x981\x982\x3\x2\x2"+
		"\x2\x982\x984\x3\x2\x2\x2\x983\x985\a\xD7\x2\x2\x984\x983\x3\x2\x2\x2"+
		"\x984\x985\x3\x2\x2\x2\x985\x986\x3\x2\x2\x2\x986\x988\t\v\x2\x2\x987"+
		"\x989\a\xD7\x2\x2\x988\x987\x3\x2\x2\x2\x988\x989\x3\x2\x2\x2\x989\x98B"+
		"\x3\x2\x2\x2\x98A\x981\x3\x2\x2\x2\x98B\x98E\x3\x2\x2\x2\x98C\x98A\x3"+
		"\x2\x2\x2\x98C\x98D\x3\x2\x2\x2\x98D\x98F\x3\x2\x2\x2\x98E\x98C\x3\x2"+
		"\x2\x2\x98F\x99C\x5\xFE\x80\x2\x990\x992\a\xD7\x2\x2\x991\x990\x3\x2\x2"+
		"\x2\x991\x992\x3\x2\x2\x2\x992\x993\x3\x2\x2\x2\x993\x995\t\v\x2\x2\x994"+
		"\x996\a\xD7\x2\x2\x995\x994\x3\x2\x2\x2\x995\x996\x3\x2\x2\x2\x996\x998"+
		"\x3\x2\x2\x2\x997\x999\x5\xFE\x80\x2\x998\x997\x3\x2\x2\x2\x998\x999\x3"+
		"\x2\x2\x2\x999\x99B\x3\x2\x2\x2\x99A\x991\x3\x2\x2\x2\x99B\x99E\x3\x2"+
		"\x2\x2\x99C\x99A\x3\x2\x2\x2\x99C\x99D\x3\x2\x2\x2\x99D\xFD\x3\x2\x2\x2"+
		"\x99E\x99C\x3\x2\x2\x2\x99F\x9A0\t\r\x2\x2\x9A0\x9A2\a\xD7\x2\x2\x9A1"+
		"\x99F\x3\x2\x2\x2\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A4"+
		"\x5\xC4\x63\x2\x9A4\xFF\x3\x2\x2\x2\x9A5\x9B7\a\xC1\x2\x2\x9A6\x9A8\a"+
		"\xD7\x2\x2\x9A7\x9A6\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9A9\x3\x2"+
		"\x2\x2\x9A9\x9B4\x5\x102\x82\x2\x9AA\x9AC\a\xD7\x2\x2\x9AB\x9AA\x3\x2"+
		"\x2\x2\x9AB\x9AC\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2\x9AD\x9AF\a\x5\x2\x2"+
		"\x9AE\x9B0\a\xD7\x2\x2\x9AF\x9AE\x3\x2\x2\x2\x9AF\x9B0\x3\x2\x2\x2\x9B0"+
		"\x9B1\x3\x2\x2\x2\x9B1\x9B3\x5\x102\x82\x2\x9B2\x9AB\x3\x2\x2\x2\x9B3"+
		"\x9B6\x3\x2\x2\x2\x9B4\x9B2\x3\x2\x2\x2\x9B4\x9B5\x3\x2\x2\x2\x9B5\x9B8"+
		"\x3\x2\x2\x2\x9B6\x9B4\x3\x2\x2\x2\x9B7\x9A7\x3\x2\x2\x2\x9B7\x9B8\x3"+
		"\x2\x2\x2\x9B8\x9BA\x3\x2\x2\x2\x9B9\x9BB\a\xD7\x2\x2\x9BA\x9B9\x3\x2"+
		"\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2\x9BC\x9BD\a\xCA\x2"+
		"\x2\x9BD\x101\x3\x2\x2\x2\x9BE\x9BF\a{\x2\x2\x9BF\x9C1\a\xD7\x2\x2\x9C0"+
		"\x9BE\x3\x2\x2\x2\x9C0\x9C1\x3\x2\x2\x2\x9C1\x9C4\x3\x2\x2\x2\x9C2\x9C3"+
		"\t\xE\x2\x2\x9C3\x9C5\a\xD7\x2\x2\x9C4\x9C2\x3\x2\x2\x2\x9C4\x9C5\x3\x2"+
		"\x2\x2\x9C5\x9C8\x3\x2\x2\x2\x9C6\x9C7\a\x82\x2\x2\x9C7\x9C9\a\xD7\x2"+
		"\x2\x9C8\x9C6\x3\x2\x2\x2\x9C8\x9C9\x3\x2\x2\x2\x9C9\x9CA\x3\x2\x2\x2"+
		"\x9CA\x9D3\x5\x10A\x86\x2\x9CB\x9CD\a\xD7\x2\x2\x9CC\x9CB\x3\x2\x2\x2"+
		"\x9CC\x9CD\x3\x2\x2\x2\x9CD\x9CE\x3\x2\x2\x2\x9CE\x9D0\a\xC1\x2\x2\x9CF"+
		"\x9D1\a\xD7\x2\x2\x9D0\x9CF\x3\x2\x2\x2\x9D0\x9D1\x3\x2\x2\x2\x9D1\x9D2"+
		"\x3\x2\x2\x2\x9D2\x9D4\a\xCA\x2\x2\x9D3\x9CC\x3\x2\x2\x2\x9D3\x9D4\x3"+
		"\x2\x2\x2\x9D4\x9D7\x3\x2\x2\x2\x9D5\x9D6\a\xD7\x2\x2\x9D6\x9D8\x5\x10C"+
		"\x87\x2\x9D7\x9D5\x3\x2\x2\x2\x9D7\x9D8\x3\x2\x2\x2\x9D8\x9DD\x3\x2\x2"+
		"\x2\x9D9\x9DB\a\xD7\x2\x2\x9DA\x9D9\x3\x2\x2\x2\x9DA\x9DB\x3\x2\x2\x2"+
		"\x9DB\x9DC\x3\x2\x2\x2\x9DC\x9DE\x5\x104\x83\x2\x9DD\x9DA\x3\x2\x2\x2"+
		"\x9DD\x9DE\x3\x2\x2\x2\x9DE\x103\x3\x2\x2\x2\x9DF\x9E1\a\xBD\x2\x2\x9E0"+
		"\x9E2\a\xD7\x2\x2\x9E1\x9E0\x3\x2\x2\x2\x9E1\x9E2\x3\x2\x2\x2\x9E2\x9E5"+
		"\x3\x2\x2\x2\x9E3\x9E6\x5\x11C\x8F\x2\x9E4\x9E6\x5\x10A\x86\x2\x9E5\x9E3"+
		"\x3\x2\x2\x2\x9E5\x9E4\x3\x2\x2\x2\x9E6\x105\x3\x2\x2\x2\x9E7\x9F2\x5"+
		"\x108\x85\x2\x9E8\x9EA\a\xD7\x2\x2\x9E9\x9E8\x3\x2\x2\x2\x9E9\x9EA\x3"+
		"\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9ED\a\x5\x2\x2\x9EC\x9EE\a\xD7\x2"+
		"\x2\x9ED\x9EC\x3\x2\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2"+
		"\x9EF\x9F1\x5\x108\x85\x2\x9F0\x9E9\x3\x2\x2\x2\x9F1\x9F4\x3\x2\x2\x2"+
		"\x9F2\x9F0\x3\x2\x2\x2\x9F2\x9F3\x3\x2\x2\x2\x9F3\x107\x3\x2\x2\x2\x9F4"+
		"\x9F2\x3\x2\x2\x2\x9F5\x9F6\x5\xC4\x63\x2\x9F6\x9F7\a\xD7\x2\x2\x9F7\x9F8"+
		"\a\xAA\x2\x2\x9F8\x9F9\a\xD7\x2\x2\x9F9\x9FB\x3\x2\x2\x2\x9FA\x9F5\x3"+
		"\x2\x2\x2\x9FA\x9FB\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FD\x5\xC4"+
		"\x63\x2\x9FD\x109\x3\x2\x2\x2\x9FE\xA01\a\xD3\x2\x2\x9FF\xA01\x5\x124"+
		"\x93\x2\xA00\x9FE\x3\x2\x2\x2\xA00\x9FF\x3\x2\x2\x2\xA01\xA02\x3\x2\x2"+
		"\x2\xA02\xA00\x3\x2\x2\x2\xA02\xA03\x3\x2\x2\x2\xA03\xA0D\x3\x2\x2\x2"+
		"\xA04\xA07\a\xCB\x2\x2\xA05\xA08\a\xD3\x2\x2\xA06\xA08\x5\x124\x93\x2"+
		"\xA07\xA05\x3\x2\x2\x2\xA07\xA06\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2\xA09"+
		"\xA07\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2\xA0A\xA0B\x3\x2\x2\x2\xA0B\xA0D"+
		"\a\xCC\x2\x2\xA0C\xA00\x3\x2\x2\x2\xA0C\xA04\x3\x2\x2\x2\xA0D\x10B\x3"+
		"\x2\x2\x2\xA0E\xA0F\a\x13\x2\x2\xA0F\xA12\a\xD7\x2\x2\xA10\xA11\at\x2"+
		"\x2\xA11\xA13\a\xD7\x2\x2\xA12\xA10\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2"+
		"\xA13\xA14\x3\x2\x2\x2\xA14\xA17\x5\x11E\x90\x2\xA15\xA16\a\xD7\x2\x2"+
		"\xA16\xA18\x5\x116\x8C\x2\xA17\xA15\x3\x2\x2\x2\xA17\xA18\x3\x2\x2\x2"+
		"\xA18\x10D\x3\x2\x2\x2\xA19\xA1A\t\xF\x2\x2\xA1A\x10F\x3\x2\x2\x2\xA1B"+
		"\xA20\a\xD3\x2\x2\xA1C\xA1F\x5\x124\x93\x2\xA1D\xA1F\a\xD3\x2\x2\xA1E"+
		"\xA1C\x3\x2\x2\x2\xA1E\xA1D\x3\x2\x2\x2\xA1F\xA22\x3\x2\x2\x2\xA20\xA1E"+
		"\x3\x2\x2\x2\xA20\xA21\x3\x2\x2\x2\xA21\xA2B\x3\x2\x2\x2\xA22\xA20\x3"+
		"\x2\x2\x2\xA23\xA26\x5\x124\x93\x2\xA24\xA27\x5\x124\x93\x2\xA25\xA27"+
		"\a\xD3\x2\x2\xA26\xA24\x3\x2\x2\x2\xA26\xA25\x3\x2\x2\x2\xA27\xA28\x3"+
		"\x2\x2\x2\xA28\xA26\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2B\x3\x2"+
		"\x2\x2\xA2A\xA1B\x3\x2\x2\x2\xA2A\xA23\x3\x2\x2\x2\xA2B\x111\x3\x2\x2"+
		"\x2\xA2C\xA2D\t\x10\x2\x2\xA2D\x113\x3\x2\x2\x2\xA2E\xA33\x5\x10A\x86"+
		"\x2\xA2F\xA30\a\x4\x2\x2\xA30\xA32\x5\x10A\x86\x2\xA31\xA2F\x3\x2\x2\x2"+
		"\xA32\xA35\x3\x2\x2\x2\xA33\xA31\x3\x2\x2\x2\xA33\xA34\x3\x2\x2\x2\xA34"+
		"\x115\x3\x2\x2\x2\xA35\xA33\x3\x2\x2\x2\xA36\xA38\a\xC5\x2\x2\xA37\xA39"+
		"\a\xD7\x2\x2\xA38\xA37\x3\x2\x2\x2\xA38\xA39\x3\x2\x2\x2\xA39\xA3C\x3"+
		"\x2\x2\x2\xA3A\xA3D\a\xD0\x2\x2\xA3B\xA3D\x5\x10A\x86\x2\xA3C\xA3A\x3"+
		"\x2\x2\x2\xA3C\xA3B\x3\x2\x2\x2\xA3D\x117\x3\x2\x2\x2\xA3E\xA47\x5\x110"+
		"\x89\x2\xA3F\xA41\a\xD7\x2\x2\xA40\xA3F\x3\x2\x2\x2\xA40\xA41\x3\x2\x2"+
		"\x2\xA41\xA42\x3\x2\x2\x2\xA42\xA44\a\xC3\x2\x2\xA43\xA45\a\xD7\x2\x2"+
		"\xA44\xA43\x3\x2\x2\x2\xA44\xA45\x3\x2\x2\x2\xA45\xA46\x3\x2\x2\x2\xA46"+
		"\xA48\x5\x110\x89\x2\xA47\xA40\x3\x2\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48"+
		"\x119\x3\x2\x2\x2\xA49\xA4A\x5\x10A\x86\x2\xA4A\xA4B\a\x6\x2\x2\xA4B\x11B"+
		"\x3\x2\x2\x2\xA4C\xA4D\t\x11\x2\x2\xA4D\x11D\x3\x2\x2\x2\xA4E\xA51\x5"+
		"\x10E\x88\x2\xA4F\xA51\x5\x114\x8B\x2\xA50\xA4E\x3\x2\x2\x2\xA50\xA4F"+
		"\x3\x2\x2\x2\xA51\xA5A\x3\x2\x2\x2\xA52\xA54\a\xD7\x2\x2\xA53\xA52\x3"+
		"\x2\x2\x2\xA53\xA54\x3\x2\x2\x2\xA54\xA55\x3\x2\x2\x2\xA55\xA57\a\xC1"+
		"\x2\x2\xA56\xA58\a\xD7\x2\x2\xA57\xA56\x3\x2\x2\x2\xA57\xA58\x3\x2\x2"+
		"\x2\xA58\xA59\x3\x2\x2\x2\xA59\xA5B\a\xCA\x2\x2\xA5A\xA53\x3\x2\x2\x2"+
		"\xA5A\xA5B\x3\x2\x2\x2\xA5B\x11F\x3\x2\x2\x2\xA5C\xA5D\t\x12\x2\x2\xA5D"+
		"\x121\x3\x2\x2\x2\xA5E\xA5F\t\x13\x2\x2\xA5F\x123\x3\x2\x2\x2\xA60\xA61"+
		"\t\x14\x2\x2\xA61\x125\x3\x2\x2\x2\x1C1\x12A\x12F\x136\x138\x13B\x140"+
		"\x144\x149\x14D\x152\x156\x15B\x15F\x16B\x16F\x173\x17A\x180\x186\x18A"+
		"\x190\x194\x19E\x1A4\x1A9\x1B7\x1BF\x1C3\x1C7\x1CB\x1D0\x1D7\x1DA\x1DF"+
		"\x225\x22B\x22F\x232\x242\x246\x24B\x24E\x253\x259\x25D\x262\x267\x26B"+
		"\x26E\x272\x278\x27C\x283\x292\x295\x298\x29C\x2A2\x2A6\x2AB\x2B2\x2B6"+
		"\x2BA\x2BE\x2C1\x2C7\x2CD\x2CF\x2DA\x2E0\x2E2\x2EA\x2F0\x2F8\x2FF\x307"+
		"\x30C\x313\x317\x31A\x31F\x32C\x332\x33C\x340\x34A\x353\x359\x35B\x360"+
		"\x366\x36A\x36D\x371\x37C\x381\x387\x389\x38E\x393\x397\x39D\x3A0\x3A4"+
		"\x3A9\x3AF\x3B1\x3B9\x3BD\x3C0\x3C3\x3C7\x3DE\x3E4\x3E8\x3EC\x3F6\x3FC"+
		"\x3FE\x40A\x410\x412\x418\x41E\x420\x42A\x42E\x433\x43B\x43F\x443\x44B"+
		"\x44F\x45B\x45F\x466\x468\x46E\x472\x47A\x47E\x48A\x490\x492\x49C\x4A2"+
		"\x4A4\x4AA\x4B0\x4B2\x4B6\x4BA\x4BE\x4D6\x4E0\x4E4\x4E9\x4F4\x4F8\x4FD"+
		"\x50B\x50F\x518\x51C\x51F\x523\x527\x52A\x52E\x532\x535\x539\x53C\x540"+
		"\x542\x547\x54B\x54F\x553\x555\x55B\x55F\x562\x567\x56B\x571\x574\x578"+
		"\x57D\x583\x585\x58C\x590\x596\x599\x59E\x5A4\x5A6\x5AD\x5B1\x5B7\x5BA"+
		"\x5BF\x5C5\x5C7\x5CF\x5D3\x5D6\x5D9\x5DD\x5E5\x5E9\x5ED\x5EF\x5F2\x5F7"+
		"\x5FD\x601\x605\x60A\x60F\x613\x617\x61C\x624\x626\x632\x636\x63E\x642"+
		"\x64A\x64E\x652\x656\x65A\x65E\x666\x66A\x676\x67B\x67F\x682\x68A\x68D"+
		"\x692\x698\x69A\x6A0\x6A2\x6A6\x6AA\x6B0\x6B4\x6B9\x6C2\x6C6\x6CB\x6CE"+
		"\x6D4\x6D7\x6DC\x6E2\x6E4\x6EA\x6EC\x6F2\x6F6\x6F9\x6FF\x703\x70B\x70F"+
		"\x718\x71C\x722\x725\x72A\x730\x732\x738\x73C\x743\x74B\x750\x757\x75B"+
		"\x75E\x761\x764\x768\x76D\x776\x780\x784\x78B\x78D\x795\x799\x79F\x7A7"+
		"\x7B3\x7B7\x7BB\x7C0\x7C5\x7C9\x7CD\x7DC\x7E0\x7E5\x7E9\x7EE\x7F2\x7F7"+
		"\x7FB\x800\x804\x809\x80D\x812\x816\x82F\x833\x838\x83C\x841\x845\x84A"+
		"\x84E\x853\x857\x85C\x860\x863\x865\x86B\x870\x876\x87A\x87F\x884\x888"+
		"\x88C\x88E\x892\x894\x897\x89B\x8A3\x8AA\x8B3\x8B7\x8C1\x8C7\x8C9\x8D1"+
		"\x8D5\x8D8\x8DC\x8E2\x8E5\x8E9\x8ED\x8EF\x8F2\x8F7\x8FC\x902\x905\x909"+
		"\x90D\x90F\x912\x918\x91D\x921\x926\x92E\x933\x939\x93D\x941\x947\x94C"+
		"\x94F\x95B\x95F\x963\x968\x96C\x96F\x972\x976\x97A\x97C\x981\x984\x988"+
		"\x98C\x991\x995\x998\x99C\x9A1\x9A7\x9AB\x9AF\x9B4\x9B7\x9BA\x9C0\x9C4"+
		"\x9C8\x9CC\x9D0\x9D3\x9D7\x9DA\x9DD\x9E1\x9E5\x9E9\x9ED\x9F2\x9FA\xA00"+
		"\xA02\xA07\xA09\xA0C\xA12\xA17\xA1E\xA20\xA26\xA28\xA2A\xA33\xA38\xA3C"+
		"\xA40\xA44\xA47\xA50\xA53\xA57\xA5A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rubberduck.VBA
